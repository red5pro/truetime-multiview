/*!
 * 
 *   red5pro-sdk - Red5 Pro HTML Publisher and Subscriber SDK.
 *   Author: Infrared5 Inc.
 *   Version: 11.0.0-beta.2
 *   Url: https://github.com/red5pro/red5pro-html-sdk#readme
 * 
 *   Copyright Â© 2015 Infrared5, Inc. All rights reserved.
 * 
 *   The accompanying code comprising examples for use solely in conjunction with Red5 Pro (the "Example Code") 
 *   is  licensed  to  you  by  Infrared5  Inc.  in  consideration  of  your  agreement  to  the  following  
 *   license terms  and  conditions.  Access,  use,  modification,  or  redistribution  of  the  accompanying  
 *   code  constitutes your acceptance of the following license terms and conditions.
 * 
 *   Permission is hereby granted, free of charge, to you to use the Example Code and associated documentation 
 *   files (collectively, the "Software") without restriction, including without limitation the rights to use, 
 *   copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit 
 *   persons to whom the Software is furnished to do so, subject to the following conditions:
 * 
 *   The Software shall be used solely in conjunction with Red5 Pro. Red5 Pro is licensed under a separate end 
 *   user  license  agreement  (the  "EULA"),  which  must  be  executed  with  Infrared5,  Inc.   
 *   An  example  of  the EULA can be found on our website at: https://account.red5pro.com/assets/LICENSE.txt.
 * 
 *   The above copyright notice and this license shall be included in all copies or portions of the Software.
 * 
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,  INCLUDING  BUT  
 *   NOT  LIMITED  TO  THE  WARRANTIES  OF  MERCHANTABILITY, FITNESS  FOR  A  PARTICULAR  PURPOSE  AND  
 *   NONINFRINGEMENT.   IN  NO  EVENT  SHALL INFRARED5, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 *   WHETHER IN  AN  ACTION  OF  CONTRACT,  TORT  OR  OTHERWISE,  ARISING  FROM,  OUT  OF  OR  IN CONNECTION 
 *   WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["red5prosdk"] = factory();
	else
		root["red5prosdk"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * !This is a stripped down version of Bunyan targeted specifically for the browser
 *
 * -------------------------------------------------------------------------------
 *
 * Copyright (c) 2014 Trent Mick. All rights reserved.
 * Copyright (c) 2014 Joyent Inc. All rights reserved.
 *
 * The bunyan logging library for node.js.
 *
 * -*- mode: js -*-
 * vim: expandtab:ts=4:sw=4
 */



var VERSION = '0.2.3';

// Bunyan log format version. This becomes the 'v' field on all log records.
// `0` is until I release a version '1.0.0' of node-bunyan. Thereafter,
// starting with `1`, this will be incremented if there is any backward
// incompatible change to the log record format. Details will be in
// 'CHANGES.md' (the change log).
var LOG_VERSION = 0;

//---- Internal support stuff

/**
 * A shallow copy of an object. Bunyan logging attempts to never cause
 * exceptions, so this function attempts to handle non-objects gracefully.
 */
function objCopy(obj) {
    if (typeof obj === 'undefined' || obj === null) {  // null or undefined
        return obj;
    } else if (Array.isArray(obj)) {
        return obj.slice();
    } else if (typeof (obj) === 'object') {
        var copy = {};
        Object.keys(obj).forEach(function (k) {
            copy[k] = obj[k];
        });
        return copy;
    } else {
        return obj;
    }
}

var format = function(f) {

    if(f === null) {
        return 'null';
    }

    if(typeof f !== 'string') {
        return f.toString();
    }
    var formatRegExp = /%[sdj%]/g;

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
        if (x === '%%') {
            return '%';
        }
        if (i >= len) {
            return x;
        }
        switch (x) {
            case '%s': return String(args[i++]);
            case '%d': return Number(args[i++]);
            case '%j':
                try {
                    return JSON.stringify(args[i++]);
                } catch (_) {
                    return '[Circular]';
                }
                break;
            default:
                return x;
        }
    });
    for (var x = args[i]; i < len; x = args[++i]) {
        str += ' ' + x;
    }
    return str;
};

/**
 * Gather some caller info 3 stack levels up.
 * See <http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi>.
 */
function getCaller3Info() {
    var obj = {};
    var saveLimit = Error.stackTraceLimit;
    var savePrepare = Error.prepareStackTrace;
    Error.stackTraceLimit = 3;
    //Error.captureStackTrace(this, getCaller3Info);

    Error.prepareStackTrace = function (_, stack) {
        var caller = stack[2];
        obj.file = caller.getFileName();
        obj.line = caller.getLineNumber();
        var func = caller.getFunctionName();
        if (func) {
            obj.func = func;
        }
    };
    Error.stackTraceLimit = saveLimit;
    Error.prepareStackTrace = savePrepare;
    return obj;
}


function _indent(s, indent) {
    if (!indent) {
        indent = '    ';
    }
    var lines = s.split(/\r?\n/g);
    return indent + lines.join('\n' + indent);
}


/**
 * Warn about an bunyan processing error.
 *
 * @param msg {String} Message with which to warn.
 * @param dedupKey {String} Optional. A short string key for this warning to
 *      have its warning only printed once.
 */
function _warn(msg, dedupKey) {
    if (dedupKey) {
        if (_warned[dedupKey]) {
            return;
        }
        _warned[dedupKey] = true;
    }
    console.error(msg + '\n');
}
function _haveWarned(dedupKey) {
    return _warned[dedupKey];
}
var _warned = {};


function ConsoleRawStream() {
}
ConsoleRawStream.prototype.write = function (rec) {
    if (rec.level < INFO) {
        console.log(rec);
    } else if (rec.level < WARN) {
        console.info(rec);
    } else if (rec.level < ERROR) {
        console.warn(rec);
    } else {
        console.error(rec);
    }

    if(rec.err && rec.err.stack) {
        console.error(rec.err.stack);
    }
};

function ConsoleFormattedStream() {}
ConsoleFormattedStream.prototype.write = function (rec) {

    var levelCss, defaultCss = 'color: DimGray', msgCss = 'color: SteelBlue';

    if (rec.level < DEBUG) {
        levelCss = 'color: DeepPink';
    } else if (rec.level < INFO) {
        levelCss = 'color: GoldenRod';
    } else if (rec.level < WARN) {
        levelCss = 'color: DarkTurquoise';
    } else if (rec.level < ERROR) {
        levelCss = 'color: Purple';
    } else if (rec.level < FATAL) {
        levelCss = 'color: Crimson';
    } else {
        levelCss = 'color: Black';
    }

    var loggerName = rec.childName ? rec.name + '/' + rec.childName : rec.name;

    //get level name and pad start with spacs
    var levelName = nameFromLevel[rec.level].toUpperCase();
    levelName = Array(6 - levelName.length).join(' ') + levelName;

    function padZeros(number, len) {
        return Array((len + 1) - (number + '').length).join('0') + number;
    }

    console.log('[%s:%s:%s:%s] %c%s%c: %s: %c%s',
        padZeros(rec.time.getHours(), 2), padZeros(rec.time.getMinutes(), 2),
        padZeros(rec.time.getSeconds(), 2), padZeros(rec.time.getMilliseconds(), 4),
        levelCss, levelName,
        defaultCss, loggerName,
        msgCss, rec.msg);
    if(rec.err && rec.err.stack) {
        console.log('%c%s,', levelCss, rec.err.stack);
    }
};

//---- Levels

var TRACE = 10;
var DEBUG = 20;
var INFO = 30;
var WARN = 40;
var ERROR = 50;
var FATAL = 60;

var levelFromName = {
    'trace': TRACE,
    'debug': DEBUG,
    'info': INFO,
    'warn': WARN,
    'error': ERROR,
    'fatal': FATAL
};
var nameFromLevel = {};
Object.keys(levelFromName).forEach(function (name) {
    nameFromLevel[levelFromName[name]] = name;
});


/**
 * Resolve a level number, name (upper or lowercase) to a level number value.
 *
 * @api public
 */
function resolveLevel(nameOrNum) {
    var level = (typeof (nameOrNum) === 'string' ? levelFromName[nameOrNum.toLowerCase()] : nameOrNum);
    return level;
}


//---- Logger class

/**
 * Create a Logger instance.
 *
 * @param options {Object} See documentation for full details. At minimum
 *    this must include a 'name' string key. Configuration keys:
 *      - `streams`: specify the logger output streams. This is an array of
 *        objects with these fields:
 *          - `type`: The stream type. See README.md for full details.
 *            Often this is implied by the other fields. Examples are
 *            'file', 'stream' and "raw".
 *          - `level`: Defaults to 'info'.
 *          - `path` or `stream`: The specify the file path or writeable
 *            stream to which log records are written. E.g.
 *            `stream: process.stdout`.
 *          - `closeOnExit` (boolean): Optional. Default is true for a
 *            'file' stream when `path` is given, false otherwise.
 *        See README.md for full details.
 *      - `level`: set the level for a single output stream (cannot be used
 *        with `streams`)
 *      - `stream`: the output stream for a logger with just one, e.g.
 *        `process.stdout` (cannot be used with `streams`)
 *      - `serializers`: object mapping log record field names to
 *        serializing functions. See README.md for details.
 *      - `src`: Boolean (default false). Set true to enable 'src' automatic
 *        field with log call source info.
 *    All other keys are log record fields.
 *
 * An alternative *internal* call signature is used for creating a child:
 *    new Logger(<parent logger>, <child options>[, <child opts are simple>]);
 *
 * @param _childSimple (Boolean) An assertion that the given `_childOptions`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation.
 */
function Logger(options, _childOptions, _childSimple) {
    if (!(this instanceof Logger)) {
        return new Logger(options, _childOptions);
    }

    // Input arg validation.
    var parent;
    if (_childOptions !== undefined) {
        parent = options;
        options = _childOptions;
        if (!(parent instanceof Logger)) {
            throw new TypeError(
                'invalid Logger creation: do not pass a second arg');
        }
    }
    if (!options) {
        throw new TypeError('options (object) is required');
    }
    if (!parent) {
        if (!options.name) {
            throw new TypeError('options.name (string) is required');
        }
    } else {
        if (options.name) {
            throw new TypeError(
                'invalid options.name: child cannot set logger name');
        }
    }
    if (options.stream && options.streams) {
        throw new TypeError('cannot mix "streams" and "stream" options');
    }
    if (options.streams && !Array.isArray(options.streams)) {
        throw new TypeError('invalid options.streams: must be an array');
    }
    if (options.serializers && (typeof (options.serializers) !== 'object' || Array.isArray(options.serializers))) {
        throw new TypeError('invalid options.serializers: must be an object');
    }

    var fields, name, i;

    // Fast path for simple child creation.
    if (parent && _childSimple) {
        // `_isSimpleChild` is a signal to stream close handling that this child
        // owns none of its streams.
        this._isSimpleChild = true;

        this._level = parent._level;
        this.streams = parent.streams;
        this.serializers = parent.serializers;
        this.src = parent.src;
        fields = this.fields = {};
        var parentFieldNames = Object.keys(parent.fields);
        for (i = 0; i < parentFieldNames.length; i++) {
            name = parentFieldNames[i];
            fields[name] = parent.fields[name];
        }
        var names = Object.keys(options);
        for (i = 0; i < names.length; i++) {
            name = names[i];
            fields[name] = options[name];
        }
        return;
    }

    // Null values.
    var self = this;
    if (parent) {
        this._level = parent._level;
        this.streams = [];
        for (i = 0; i < parent.streams.length; i++) {
            var s = objCopy(parent.streams[i]);
            s.closeOnExit = false; // Don't own parent stream.
            this.streams.push(s);
        }
        this.serializers = objCopy(parent.serializers);
        this.src = parent.src;
        this.fields = objCopy(parent.fields);
        if (options.level) {
            this.level(options.level);
        }
    } else {
        this._level = Number.POSITIVE_INFINITY;
        this.streams = [];
        this.serializers = null;
        this.src = false;
        this.fields = {};
    }

    // Handle *config* options (i.e. options that are not just plain data
    // for log records).
    if (options.stream) {
        self.addStream({
            type: 'stream',
            stream: options.stream,
            closeOnExit: false,
            level: options.level
        });
    } else if (options.streams) {
        options.streams.forEach(function (s) {
            self.addStream(s, options.level);
        });
    } else if (parent && options.level) {
        this.level(options.level);
    } else if (!parent) {

        /*
         * In the browser we'll be emitting to console.log by default.
         * Any console.log worth its salt these days can nicely render
         * and introspect objects (e.g. the Firefox and Chrome console)
         * so let's emit the raw log record. Are there browsers for which
         * that breaks things?
         */
        self.addStream({
            type: 'raw',
            stream: new ConsoleRawStream(),
            closeOnExit: false,
            level: options.level
        });

    }
    if (options.serializers) {
        self.addSerializers(options.serializers);
    }
    if (options.src) {
        this.src = true;
    }

    // Fields.
    // These are the default fields for log records (minus the attributes
    // removed in this constructor). To allow storing raw log records
    // (unrendered), `this.fields` must never be mutated. Create a copy for
    // any changes.
    fields = objCopy(options);
    delete fields.stream;
    delete fields.level;
    delete fields.streams;
    delete fields.serializers;
    delete fields.src;
    if (this.serializers) {
        this._applySerializers(fields);
    }
    Object.keys(fields).forEach(function (k) {
        self.fields[k] = fields[k];
    });
}

/**
 * Add a stream
 *
 * @param stream {Object}. Object with these fields:
 *    - `type`: The stream type. See README.md for full details.
 *      Often this is implied by the other fields. Examples are
 *      'file', 'stream' and "raw".
 *    - `path` or `stream`: The specify the file path or writeable
 *      stream to which log records are written. E.g.
 *      `stream: process.stdout`.
 *    - `level`: Optional. Falls back to `defaultLevel`.
 *    - `closeOnExit` (boolean): Optional. Default is true for a
 *      'file' stream when `path` is given, false otherwise.
 *    See README.md for full details.
 * @param defaultLevel {Number|String} Optional. A level to use if
 *      `stream.level` is not set. If neither is given, this defaults to INFO.
 */
Logger.prototype.addStream = function addStream(s, defaultLevel) {
    var self = this;
    if (defaultLevel === null || defaultLevel === undefined) {
        defaultLevel = INFO;
    }

    s = objCopy(s);

    // Implicit 'type' from other args.
    if (!s.type && s.stream) {
        s.type = 'raw';
    }
    s.raw = (s.type === 'raw');  // PERF: Allow for faster check in `_emit`.

    if (s.level) {
        s.level = resolveLevel(s.level);
    } else {
        s.level = resolveLevel(defaultLevel);
    }
    if (s.level < self._level) {
        self._level = s.level;
    }

    switch (s.type) {
        case 'stream':
            if (!s.closeOnExit) {
                s.closeOnExit = false;
            }
            break;
        case 'raw':
            if (!s.closeOnExit) {
                s.closeOnExit = false;
            }
            break;
        default:
            throw new TypeError('unknown stream type "' + s.type + '"');
    }

    self.streams.push(s);
    delete self.haveNonRawStreams;  // reset
};


/**
 * Add serializers
 *
 * @param serializers {Object} Optional. Object mapping log record field names
 *    to serializing functions. See README.md for details.
 */
Logger.prototype.addSerializers = function addSerializers(serializers) {
    var self = this;

    if (!self.serializers) {
        self.serializers = {};
    }
    Object.keys(serializers).forEach(function (field) {
        var serializer = serializers[field];
        if (typeof (serializer) !== 'function') {
            throw new TypeError(format(
                'invalid serializer for "%s" field: must be a function',
                field));
        } else {
            self.serializers[field] = serializer;
        }
    });
};


/**
 * Create a child logger, typically to add a few log record fields.
 *
 * This can be useful when passing a logger to a sub-component, e.g. a
 * 'wuzzle' component of your service:
 *
 *    var wuzzleLog = log.child({component: 'wuzzle'})
 *    var wuzzle = new Wuzzle({..., log: wuzzleLog})
 *
 * Then log records from the wuzzle code will have the same structure as
 * the app log, *plus the component='wuzzle' field*.
 *
 * @param options {Object} Optional. Set of options to apply to the child.
 *    All of the same options for a new Logger apply here. Notes:
 *      - The parent's streams are inherited and cannot be removed in this
 *        call. Any given `streams` are *added* to the set inherited from
 *        the parent.
 *      - The parent's serializers are inherited, though can effectively be
 *        overwritten by using duplicate keys.
 *      - Can use `level` to set the level of the streams inherited from
 *        the parent. The level for the parent is NOT affected.
 * @param simple {Boolean} Optional. Set to true to assert that `options`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation. See 'tools/timechild.js' for numbers.
 */
Logger.prototype.child = function (options, simple) {
    return new (this.constructor)(this, options || {}, simple);
};

/**
 * Get/set the level of all streams on this logger.
 *
 * Get Usage:
 *    // Returns the current log level (lowest level of all its streams).
 *    log.level() -> INFO
 *
 * Set Usage:
 *    log.level(INFO)       // set all streams to level INFO
 *    log.level('info')     // can use 'info' et al aliases
 */
Logger.prototype.level = function level(value) {
    if (value === undefined) {
        return this._level;
    }
    var newLevel = resolveLevel(value);
    var len = this.streams.length;
    for (var i = 0; i < len; i++) {
        this.streams[i].level = newLevel;
    }
    this._level = newLevel;
};


/**
 * Get/set the level of a particular stream on this logger.
 *
 * Get Usage:
 *    // Returns an array of the levels of each stream.
 *    log.levels() -> [TRACE, INFO]
 *
 *    // Returns a level of the identified stream.
 *    log.levels(0) -> TRACE      // level of stream at index 0
 *    log.levels('foo')           // level of stream with name 'foo'
 *
 * Set Usage:
 *    log.levels(0, INFO)         // set level of stream 0 to INFO
 *    log.levels(0, 'info')       // can use 'info' et al aliases
 *    log.levels('foo', WARN)     // set stream named 'foo' to WARN
 *
 * Stream names: When streams are defined, they can optionally be given
 * a name. For example,
 *       log = new Logger({
 *         streams: [
 *           {
 *             name: 'foo',
 *             path: '/var/log/my-service/foo.log'
 *             level: 'trace'
 *           },
 *         ...
 *
 * @param name {String|Number} The stream index or name.
 * @param value {Number|String} The level value (INFO) or alias ('info').
 *    If not given, this is a 'get' operation.
 * @throws {Error} If there is no stream with the given name.
 */
Logger.prototype.levels = function levels(name, value) {
    if (name === undefined) {
        return this.streams.map(
            function (s) {
                return s.level;
            });
    }
    var stream;
    if (typeof (name) === 'number') {
        stream = this.streams[name];
        if (stream === undefined) {
            throw new Error('invalid stream index: ' + name);
        }
    } else {
        var len = this.streams.length;
        for (var i = 0; i < len; i++) {
            var s = this.streams[i];
            if (s.name === name) {
                stream = s;
                break;
            }
        }
        if (!stream) {
            throw new Error(format('no stream with name "%s"', name));
        }
    }
    if (value === undefined) {
        return stream.level;
    } else {
        var newLevel = resolveLevel(value);
        stream.level = newLevel;
        if (newLevel < this._level) {
            this._level = newLevel;
        }
    }
};


/**
 * Apply registered serializers to the appropriate keys in the given fields.
 *
 * Pre-condition: This is only called if there is at least one serializer.
 *
 * @param fields (Object) The log record fields.
 * @param excludeFields (Object) Optional mapping of keys to `true` for
 *    keys to NOT apply a serializer.
 */
Logger.prototype._applySerializers = function (fields, excludeFields) {
    var self = this;

    // Check each serializer against these (presuming number of serializers
    // is typically less than number of fields).
    Object.keys(this.serializers).forEach(function (name) {
        if (fields[name] === undefined ||
            (excludeFields && excludeFields[name])) {
            return;
        }
        try {
            fields[name] = self.serializers[name](fields[name]);
        } catch (err) {
            _warn(format('bunyan: ERROR: Exception thrown from the "%s" ' +
                    'Bunyan serializer. This should never happen. This is a bug' +
                    'in that serializer function.\n%s',
                name, err.stack || err));
            fields[name] = format('(Error in Bunyan log "%s" serializer broke field. See stderr for details.)', name);
        }
    });
};


/**
 * Emit a log record.
 *
 * @param rec {log record}
 * @param noemit {Boolean} Optional. Set to true to skip emission
 *      and just return the JSON string.
 */
Logger.prototype._emit = function (rec, noemit) {
    var i;

    // Lazily determine if this Logger has non-'raw' streams. If there are
    // any, then we need to stringify the log record.
    if (this.haveNonRawStreams === undefined) {
        this.haveNonRawStreams = false;
        for (i = 0; i < this.streams.length; i++) {
            if (!this.streams[i].raw) {
                this.haveNonRawStreams = true;
                break;
            }
        }
    }

    // Stringify the object. Attempt to warn/recover on error.
    var str;
    if (noemit || this.haveNonRawStreams) {
        try {
            str = JSON.stringify(rec, safeCycles()) + '\n';
        } catch (e) {
            var dedupKey = e.stack.split(/\n/g, 2).join('\n');
            _warn('bunyan: ERROR: Exception in ' +
                    '`JSON.stringify(rec)`. You can install the ' +
                    '"safe-json-stringify" module to have Bunyan fallback ' +
                    'to safer stringification. Record:\n' +
                    _indent(format('%s\n%s', rec, e.stack)),
                dedupKey);
            str = format('(Exception in JSON.stringify(rec): %j. See stderr for details.)\n', e.message);

        }
    }

    if (noemit) {
        return str;
    }


    var level = rec.level;
    for (i = 0; i < this.streams.length; i++) {
        var s = this.streams[i];
        if (s.level <= level) {
            s.stream.write(s.raw ? rec : str);
        }
    }

    return str;
};


/**
 * Build a log emitter function for level minLevel. I.e. this is the
 * creator of `log.info`, `log.error`, etc.
 */
function mkLogEmitter(minLevel) {
    return function () {
        var log = this;

        function mkRecord(args) {
            var excludeFields;
            if (args[0] instanceof Error) {
                // `log.<level>(err, ...)`
                fields = {
                    // Use this Logger's err serializer, if defined.
                    err: (log.serializers && log.serializers.err ? log.serializers.err(args[0]) : Logger.stdSerializers.err(args[0]))
                };
                excludeFields = {err: true};
                if (args.length === 1) {
                    msgArgs = [fields.err.message];
                } else {
                    msgArgs = Array.prototype.slice.call(args, 1);
                }
            } else if (typeof (args[0]) !== 'object' && args[0] !== null ||
                Array.isArray(args[0])) {
                // `log.<level>(msg, ...)`
                fields = null;
                msgArgs = Array.prototype.slice.call(args);
            } else {  // `log.<level>(fields, msg, ...)`
                fields = args[0];
                msgArgs = Array.prototype.slice.call(args, 1);
            }

            // Build up the record object.
            var rec = objCopy(log.fields);
            rec.level = minLevel;
            var recFields = (fields ? objCopy(fields) : null);
            if (recFields) {
                if (log.serializers) {
                    log._applySerializers(recFields, excludeFields);
                }
                Object.keys(recFields).forEach(function (k) {
                    rec[k] = recFields[k];
                });
            }
            rec.levelName = nameFromLevel[minLevel];
            rec.msg = format.apply(log, msgArgs);
            if (!rec.time) {
                rec.time = (new Date());
            }
            // Get call source info
            if (log.src && !rec.src) {
                rec.src = getCaller3Info();
            }
            rec.v = LOG_VERSION;

            return rec;
        }

        var fields = null;
        var msgArgs = arguments;
        var rec = null;
        if (!this._emit) {
            /*
             * Show this invalid Bunyan usage warning *once*.
             *
             * See <https://github.com/trentm/node-bunyan/issues/100> for
             * an example of how this can happen.
             */
            var dedupKey = 'unbound';
            if (!_haveWarned[dedupKey]) {
                var caller = getCaller3Info();
                _warn(format('bunyan usage error: %s:%s: attempt to log with an unbound log method: `this` is: %s',
                        caller.file, caller.line, this.toString()),
                    dedupKey);
            }
            return;
        } else if (arguments.length === 0) {   // `log.<level>()`
            return (this._level <= minLevel);
        } else if (this._level > minLevel) {
            /* pass through */
        } else {
            rec = mkRecord(msgArgs);
            this._emit(rec);
        }
    };
}


/**
 * The functions below log a record at a specific level.
 *
 * Usages:
 *    log.<level>()  -> boolean is-trace-enabled
 *    log.<level>(<Error> err, [<string> msg, ...])
 *    log.<level>(<string> msg, ...)
 *    log.<level>(<object> fields, <string> msg, ...)
 *
 * where <level> is the lowercase version of the log level. E.g.:
 *
 *    log.info()
 *
 * @params fields {Object} Optional set of additional fields to log.
 * @params msg {String} Log message. This can be followed by additional
 *    arguments that are handled like
 *    [util.format](http://nodejs.org/docs/latest/api/all.html#util.format).
 */
Logger.prototype.trace = mkLogEmitter(TRACE);
Logger.prototype.debug = mkLogEmitter(DEBUG);
Logger.prototype.info = mkLogEmitter(INFO);
Logger.prototype.warn = mkLogEmitter(WARN);
Logger.prototype.error = mkLogEmitter(ERROR);
Logger.prototype.fatal = mkLogEmitter(FATAL);


//---- Standard serializers
// A serializer is a function that serializes a JavaScript object to a
// JSON representation for logging. There is a standard set of presumed
// interesting objects in node.js-land.

Logger.stdSerializers = {};

/*
 * This function dumps long stack traces for exceptions having a cause()
 * method. The error classes from
 * [verror](https://github.com/davepacheco/node-verror) and
 * [restify v2.0](https://github.com/mcavage/node-restify) are examples.
 *
 * Based on `dumpException` in
 * https://github.com/davepacheco/node-extsprintf/blob/master/lib/extsprintf.js
 */
function getFullErrorStack(ex) {
    var ret = ex.stack || ex.toString();
    if (ex.cause && typeof (ex.cause) === 'function') {
        var cex = ex.cause();
        if (cex) {
            ret += '\nCaused by: ' + getFullErrorStack(cex);
        }
    }
    return (ret);
}

// Serialize an Error object
// (Core error properties are enumerable in node 0.4, not in 0.6).
Logger.stdSerializers.err = function(err) {
    if (!err || !err.stack) {
        return err;
    }

    var obj = {
        message: err.message,
        name: err.name,
        stack: getFullErrorStack(err),
        code: err.code,
        signal: err.signal
    };
    return obj;
};


// A JSON stringifier that handles cycles safely.
// Usage: JSON.stringify(obj, safeCycles())
function safeCycles() {
    var seen = [];
    return function (key, val) {
        if (!val || typeof (val) !== 'object') {
            return val;
        }
        if (seen.indexOf(val) !== -1) {
            return '[Circular]';
        }
        seen.push(val);
        return val;
    };
}

//---- Exports

module.exports = Logger;

module.exports.TRACE = TRACE;
module.exports.DEBUG = DEBUG;
module.exports.INFO = INFO;
module.exports.WARN = WARN;
module.exports.ERROR = ERROR;
module.exports.FATAL = FATAL;
module.exports.resolveLevel = resolveLevel;
module.exports.levelFromName = levelFromName;
module.exports.nameFromLevel = nameFromLevel;

module.exports.VERSION = VERSION;
module.exports.LOG_VERSION = LOG_VERSION;

module.exports.createLogger = function createLogger(options) {
    return new Logger(options);
};

// Useful for custom `type == 'raw'` streams that may do JSON stringification
// of log records themselves. Usage:
//    var str = JSON.stringify(rec, bunyan.safeCycles());
module.exports.safeCycles = safeCycles;

//streams
module.exports.ConsoleFormattedStream = ConsoleFormattedStream;
module.exports.ConsoleRawStream = ConsoleRawStream;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(2);


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "RTCConferenceParticipant", function() { return /* reexport */ participant; });
__webpack_require__.d(__webpack_exports__, "Red5ProSubscriber", function() { return /* binding */ js_Red5ProSubscriber; });
__webpack_require__.d(__webpack_exports__, "RTCSubscriber", function() { return /* binding */ js_RTCSubscriber; });
__webpack_require__.d(__webpack_exports__, "WHEPClient", function() { return /* binding */ js_WHEPClient; });
__webpack_require__.d(__webpack_exports__, "RTMPSubscriber", function() { return /* binding */ js_RTMPSubscriber; });
__webpack_require__.d(__webpack_exports__, "HLSSubscriber", function() { return /* binding */ js_HLSSubscriber; });
__webpack_require__.d(__webpack_exports__, "PlaybackView", function() { return /* reexport */ playback; });
__webpack_require__.d(__webpack_exports__, "Red5ProPublisher", function() { return /* binding */ js_Red5ProPublisher; });
__webpack_require__.d(__webpack_exports__, "RTCPublisher", function() { return /* binding */ js_RTCPublisher; });
__webpack_require__.d(__webpack_exports__, "WHIPClient", function() { return /* binding */ js_WHIPClient; });
__webpack_require__.d(__webpack_exports__, "RTMPPublisher", function() { return /* binding */ js_RTMPPublisher; });
__webpack_require__.d(__webpack_exports__, "PublisherView", function() { return /* reexport */ view_publish; });
__webpack_require__.d(__webpack_exports__, "PlaybackControls", function() { return /* reexport */ PlaybackControls; });
__webpack_require__.d(__webpack_exports__, "Red5ProSharedObject", function() { return /* binding */ js_Red5ProSharedObject; });
__webpack_require__.d(__webpack_exports__, "Red5ProSharedObjectSocket", function() { return /* binding */ js_Red5ProSharedObjectSocket; });
__webpack_require__.d(__webpack_exports__, "Red5ProSharedObjectPeerConnection", function() { return /* binding */ js_Red5ProSharedObjectPeerConnection; });
__webpack_require__.d(__webpack_exports__, "PublisherEventTypes", function() { return /* binding */ js_PublisherEventTypes; });
__webpack_require__.d(__webpack_exports__, "RTCPublisherEventTypes", function() { return /* binding */ js_RTCPublisherEventTypes; });
__webpack_require__.d(__webpack_exports__, "FailoverPublisherEventTypes", function() { return /* binding */ js_FailoverPublisherEventTypes; });
__webpack_require__.d(__webpack_exports__, "SubscriberEventTypes", function() { return /* binding */ js_SubscriberEventTypes; });
__webpack_require__.d(__webpack_exports__, "RTCSubscriberEventTypes", function() { return /* binding */ js_RTCSubscriberEventTypes; });
__webpack_require__.d(__webpack_exports__, "RTMPSubscriberEventTypes", function() { return /* binding */ js_RTMPSubscriberEventTypes; });
__webpack_require__.d(__webpack_exports__, "FailoverSubscriberEventTypes", function() { return /* binding */ js_FailoverSubscriberEventTypes; });
__webpack_require__.d(__webpack_exports__, "SharedObjectEventTypes", function() { return /* binding */ js_SharedObjectEventTypes; });
__webpack_require__.d(__webpack_exports__, "MessageTransportStateEventTypes", function() { return /* binding */ js_MessageTransportStateEventTypes; });
__webpack_require__.d(__webpack_exports__, "RTCConferenceParticipantEventType", function() { return /* binding */ RTCConferenceParticipantEventType; });
__webpack_require__.d(__webpack_exports__, "PlaybackAudioEncoder", function() { return /* binding */ js_PlaybackAudioEncoder; });
__webpack_require__.d(__webpack_exports__, "PlaybackVideoEncoder", function() { return /* binding */ js_PlaybackVideoEncoder; });
__webpack_require__.d(__webpack_exports__, "IceTransportTypes", function() { return /* binding */ js_IceTransportTypes; });
__webpack_require__.d(__webpack_exports__, "TransformFrameTypes", function() { return /* binding */ js_TransformFrameTypes; });
__webpack_require__.d(__webpack_exports__, "setLogLevel", function() { return /* binding */ js_setLogLevel; });
__webpack_require__.d(__webpack_exports__, "getRecordedLogs", function() { return /* reexport */ getRecordedLogs; });
__webpack_require__.d(__webpack_exports__, "LOG_LEVELS", function() { return /* binding */ LOG_LEVELS; });
__webpack_require__.d(__webpack_exports__, "getLogger", function() { return /* binding */ js_getLogger; });

// EXTERNAL MODULE: ./node_modules/browser-bunyan/lib/bunyan.js
var bunyan = __webpack_require__(0);

// CONCATENATED MODULE: ./src/js/log/bunyan-writer.js


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


/**
 * Custom logger for bunyon.
 *
 * @private
 */
var bunyan_writer_RawStream = /*#__PURE__*/function () {
  function RawStream() {
    _classCallCheck(this, RawStream);
  }
  _createClass(RawStream, [{
    key: "write",
    value: function write(rec) {
      console.log('%s - [%s] %s: %s',
      // eslint-disable-line no-console
      rec.time.toISOString(), rec.name, bunyan["nameFromLevel"][rec.level], rec.msg);
    }
  }]);
  return RawStream;
}();
// CONCATENATED MODULE: ./src/js/log/index.js




var logger;
var store;
var formatMessage = function formatMessage(dispatcher) {
  return function (message) {
    return "(".concat(dispatcher, ") ").concat(message);
  };
};
var log_decorate = function decorate(level) {
  return function (source, message) {
    logger[level](formatMessage(source)(message));
  };
};

/*
 * The log levels supported.
 */
var LEVELS = {
  TRACE: 'trace',
  INFO: 'info',
  DEBUG: 'debug',
  WARN: 'warn',
  ERROR: 'error',
  FATAL: 'fatal'
};

/**
 * Establish logger to use at level.
 *
 * @param {String} level
 *        The level type from `LEVELS`.
 * @param {Array} streamList
 *        The streamList to use in creating bunyon-based logger.
 *
 * @private
 */
var log_establishLogger = function establishLogger(level) {
  var record = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var streamList = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
  var streams = [];
  streams.push({
    level: level,
    stream: new bunyan_writer_RawStream(),
    type: 'raw'
  });
  if (streamList) {
    var list = streamList.map(function (item) {
      item.level = level;
    });
    streams = streams.concat(list);
  }
  if (record) {
    store = [];
    streams.push({
      level: level,
      stream: {
        write: function write(rec) {
          var log = "[".concat(rec.time.toISOString(), "] ").concat(bunyan["nameFromLevel"][rec.level], ": ").concat(rec.msg);
          store.push(log);
        }
      }
    });
  }
  logger = Object(bunyan["createLogger"])({
    level: level,
    name: 'red5pro-sdk',
    streams: streams
  });
};

/**
 * Return the determined logger instance.
 *
 * @return {Object}
 *
 * @private
 */
var getLogger = function getLogger() {
  return logger;
};

/**
 * Returns the stored logs if requested to `record` on establishment of logger.
 *
 * @return {Array}
 */
var getRecordedLogs = function getRecordedLogs() {
  return store;
};

/* Quick access to logger level types. */
var trace = log_decorate(LEVELS.TRACE);
var info = log_decorate(LEVELS.INFO);
var log_debug = log_decorate(LEVELS.DEBUG);
var log_warn = log_decorate(LEVELS.WARN);
var log_error = log_decorate(LEVELS.ERROR);
var log_fatal = log_decorate(LEVELS.FATAL);
// CONCATENATED MODULE: ./src/js/util/promise.js


/**
 * A DeferredPromise allows for construction and assignment of a future fullfilment of a `Promise`.
 *
 * @private
 */
function promise_typeof(obj) { "@babel/helpers - typeof"; return promise_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, promise_typeof(obj); }
function promise_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, promise_toPropertyKey(descriptor.key), descriptor); } }
function promise_createClass(Constructor, protoProps, staticProps) { if (protoProps) promise_defineProperties(Constructor.prototype, protoProps); if (staticProps) promise_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function promise_toPropertyKey(arg) { var key = promise_toPrimitive(arg, "string"); return promise_typeof(key) === "symbol" ? key : String(key); }
function promise_toPrimitive(input, hint) { if (promise_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (promise_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function promise_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
var _DeferredPromise = /*#__PURE__*/promise_createClass(function _DeferredPromise() {
  var _this = this;
  promise_classCallCheck(this, _DeferredPromise);
  this.resolve = undefined;
  this.reject = undefined;
  this.promise = new Promise(function (resolve, reject) {
    _this.resolve = resolve;
    _this.reject = reject;
  });
});
/**
 * A Future determines if existant DeferredPromise is available or creates and returns a new one.
 *
 * @param {DeferredPromise} deferredIfExist
 *        An object tested for truthy-ness.
 * @return {DeferredPromise}
 *
 * @private
 */
var _Future = {
  createIfNotExist: function createIfNotExist(deferredIfExist) {
    var f = deferredIfExist;
    if (!f) {
      f = new _DeferredPromise();
    }
    return f;
  }
};
var DeferredPromise = _DeferredPromise;
var Future = _Future;
// CONCATENATED MODULE: ./src/js/util/impl-factory-order.js


function impl_factory_order_typeof(obj) { "@babel/helpers - typeof"; return impl_factory_order_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, impl_factory_order_typeof(obj); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == impl_factory_order_typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function impl_factory_order_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function impl_factory_order_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, impl_factory_order_toPropertyKey(descriptor.key), descriptor); } }
function impl_factory_order_createClass(Constructor, protoProps, staticProps) { if (protoProps) impl_factory_order_defineProperties(Constructor.prototype, protoProps); if (staticProps) impl_factory_order_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function impl_factory_order_toPropertyKey(arg) { var key = impl_factory_order_toPrimitive(arg, "string"); return impl_factory_order_typeof(key) === "symbol" ? key : String(key); }
function impl_factory_order_toPrimitive(input, hint) { if (impl_factory_order_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (impl_factory_order_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var impl_factory_order_map = new WeakMap();
var pvt = function pvt(ctx) {
  if (!impl_factory_order_map.has(ctx)) {
    impl_factory_order_map.set(ctx, {});
  }
  return impl_factory_order_map.get(ctx);
};

/**
 * Implementation Factory.
 *
 * This is used by the fail-over for Publisher and Subscriber to determine browser support of order list of implementations.
 *
 * @private
 */
var impl_factory_order_ImplFactoryOrder = /*#__PURE__*/function () {
  function ImplFactoryOrder() {
    var _this = this;
    impl_factory_order_classCallCheck(this, ImplFactoryOrder);
    this.listorder = function () {
      return /*#__PURE__*/_regeneratorRuntime().mark(function listorder(list) {
        return _regeneratorRuntime().wrap(function listorder$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!(list.length > 0)) {
                _context.next = 5;
                break;
              }
              _context.next = 3;
              return list.shift();
            case 3:
              _context.next = 0;
              break;
            case 5:
            case "end":
              return _context.stop();
          }
        }, listorder);
      });
    }();

    /**
     * Attempt to check support and initialize Class instance within the order. Optionally, can invoke an initialization with configuration object.
     *
     * @param {Object} iterator
     *        Iterator used in accessing possible Class instance next in linked list of order.
     * @param {Object} map
     *        Map of order type to Class.
     * @param {Object} options
     *        Map of initialization configurations to types.
     * @param {Promise} promise
     *        The `Promise` instance to use in resolve or reject once either a valid instance is created or order has been exhausted, respectively.
     * @param {Function} initFn
     *        Optional function to invoke upon instantiation attempt.
     * @param {String} lastError
     *        Optional - and compounded - last string error that caused a failure in establishing a supported instance. This error is delivered on the rejection of the `Promise`.
     *
     * @private
     */
    pvt(this).find = function (iterator, map, options, promise) {
      var initFn = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
      var lastError = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
      var _pvt$next = pvt(_this).next(iterator, map),
        _pvt$next2 = _slicedToArray(_pvt$next, 2),
        type = _pvt$next2[0],
        Impl = _pvt$next2[1];
      if (!Impl) {
        promise.reject(lastError);
      } else {
        var p;
        var src = options[type];
        src = src || options;
        if (initFn) {
          p = new Impl()[initFn](src);
        } else {
          p = new Impl(src);
        }
        p.then(function (concrete) {
          promise.resolve(concrete);
        })["catch"](function (error) {
          // eslint-disable-line no-unused-vars
          lastError = error;
          pvt(_this).find(iterator, map, options, promise, initFn, lastError);
        });
      }
    };

    /**
     * Iterate next in order.
     *
     * @private
     */
    pvt(this).next = function (order, map) {
      var Impl;
      var key;
      var next = order.next();
      if (!next.done) {
        key = next.value;
        Impl = map.get(key);
      }
      return [key, Impl];
    };
  }

  /**
   * Request to locate supported implementation and initialize it, resolving the `Promise` with the instance.
   *
   * @param {Array} order
   * @param {Object} map
   *        Map of Class to order type.
   * @param {Object} options
   *        Initialization object to pass to constructor of Class in browser test of support.
   * @param {Function} initFn
   *        Optional initialization function to invoke with the `options` config.
   *
   * @private
   */
  impl_factory_order_createClass(ImplFactoryOrder, [{
    key: "create",
    value: function create(order, map, options) {
      var initFn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var promise = new DeferredPromise();
      pvt(this).find(this.listorder(order.slice()), map, options, promise, initFn);
      return promise.promise;
    }
  }]);
  return ImplFactoryOrder;
}();
/* harmony default export */ var impl_factory_order = (impl_factory_order_ImplFactoryOrder);
// CONCATENATED MODULE: ./src/js/core/event-emitter.js
function event_emitter_typeof(obj) { "@babel/helpers - typeof"; return event_emitter_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, event_emitter_typeof(obj); }
function event_emitter_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function event_emitter_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, event_emitter_toPropertyKey(descriptor.key), descriptor); } }
function event_emitter_createClass(Constructor, protoProps, staticProps) { if (protoProps) event_emitter_defineProperties(Constructor.prototype, protoProps); if (staticProps) event_emitter_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function event_emitter_toPropertyKey(arg) { var key = event_emitter_toPrimitive(arg, "string"); return event_emitter_typeof(key) === "symbol" ? key : String(key); }
function event_emitter_toPrimitive(input, hint) { if (event_emitter_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (event_emitter_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var WILDCARD = '*';
var WILDCARD_KEY = 'RED5PRO';

/**
 * Base class for an Event Emitter.
 */
var EventEmitter = /*#__PURE__*/function () {
  function EventEmitter() {
    event_emitter_classCallCheck(this, EventEmitter);
    this._callbacks = {};
    this._callbacks[WILDCARD_KEY] = [];
  }

  /**
   * Invokes event handlers.
   *
   * @param {Array} callbacks
   * @param {Event} event
   *
   * @private
   */
  event_emitter_createClass(EventEmitter, [{
    key: "_notify",
    value: function _notify(callbacks, event) {
      var i,
        length = callbacks.length;
      for (i = 0; i < length; i++) {
        callbacks[i](event);
      }
    }

    /**
     * Assign a callback handler to an event type.
     *
     * @param {String} type
     * @param {Function} fn
     */
  }, {
    key: "on",
    value: function on(type, fn) {
      if (typeof fn !== 'function') {
        return;
      }
      if (type === WILDCARD) {
        this._callbacks[WILDCARD_KEY].push(fn);
        return;
      }
      if (this._callbacks[type] === undefined) {
        this._callbacks[type] = [];
      }
      if (this._callbacks[type].indexOf(fn) === -1) {
        this._callbacks[type].push(fn);
      }
    }

    /**
     * Remove a callback handler for an event type.
     *
     * @param {String} type
     * @param {Function} fn
     */
  }, {
    key: "off",
    value: function off(type, fn) {
      var map = this._callbacks[type];
      if (type === WILDCARD) {
        map = this._callbacks[WILDCARD_KEY];
      }
      if (map) {
        var index = map.indexOf(fn);
        if (index !== -1) {
          map.splice(index, 1);
        }
      }
    }

    /**
     * Dispatch an event to be handled by any assigned callbacks.
     *
     * @param {Event} event
     */
  }, {
    key: "trigger",
    value: function trigger(event) {
      var type = event.type;
      if (this._callbacks[type]) {
        this._notify(this._callbacks[type], event);
      }
      this._notify(this._callbacks[WILDCARD_KEY], event);
    }
  }]);
  return EventEmitter;
}();
/* harmony default export */ var event_emitter = (EventEmitter);
// CONCATENATED MODULE: ./src/js/exception/errors.js


/**
 * Exception for missing element when assigning Presentation Controllers for Publishers and Subscribers.
 */
function errors_typeof(obj) { "@babel/helpers - typeof"; return errors_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, errors_typeof(obj); }
function errors_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, errors_toPropertyKey(descriptor.key), descriptor); } }
function errors_createClass(Constructor, protoProps, staticProps) { if (protoProps) errors_defineProperties(Constructor.prototype, protoProps); if (staticProps) errors_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function errors_toPropertyKey(arg) { var key = errors_toPrimitive(arg, "string"); return errors_typeof(key) === "symbol" ? key : String(key); }
function errors_toPrimitive(input, hint) { if (errors_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (errors_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function errors_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
var NoElementFoundError = /*#__PURE__*/errors_createClass(function NoElementFoundError(message) {
  errors_classCallCheck(this, NoElementFoundError);
  this.name = 'NoElementFound';
  this.message = message;
});

/**
 * Exception when requesting media with a `MediaConstraint` that the browser cannot support.
 * WebRTC Only.
 */
var NoSupportedCameraResolutionsError = /*#__PURE__*/errors_createClass(function NoSupportedCameraResolutionsError(message) {
  errors_classCallCheck(this, NoSupportedCameraResolutionsError);
  this.name = 'NoSupportedCameraResolutionsError';
  this.message = message;
});
var InvalidNameError = /*#__PURE__*/errors_createClass(function InvalidNameError(message) {
  errors_classCallCheck(this, InvalidNameError);
  this.name = 'InvalidNameError';
  this.message = message;
});
// CONCATENATED MODULE: ./src/js/env/metadata-util.js


var metadata_util_this = undefined;
var jsonAttr = /['"](.*?)['"]:/gi;
var jsonVal = /:['"](.*?)['"]/gi;
var metadataMap = new WeakMap(); // {<player>: {<property>: fn[]} }

/**
 * Reads the UTF string of the data passed in.
 *
 * @param {String} data
 * @param {Number} start
 * @param {Number} len
 *
 * @return {String}
 *         The Parsed information.
 *
 * @private
 */
function readUTF(data, start, len) {
  var result = '',
    offset = start,
    end = start + len;
  do {
    result += String.fromCharCode(data[offset++]);
  } while (offset < end);
  return result;
}

/**
 * Parses incoming metadata JSON data and returns property if available.
 *
 * @param {String} test
 *        The JSON string to parse.
 *
 * @param {String} property
 *        The property name to access from the parsed JSON.
 *
 * @private
 */
function parseJSONForProperty(text, property) {
  try {
    var value = JSON.parse(text);
    return value[property];
  } catch (e) {
    var match = jsonAttr.exec(text);
    var match2;
    if (match && match.length > 1) {
      match2 = jsonVal.exec(text);
      if (match[1] === property && match2 && match2.length > 1) {
        return match2[1];
      }
    }
    return undefined;
  }
}

/**
 * Parses and interprets the orientation data from passed in JSON string.
 *
 * @param {String} text
 *
 * @return {Object}
 *          The parsed object with an `orientation` property if parsed properly.
 *
 * @private
 */
function parseJSONForOrientation(text) {
  var orientation = parseJSONForProperty(text, 'orientation');
  if (orientation) {
    return {
      orientation: parseInt(orientation)
    };
  }
  return undefined;
}
function parseJSONForStreamingMode(text) {
  var streamingMode = parseJSONForProperty(text, 'streamingMode');
  if (streamingMode) {
    return {
      streamingMode: streamingMode
    };
  }
  return undefined;
}
var getMetadataMapForPlayer = function getMetadataMapForPlayer(player) {
  return metadataMap.get(player);
};
var enableMetadataMonitor = function enableMetadataMonitor(player) {
  var textTracks = typeof player.textTracks === 'function' ? player.textTracks() : player.textTracks;
  if (textTracks) {
    player.addTextTrack('metadata');
    textTracks.addEventListener('addtrack', function (addTrackEvent) {
      var track = addTrackEvent.track;
      track.mode = 'hidden';
      track.addEventListener('cuechange', function (cueChangeEvent) {
        var cues;
        var i;
        // Mostly Chrome.
        if (cueChangeEvent && cueChangeEvent.currentTarget) {
          cues = cueChangeEvent.currentTarget.cues;
        } else if (undefined === metadata_util_this) {
          cues = track.cues;
          cues = cues && cues.length > 0 ? cues : track.activeCues;
        } else if (undefined !== metadata_util_this) {
          // Mostly Firefox & Safari.
          cues = cues && cues.length > 0 ? cues : metadata_util_this.activeCues;
        }
        // Mostly failure.
        cues = cues || [];
        var _loop = function _loop() {
          var data = cues[i];
          if (data.value) {
            var text = typeof data.value.data === 'string' ? data.value.data : readUTF(data.value.data, 0, data.size);
            var orientation = parseJSONForOrientation(text);
            var streamingMode = parseJSONForStreamingMode(text);
            var map = getMetadataMapForPlayer(player);
            if (orientation && map && map.orientation) {
              map.orientation.forEach(function (fn) {
                fn(orientation);
              });
            }
            if (streamingMode && map && map.streamingMode) {
              map.streamingMode.forEach(function (fn) {
                fn(streamingMode);
              });
            }
          }
        };
        for (i = 0; i < cues.length; i++) {
          _loop();
        }
      });
    });
  }
};

/**
 * Event handler for metadata related to orientation information.
 *
 * @param {Element} player
 *        The media element related to the metadata.
 * @param {Function} callback
 *        The callback to invoke with the parsed orientation information.
 *
 * @private
 */
var onOrientationMetadata = function onOrientationMetadata(player, callback) {
  var map = metadataMap.get(player);
  if (!metadataMap.has(player)) {
    enableMetadataMonitor(player);
    metadataMap.set(player, {
      orientation: []
    });
  } else if (!map.hasOwnProperty('orientation')) {
    metadataMap.get(player).orientation = [];
  }
  metadataMap.get(player).orientation.push(callback);
};

/**
 * Event handler for metadata related to streamingMode information.
 *
 * @param {Element} player
 *        The media element related to the metadata.
 * @param {Function} callback
 *        The callback to invoke with the parsed streamingMode information.
 *
 * @private
 */
var onStreamingModeMetadata = function onStreamingModeMetadata(player, callback) {
  var map = metadataMap.get(player);
  if (!metadataMap.has(player)) {
    enableMetadataMonitor(player);
    metadataMap.set(player, {
      streamingMode: []
    });
  } else if (!map.hasOwnProperty('streamingMode')) {
    metadataMap.get(player).streamingMode = [];
  }
  metadataMap.get(player).streamingMode.push(callback);
};

/**
 * Request to remove reference to player form metadata delegate mapping.
 *
 * @private
 */
var removePlayerDelegates = function removePlayerDelegates(player) {
  if (metadataMap.has(player)) {
    metadataMap["delete"](player);
  }
};
// CONCATENATED MODULE: ./src/js/env/browser.js
function browser_typeof(obj) { "@babel/helpers - typeof"; return browser_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, browser_typeof(obj); }




var rtmpSubscriberAssignments = [];

/* Properties and methods related to interaction with the screenfull.js library. */
var fullscreenHandlers = [];
var screenfullHandlerAssigned = false;
function enableScreenfullHandler() {
  if (!screenfullHandlerAssigned && window.screenfull && window.screenfull.enabled) {
    screenfullHandlerAssigned = true;
    window.screenfull.onchange(function () {
      var i,
        length = fullscreenHandlers.length;
      for (i = 0; i < length; i++) {
        fullscreenHandlers[i](window.screenfull.isFullscreen);
      }
    });
  }
}

/* Properties and methods related to device browser orientation change. */
var orientationHandlers = [];
function onorientationchange(event) {
  // eslint-disable-line no-unused-vars
  var screenOrientation = screen.orientation ? screen.orientation.angle : undefined;
  var orientationValue = typeof screenOrientation === 'undefined' ? window.matchMedia("(orientation: portrait)").matches ? 0 : 90 : screenOrientation;
  var i,
    length = orientationHandlers.length;
  log_debug("[window:onorientationchange]", "orientation(".concat(orientationValue, ")."));
  for (i = 0; i < length; i++) {
    orientationHandlers[i]((orientationValue + 90) % 360);
  }
}

/* Properies and methods related to window close operation. */
var closeHandlers = [];
var hasOnWindowClose = false;
function onwindowclose(e) {
  // eslint-disable-line no-unused-vars
  //  closeHandlers.forEach(h => h())
  var i,
    length = closeHandlers.length;
  for (i = 0; i < length; i++) {
    closeHandlers[i]();
  }
  hasOnWindowClose = true;
  // Returning a string value forces a leaving confirmation popup on the browser.
  //  e.returnValue = 'goodbye'
  //  return 'goodbye'
}

/* Check to see what the current flash version is, if plugin is enabled. */
// https://github.com/videojs/video.js/blob/master/src/js/tech/flash.js#L476
var flashVersion = function flashVersion() {
  var version = '0,0,0';
  // IE
  try {
    version = new window.ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version').replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];

    // other browsers
  } catch (e) {
    try {
      if (navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {
        version = (navigator.plugins['Shockwave Flash 2.0'] || navigator.plugins['Shockwave Flash']).description.replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];
      }
    } catch (err) {
      // nada
    }
  }
  return version.split(',');
};

/* Shim for `requestAnimationFrame` of browser. */
var requestFrame = function (time) {
  return window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (fn) {
    return window.setTimeout(fn, time);
  };
}(1000);
var hasAdapterShim = window.adapter;

/* Browser test to see if Mozilla-based. */
var isMoz = !!navigator.mozGetUserMedia;

/* Browser test to see if Edge-based. */
var isIE =  false || !!document.documentMode;
var isEdge = hasAdapterShim ? window.adapter.browserDetails.browser.toLowerCase() === 'edge' : !isIE && !!window.StyleMedia;

/* Determine if current browser has touch capabilities. */
var _isTouchEnabled = 'ontouchstart' in window || window.DocumentTouch && window.document instanceof window.DocumentTouch;

// If developer has not used adapter.js.
if (!hasAdapterShim) {
  navigator.getUserMedia = navigator.mediaDevices && navigator.mediaDevices.getUserMedia || navigator.getUserMedia || navigator.mozGetUserMedia || navigator.webkitGetUserMedia || navigator.msGetUserMedia;
}

/* Proxy to browser-based, specific functions. */
/* harmony default export */ var browser = ({
  requestFrame: requestFrame,
  getIsMoz: function getIsMoz() {
    return isMoz;
  },
  getIsEdge: function getIsEdge() {
    return isEdge;
  },
  isTouchEnabled: function isTouchEnabled() {
    return _isTouchEnabled;
  },
  supportsWebSocket: function supportsWebSocket() {
    return !!window.WebSocket;
  },
  supportsHLS: function supportsHLS() {
    var el = document.createElement('video');
    return el.canPlayType('application/vnd.apple.mpegURL').length > 0 || el.canPlayType('application/x-mpegURL').length > 0 || el.canPlayType('audio/mpegurl').length > 0 || el.canPlayType('audio/x-mpegurl').length > 0;
  },
  supportsNonNativeHLS: function supportsNonNativeHLS() {
    var hlsjsRef = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
    // hls.js
    if (hlsjsRef) {
      try {
        return hlsjsRef.isSupported();
      } catch (e) {
        log_warn('Could not access Hls.js.');
        return false;
      }
    }
    return !!window.Hls && window.Hls.isSupported();
  },
  createHLSClient: function createHLSClient() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return new window.Hls(opt);
  },
  getHLSClientEventEnum: function getHLSClientEventEnum() {
    return window.Hls.Events;
  },
  supportsFlashVersion: function supportsFlashVersion(version) {
    var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '.';
    return flashVersion()[0] >= version.split(delimiter)[0];
  },
  resolveElement: function resolveElement(id) {
    try {
      var el = document.getElementById(id);
      if (!el) {
        throw new NoElementFoundError("Element with id(".concat(id, ") could not be found."));
      }
      return el;
    } catch (e) {
      throw new NoElementFoundError("Error in accessing element with id(".concat(id, "). ").concat(e.message));
    }
  },
  createWebSocket: function createWebSocket(url) {
    return new WebSocket(url);
  },
  setVideoSource: function setVideoSource(videoElement, mediaStream) {
    var autoplay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    try {
      videoElement.srcObject = mediaStream;
    } catch (e) {
      log_warn('[setVideoSource:obj]', "Could not set srcObject: ".concat(e.message));
      if (isMoz) {
        videoElement['mozSrcObject'] = mediaStream;
      } else {
        videoElement.src = window.URL.createObjectURL(mediaStream);
      }
    }
    if (autoplay) {
      try {
        var maybePromise = videoElement.play();
        if (maybePromise) {
          maybePromise.then(function () {
            return log_debug('[setVideoSource:action]', 'play (START)');
          })["catch"](function (err) {
            return log_warn('[setVideoSource:action]', 'play (FAULT) ' + (err.message ? err.message : err));
          });
        }
      } catch (e) {
        // Mobile Browsers: Uncaught (in promise) DOMException: play() can only be initiated by a user gesture.
        log_warn('[setVideoSource:action]', 'play (CATCH::FAULT) ' + e.message);
        try {
          videoElement.setAttribute('autoplay', false);
          videoElement.pause();
        } catch (err) {
          log_warn('[setVideoSource:action]', 'pause (CATCH::FAULT) ' + err.message);
        }
      }
    } else {
      try {
        videoElement.setAttribute('autoplay', false);
        videoElement.pause();
      } catch (e) {
        // nada.
      }
    }
  },
  injectScript: function injectScript(url) {
    var dfd = new DeferredPromise();
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.onload = function () {
      dfd.resolve();
    };
    script.onreadystatechange = function () {
      if (script.readyState === 'loaded' || script.readyState === 'complete') {
        script.onreadystatechange = null;
        dfd.resolve();
      }
    };
    script.src = url;
    document.getElementsByTagName('head')[0].appendChild(script);
    return dfd.promise;
  },
  gUM: function gUM(constraints) {
    return (navigator.mediaDevices || navigator).getUserMedia(constraints);
  },
  setGlobal: function setGlobal(prop, value) {
    window[prop] = value;
  },
  getSwfObject: function getSwfObject() {
    return window.swfobject;
  },
  getEmbedObject: function getEmbedObject(id) {
    return document.getElementById(id);
  },
  getElementId: function getElementId(el) {
    return el.getAttribute('id');
  },
  addOrientationChangeHandler: function addOrientationChangeHandler(handler) {
    var andCall = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var supportsOrientationChange = ('onorientationchange' in window);
    if (supportsOrientationChange) {
      log_debug('[window:orientation]', '[addOrientationChangeHandler]', 'adding responder.');
      orientationHandlers.push(handler);
      if (andCall) {
        onorientationchange();
      }
    }
    if (orientationHandlers.length === 1) {
      log_debug('[window:orientation]', '[addOrientationChangeHandler]', 'onorientationchange added.');
      window.addEventListener('orientationchange', onorientationchange);
    }
  },
  removeOrientationChangeHandler: function removeOrientationChangeHandler(handler) {
    var i = orientationHandlers.length;
    while (--i > -1) {
      if (orientationHandlers[i] === handler) {
        orientationHandlers.slice(i, 1);
        break;
      }
    }
    if (orientationHandlers.length === 0) {
      log_debug('[window:orientation]', '[removeOrientationChangeHandler]:: onorientationchange removed.');
      window.removeEventListener('onorientationchange', onorientationchange);
    }
  },
  addCloseHandler: function addCloseHandler(handler) {
    var insertValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
    closeHandlers.splice(insertValue === -1 ? closeHandlers.length : insertValue, 0, handler);
    // NOTE: Removed onbeforeunload in favor of developers properly handling shutdown.
    //    if (window.onbeforeunload !== onwindowclose) {
    // window.onbeforeunload = onwindowclose
    if (!hasOnWindowClose) {
      window.addEventListener('unload', onwindowclose);
    }
    // }
  },

  removeCloseHandler: function removeCloseHandler(handler) {
    var i = closeHandlers.length;
    while (--i > -1) {
      if (closeHandlers[i] === handler) {
        closeHandlers.slice(i, 1);
        break;
      }
    }
  },
  invoke: function invoke(methodName, data) {
    if (window.hasOwnProperty(methodName)) {
      window[methodName].call(window, data);
    }
  },
  // requires <script src="lib/screenfull/screenfull.min.js"></script>
  toggleFullScreen: function toggleFullScreen(element) {
    if (window.screenfull && window.screenfull.enabled) {
      window.screenfull.toggle(element);
    }
  },
  onFullScreenStateChange: function onFullScreenStateChange(cb) {
    fullscreenHandlers.push(cb);
    enableScreenfullHandler(window.screenfull);
  },
  onOrientationMetadata: onOrientationMetadata,
  onStreamingModeMetadata: onStreamingModeMetadata,
  hasAttributeDefined: function hasAttributeDefined(elem, attribute) {
    var att = elem.getAttribute(attribute);
    return att !== null && browser_typeof(att) !== undefined && typeof att === 'string' && (att === '' || att === 'true' || att === attribute);
  },
  hasClassDefined: function hasClassDefined(elem, className) {
    return elem.classList.contains(className);
  },
  createElement: function createElement(tagName, opts) {
    if (tagName === 'text') {
      return document.createTextNode(opts.toString());
    }
    return document.createElement(tagName, opts);
  },
  addSubscriptionAssignmentHandler: function addSubscriptionAssignmentHandler(fn) {
    rtmpSubscriberAssignments.push(fn);
    if (window.setSubscriberId === undefined) {
      window.setSubscriberId = function (id) {
        rtmpSubscriberAssignments.shift()(id);
      };
    }
  },
  getMouseXFromEvent: function getMouseXFromEvent(event) {
    if (!event) {
      event = window.event;
    }
    if (event.pageX) {
      return event.pageX;
    } else if (event.clientX) {
      return event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
    }
    return 0;
  },
  getScrollX: function getScrollX() {
    return window.pageXOffset !== undefined ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft;
  },
  createEvent: function createEvent(EventType) {
    return document.createEvent(EventType);
  },
  getGlobal: function getGlobal() {
    return window;
  }
});
// CONCATENATED MODULE: ./src/js/env/translation-util.js

var translation_util_requestFrame = browser.requestFrame;

/* || Translation Styles used on Orientation-change metadata from Mobile broadcasters. || */
var origin = ['webkitTransformOrigin', 'mozTransformOrigin', 'msTransformOrigin', 'oTransformOrigin', 'transformOrigin'];
var styles = ['webkitTransform', 'mozTransform', 'msTransform', 'oTransform', 'transform'];
var transition = ['webkitTransition', 'mozTransition', 'msTransition', 'oTransition', 'transition'];
var rotationTranslations = {
  '0': {
    origin: 'center center',
    transform: 'rotate(0deg)'
  },
  '90': {
    origin: 'left top',
    transform: 'rotate(90deg) translateY(-100%)'
  },
  '180': {
    origin: 'center center',
    transform: 'rotate(180deg)'
  },
  '270': {
    origin: 'top left',
    transform: 'rotate(270deg) translateX(-100%) translateY(0%)'
  },
  '-90': {
    origin: 'left top',
    transform: 'rotate(-90deg) translateX(-100%)'
  },
  '-180': {
    origin: 'center center',
    transform: 'rotate(-180deg)'
  },
  '-270': {
    origin: 'top left',
    transform: 'rotate(-270deg) translateY(-100%)'
  }
};

/* Utility method to track and resize an element on enter frame. */
var trackResize = function trackResize(element, raf) {
  var isRotated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  return function () {
    var parent = element.parentNode;
    if (parent) {
      var pwidth = parent.clientWidth;
      var pheight = parent.clientHeight;
      if (isRotated) {
        element.style.width = pheight + 'px';
      } else {
        element.style.width = pwidth + 'px';
      }
      var ewidth = element.clientWidth;
      var eheight = element.clientHeight;
      var margin = (isRotated ? pwidth - eheight : pwidth - ewidth) * 0.5;
      element.style.position = 'relative';
      element.style.left = margin + 'px';
    }
    if (raf) {
      raf(trackResize(element, raf, isRotated));
    }
  };
};
var applyOrientation = function applyOrientation(element, value, resolution) {
  // eslint-disable-line no-unused-vars
  var i,
    length = styles.length;
  value = value % 360;
  var isRotated = value % 180 !== 0;
  var parent = element.parentNode;
  var pwidth = element.width ? element.width : parent.clientWidth;
  var pheight = element.height ? element.height : parent.clientHeight;
  var translations = rotationTranslations[value.toString()];
  for (i = 0; i < length; i++) {
    element.style[origin[i]] = translations.origin;
    element.style[styles[i]] = translations.transform;
    element.style[transition[i]] = 'transform 0.0s linear';
  }
  if (isRotated) {
    // const scale = pwidth > pheight ? pheight / pwidth : pwidth / pheight
    element.style.width = pheight + 'px';
    parent.style.height = pheight + 'px';
    // element.style.height = (pwidth * scale) + 'px'
  } else {
    element.style.width = pwidth + 'px';
    element.style.height = pheight + 'px';
    parent.style.height = 'unset';
  }
  if (document.attachEvent) {
    parent.attachEvent('resize', trackResize(element, translation_util_requestFrame, isRotated));
  } else {
    trackResize(element, translation_util_requestFrame, isRotated)();
  }
};
// CONCATENATED MODULE: ./src/js/util/index.js


// http://blog.carbonfive.com/2015/01/14/gettin-freaky-functional-wcurried-javascript/
/**
 * Basic curry implementation.
 *
 * @private
 */
var curry = function curry(fx) {
  var arity = fx.length;
  return function f1() {
    var args = Array.prototype.slice.call(arguments, 0);
    if (args.length >= arity) {
      return fx.apply(null, args);
    } else {
      return function f2() {
        var args2 = Array.prototype.slice.call(arguments, 0);
        return f1.apply(null, args.concat(args2));
      };
    }
  };
};

/**
 * Basic filter implementation.
 *
 * @private
 */
var filter = curry(function (fn, list) {
  var idx = 0;
  var len = list.length;
  var result = [];
  while (idx < len) {
    if (fn(list[idx])) {
      result[result.length] = list[idx];
    }
    idx += 1;
  }
  return result;
});

/**
 * Converts a value to integer.
 *
 * @param {Object} value
 * @returns {Number}
 *
 * @private
 */
var toInt = function toInt(value) {
  if (typeof value === 'string') {
    return parseInt(value, 10);
  } else {
    return Math.round(value);
  }
};

/**
 * Checks truthy-ness of `value` and returns default if false.
 *
 * @param {Object} value
 * @param {Object} defaultValue
 *
 * @private
 */
var getOrElse = function getOrElse(value, defaultValue) {
  return value || defaultValue;
};

/**
 * Checks truthy-ness of `value` as a Number and returns default if false.
 *
 * @param {Object} value
 * @param {Object} defaultValue
 *
 * @private
 */
var getIntOrElse = function getIntOrElse(value, defaultValue) {
  return !isNaN(toInt(value)) ? toInt(value) : defaultValue;
};
// CONCATENATED MODULE: ./src/js/util/object.js


/**
 * Deep-defines an `Object` in place with namespaced attribute value.
 *
 * @private
 */
var deepDefine = function deepDefine(object, paths, value) {
  var i = 0;
  var tail = object;
  var prop = paths.pop();
  var length = paths.length;
  for (i; i < length; i++) {
    var path = paths[i];
    tail[path] = tail[path] || {};
    tail = tail[path];
  }
  tail[prop] = value;
};

/**
 * Deep-copy utilizing JSON API.
 *
 * @private
 */
var deepCopy = function deepCopy(obj) {
  var str = JSON.stringify(obj);
  return JSON.parse(str);
};

/**
 * Simple util to parse resolution from metadata.
 *
 * @param {String} value
 *        The resolution value from metadata: e.g, `640,480`.
 * @return {Object}
 *        The structured dimensions Object with `width` and `height` properties.
 *
 * @private
 */
var metadataResolutionToObject = function metadataResolutionToObject(value) {
  if (typeof value === 'string') {
    var dims = value.split(',');
    return {
      width: parseInt(dims[0]),
      height: parseInt(dims[1])
    };
  }
  return value;
};

/**
 * Utility check if providing Object is empty (without any properties.
 *
 * @private
 */
var isObjectEmpty = function isObjectEmpty(obj) {
  return Object.keys(obj).length === 0 && obj.constructor === Object;
};
// CONCATENATED MODULE: ./src/js/adapter/webrtc.js


function webrtc_typeof(obj) { "@babel/helpers - typeof"; return webrtc_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, webrtc_typeof(obj); }
function webrtc_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ webrtc_regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == webrtc_typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }





// import { NoSupportedCameraResolutionsError } from '../exception/errors'

// Resolutions borrowed from https://github.com/webrtcHacks/WebRTC-Camera-Resolution/blob/master/js/resolutionScan.js
var formats = [{
  label: '4K(UHD)',
  width: 3840,
  height: 2160
}, {
  label: '1080p(FHD)',
  width: 1920,
  height: 1080
}, {
  label: 'UXGA',
  width: 1600,
  height: 1200
}, {
  label: '720p(HD)',
  width: 1280,
  height: 720
}, {
  label: 'SVGA',
  width: 800,
  height: 600
}, {
  label: 'VGA',
  width: 640,
  height: 480
}, {
  label: '360p(nHD)',
  width: 640,
  height: 360
}, {
  label: 'CIF',
  width: 352,
  height: 288
}, {
  label: 'QVGA',
  width: 320,
  height: 240
}, {
  label: 'QCIF',
  width: 176,
  height: 144
}, {
  label: 'QQVGA',
  width: 160,
  height: 120
}];

/**
 * Detects if resolutions are defined on the provied constraints.
 *
 * @param {Object} constraints
 *        The Media Constraints to test against.
 * @return {Boolean}
 *
 * @private
 */
var hasResolutionsDefined = function hasResolutionsDefined(constraints) {
  return constraints.hasOwnProperty('video') && (constraints.video.hasOwnProperty('width') || constraints.video.hasOwnProperty('height'));
};

/**
 * Return value on attribute based on failover test of attribute availability on provided object.
 *
 * @param {Object} attribute
 * @return {Object}
 *
 * @private
 */
var getValueFromConstraintAttribute = function getValueFromConstraintAttribute(attribute) {
  return attribute.exact || attribute.ideal || attribute.max || attribute.min || attribute;
};

/**
 * Test if video on Media Constraint is either set to `true` or if the constraints and format objects have the same dimension values.
 *
 * @param {Object} constraints
 * @param {Object} format
 * @return {Boolean}
 *
 * @private
 */
var isExact = curry(function (constraints, format) {
  if (typeof constraints.video === 'boolean') {
    return true;
  }
  var w = constraints.video.hasOwnProperty('width') ? getValueFromConstraintAttribute(constraints.video.width) : 0;
  var h = constraints.video.hasOwnProperty('height') ? getValueFromConstraintAttribute(constraints.video.height) : 0;
  var confirmed = w === format.width && h === format.height;
  if (confirmed) {
    log_debug('[gum:isExact]', "Found matching resolution for ".concat(format.width, ", ").concat(format.height, "."));
  }
  return confirmed;
});

/**
 * Test if the area on the provide format is lower than the area on the Media Constraints.
 * This is used in trying to find the next nearest neighbor of dimensions that the browser supports.
 *
 * @param {Object} constraints
 * @param {Object} format
 * @return {Boolean}
 *
 * @private
 */
var isLower = curry(function (constraints, format) {
  var w = constraints.video.hasOwnProperty('width') ? getValueFromConstraintAttribute(constraints.video.width) : 0;
  var h = constraints.video.hasOwnProperty('height') ? getValueFromConstraintAttribute(constraints.video.height) : 0;
  var desired = w * h;
  var dimensions = format.width * format.height;
  return dimensions < desired;
});

/**
 * Returns filtered of Media Constraint format if matching the canned list of support form `formats`.
 *
 * @param {Array} formatList
 * @param {Object} constraints
 * @return {Array}
 *
 * @private
 */
var hasMatchingFormat = curry(function (formatsList, constraints) {
  var filtered = filter(isExact(constraints))(formatsList);
  log_debug('[gum:hasMatchingFormat]', 'Filtered list: ' + JSON.stringify(filtered, null, 2));
  return filtered.length > 0;
});

/**
 * Returns list of filter lower resolution constraints from the provided Media constraints.
 *
 * @param {Array} formayList
 * @param {Object} constraints
 * @return {Array}
 *
 * @private
 */
var findLowerResolutions = curry(function (formatsList, constraints) {
  var resIsLower = isLower(constraints);
  return filter(resIsLower)(formatsList);
});

/**
 * Allows the browser to try and determine the resolution to use based on `video: true` attribute in `getUserMedia` call.
 *
 * @param {Object} data
 *        The Media Constaints object.
 * @param {Promise} p
 *        The `Promise` to resolve or reject on detemination of allowed Media Constraints on the browser.
 *
 * @private
 */
var webrtc_allowBrowserToDefineResolution = function allowBrowserToDefineResolution(data, p) {
  // default to `video: true` in hopes the browser can decide on its own.
  data.video = true;
  browser.gUM(data).then(function (media) {
    p.resolve({
      media: media,
      constraints: data
    });
  })["catch"](function (err) {
    // eslint-disable-line no-unused-vars
    var msg = typeof err === 'string' ? err : [err.name, err.message].join(': ');
    log_debug('[gum:getUserMedia]', "Failure in getUserMedia: ".concat(msg, ". Attempting other resolution tests..."));
    log_debug('[gUM:findformat]', "Constraints declined by browser: ".concat(JSON.stringify(data, null, 2)));
    p.reject('Could not find proper camera for provided constraints.');
  });
};

/**
 * Attempts to select the best resolution based on whether the browser throws an exception when requesting `MediaStream` on `getUserMedia`.
 *
 * @param {Object} data
 *        The Media Constaints object.
 * @param {Array} selections
 *        The listing of formats to test on.
 * @param {Promise} p
 *        The `Promise` to resolve or reject on detemination of allowed Media Constraints on the browser.
 *
 * @private
 */
var webrtc_findNextSelection = function findNextSelection(data, selections, p) {
  if (selections.length == 0) {
    // if we got here, there is no support.
    webrtc_allowBrowserToDefineResolution(data, p);
    return;
  }
  var selection = selections.shift();
  data.video.width = {
    exact: selection.width
  };
  data.video.height = {
    exact: selection.height
  };
  browser.gUM(data).then(function (media) {
    p.resolve({
      media: media,
      constraints: data
    });
  })["catch"](function (err) {
    // eslint-disable-line no-unused-vars
    var msg = typeof err === 'string' ? err : [err.name, err.message].join(': ');
    log_debug('[gum:getUserMedia]', "Failure in getUserMedia: ".concat(msg, ". Attempting other resolution tests..."));
    log_debug('[gUM:findformat]', "Constraints declined by browser: ".concat(JSON.stringify(data, null, 2)));
    findNextSelection(data, selections, p);
  });
};

/**
 * Quick test if resolution is supported on the browser.
 *
 * @param {Object} constraints
 *
 * @private
 */
var webrtc_quickResolutionSupport = function quickResolutionSupport(constraints) {
  var data = deepCopy(constraints);
  // if video: `true`, returned unscathed.
  if (typeof constraints.video === 'boolean') {
    return data;
  }
  // else, define exact.
  if (constraints.video.width) {
    data.video.width = {
      exact: getValueFromConstraintAttribute(constraints.video.width)
    };
  }
  if (constraints.video.height) {
    data.video.height = {
      exact: getValueFromConstraintAttribute(constraints.video.height)
    };
  }
  return data;
};

/**
 * Detemine the supported resolution on the browser based on the Media Constraints requested.
 *
 * @param {Object} constraints
 *
 * @private
 */
var webrtc_determineSupportedResolution = function determineSupportedResolution(constraints) {
  log_debug('[gum:determineSupportedResolution]', 'Determine next neighbor based on constraints: ' + JSON.stringify(constraints, null, 2));
  var deferred = new DeferredPromise();
  var selections = findLowerResolutions(formats)(constraints);
  var data = deepCopy(constraints);
  webrtc_findNextSelection(data, selections, deferred);
  return deferred.promise;
};

/**
 * Quick test to see if WebRTC is supported in the current environment.
 *
 * @return {Boolean}
 *
 * @private
 */
var webrtc_isSupported = function isSupported() {
  return _RTCPeerConnection && _RTCIceCandidate && _RTCSessionDescription;
};

/**
 * Detects if essential RTCDataChannel API is available in browser.
 *
 * @private
 */
var webrtc_supportsDataChannel = function supportsDataChannel() {
  try {
    var pc = new _RTCPeerConnection(null);
    var dc = pc.createDataChannel({
      name: 'test'
    });
    dc.close();
    pc.close();
    return !!webrtc_isSupported();
  } catch (e) {
    log_debug("Could not detect RTCDataChannel support: ".concat(e.message));
    return false;
  }
};

/**
 * Detects support of transforms on Safari
 *
 * @private
 */
var supportsRtpScriptTransform = !!window.RTCRtpScriptTransform;

/**
 * Detects support of MediaStreamTrackGenerator (mostly Chrome/Edge)
 *
 * @private
 */
var supportsMediaGenerator = !!window.MediaStreamTrackGenerator;

/**
 * Detects support of MediaStreamTrackProcessor (mostly Chrome/Edge)
 *
 * @private
 */
var supportsMediaProcessor = !!window.MediaStreamTrackProcessor;

/**
 * Detects support for Insertable Streams.
 *
 * @returns boolean
 *
 * @private
 */
var supportsInsertableStreams = function supportsInsertableStreams() {
  return !!_RTCRtpSender.prototype.createEncodedStreams;
};

/**
 * Notifies defined Web Worker of read and write streams using processors and generators.
 * @param {MediaStreamTrack} media
 * @param {Worker} worker
 * @param {Object} pipeOptions
 */
var pipeGeneratorWorker = function pipeGeneratorWorker(type, track, worker, pipeOptions) {
  var processor = new _MediaStreamTrackProcessor(track);
  var generator = new _MediaStreamTrackGenerator(track.kind);
  var readable = processor.readable;
  var writable = generator.writable;
  worker.postMessage({
    type: type,
    readable: readable,
    writable: writable,
    options: pipeOptions
  }, [readable, writable]);
  return {
    processor: processor,
    generator: generator
  };
};

/**
 * Notifies defined Web Worker of the read and write streams for encoding specific type of media.
 * @param {String} type
 * @param {RTCRtpSender} sender
 * @param {Worker} worker
 * @param {Object} pipeOptions
 */
var pipeSenderWorker = function pipeSenderWorker(type, sender, worker, pipeOptions) {
  var senderStreams = sender.createEncodedStreams();
  var readable = senderStreams.readable,
    writable = senderStreams.writable;
  worker.postMessage({
    type: type,
    readable: readable,
    writable: writable,
    options: pipeOptions
  }, [readable, writable]);
  return {
    readable: readable,
    writable: writable
  };
};

/**
 * Notifies defined Web Worker of the read and write streams for decoding specific type of media.
 * @param {String} type
 * @param {RTCRtpReceiver} sender
 * @param {Worker} worker
 * @param {Object} pipeOptions
 */
var pipeReceiverWorker = function pipeReceiverWorker(type, receiver, worker, pipeOptions) {
  var receiverStreams = receiver.createEncodedStreams();
  var readable = receiverStreams.readable,
    writable = receiverStreams.writable;
  worker.postMessage({
    type: type,
    readable: readable,
    writable: writable,
    options: pipeOptions
  }, [readable, writable]);
  return {
    readable: readable,
    writable: writable
  };
};

/**
 * Sets up transform pipe using processor and generator.
 *
 * @param {MediaStreamTrack} media
 * @param {function} transform
 * @param {Object} pipeOptions
 *
 * @returns {Promise}
 *
 * @private
 */
var pipeGeneratorTransform = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/webrtc_regeneratorRuntime().mark(function _callee(track, transform, pipeOptions) {
    var processor, generator, transformStream, promise;
    return webrtc_regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          processor = new _MediaStreamTrackProcessor(track);
          generator = new _MediaStreamTrackGenerator(track.kind);
          transformStream = new _TransformStream({
            transform: transform
          });
          promise = processor.readable.pipeThrough(transformStream, pipeOptions).pipeTo(generator.writable);
          promise["catch"](function (e) {
            if (pipeOptions) {
              var signal = pipeOptions.signal;
              if (signal) {
                signal.abort(e);
              }
            }
            log_error('[PIPE:pipeGeneratorTransform]', e.message);
          });
          return _context.abrupt("return", {
            processor: processor,
            generator: generator
          });
        case 6:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function pipeGeneratorTransform(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

/**
 * Sets up transform pipe on Sender for Insertable Streams.
 * @param {RTCRtpSender} sender
 * @param {function} transform
 * @param {Object} pipeOptions
 *
 * @returns {Promise}
 *
 * @private
 */
var pipeSenderTransform = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/webrtc_regeneratorRuntime().mark(function _callee2(sender, transform, pipeOptions) {
    var transformStream, senderStreams, readable, writable, promise;
    return webrtc_regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          transformStream = new _TransformStream({
            transform: transform
          });
          senderStreams = sender.createEncodedStreams();
          readable = senderStreams.readable, writable = senderStreams.writable;
          promise = readable.pipeThrough(transformStream, pipeOptions).pipeTo(writable);
          promise["catch"](function (e) {
            readable.cancel(e);
            if (pipeOptions) {
              var signal = pipeOptions.signal;
              if (signal) {
                signal.abort(e);
              }
            }
            log_error('[PIPE:pipeSenderTransform]', e.message);
          });
          return _context2.abrupt("return", {
            readable: readable,
            writable: writable
          });
        case 6:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function pipeSenderTransform(_x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();

/**
 * Sets up transform pipe on Receiver for Insertable Streams.
 * @param {RTCRtpReceiver} receiver
 * @param {function} transform
 * @param {Object} pipeOptions
 *
 * @returns {Promise}
 *
 * @private
 */
var pipeReceiverTransform = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/webrtc_regeneratorRuntime().mark(function _callee3(receiver, transform, pipeOptions) {
    var transformStream, receiverStreams, readable, writable, promise;
    return webrtc_regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          transformStream = new _TransformStream({
            transform: transform
          });
          receiverStreams = receiver.createEncodedStreams();
          readable = receiverStreams.readable, writable = receiverStreams.writable;
          promise = readable.pipeThrough(transformStream, pipeOptions).pipeTo(writable);
          promise["catch"](function (e) {
            readable.cancel(e);
            if (pipeOptions) {
              var signal = pipeOptions.signal;
              if (signal) {
                signal.abort(e);
              }
            }
            log_error('[PIPE:pipeReceiverTransform', e.message);
          });
          return _context3.abrupt("return", {
            readable: readable,
            writable: writable
          });
        case 6:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function pipeReceiverTransform(_x7, _x8, _x9) {
    return _ref3.apply(this, arguments);
  };
}();

/**
 * Defines the RTCRtpScriptTransform for an audio or video receiver.
 *
 * @param {RTCRtpReceiver} receiver
 * @param {String} type
 * @param {WebWorker} worker
 */
var setWorkerOnReceiver = function setWorkerOnReceiver(receiver, type, worker) {
  receiver.transform = new RTCRtpScriptTransform(worker, {
    operation: type
  });
};

/**
 * Proxy on `getUserMedia` to try and resolve to the best possible resolution for broadcast based on Media Constraints object provided.
 *
 * @param {Object} constraints
 *        The Media Constraints to request
 * @param {Function} rejectionCB
 *        The callback for rejection on `getUserMedia` request.
 * @return {Promise}
 *        The `Promise` will resolve or reject on properly accessing a `MediaStream` from `getUserMedia` on the browser.
 *
 * @private
 */
var webrtc_getUserMedia = function getUserMedia(constraints, rejectionCB) {
  // Wrapping `getUserMedia` requests in another deferred promise so we can return the selected resolutions if successful.
  var dfd = new DeferredPromise();
  var isAvailableInFormats = hasMatchingFormat(formats);
  log_debug('[gum:getUserMedia]', 'Is Available in format listing: ' + isAvailableInFormats(constraints));
  var failover = function failover(err) {
    if (err) {
      var msg = typeof err === 'string' ? err : [err.name, err.message].join(': ');
      log_debug('[gum:getUserMedia]', "Failure in getUserMedia: ".concat(msg, ". Attempting other resolution tests..."));
    }
    webrtc_determineSupportedResolution(constraints).then(function (res) {
      dfd.resolve({
        media: res.media,
        constraints: res.constraints
      });
    })["catch"](function (error) {
      if (rejectionCB) {
        rejectionCB(constraints);
      }
      dfd.reject({
        error: error,
        constraints: constraints
      });
    });
  };
  if (!hasResolutionsDefined(constraints)) {
    log_debug('[gum:getUserMedia]', 'Constraints were not defined properly. Attempting failover...');
    browser.gUM(constraints).then(function (media) {
      dfd.resolve({
        media: media,
        constraints: constraints
      });
    })["catch"](failover);
  } else if (isAvailableInFormats(constraints)) {
    log_debug('[gum:getUserMedia]', 'Found constraints in list. Checking quick support for faster setup with: ' + JSON.stringify(constraints, null, 2));
    // Try quick setting of `exact` resolution...
    var available = webrtc_quickResolutionSupport(constraints);
    browser.gUM(available).then(function (media) {
      dfd.resolve({
        media: media,
        constraints: available
      });
    })["catch"](failover);
  } else {
    log_debug('[gum:getUserMedia]', 'Could not find contraints in list. Attempting failover...');
    if (rejectionCB) {
      rejectionCB(constraints);
    }
    failover();
  }
  return dfd.promise;
};

/**
 * Force to call `getUserMedia` directly on the browser and bypass the resolution detection mechanism provided by other methods on this module.
 *
 * @private
 */
var webrtc_forceUserMedia = function forceUserMedia(constraints) {
  return browser.gUM(constraints);
};

/**
 * Removes explicit SDP lines from the SDP.
 * @param {RTCSessionDescription} sdp
 * @param {Array<string>} lines
 * @returns string
 */
var removeSDPLines = function removeSDPLines(sdp, lines) {
  var s = sdp.split('\r\n');
  var i = s.length;
  while (--i > -1) {
    if (lines.indexOf(s[i]) > -1) {
      s.splice(i, 1);
    }
  }
  return s.join('\r\n');
};

/**
 * Cleans up the SDP to remove any unnecessary lines.
 * @param {RTCSessionDescription} sdp
 *
 * @returns string
 */
var cleanWhipSDP = function cleanWhipSDP(sdp) {
  var offensive = ['a=sendrecv'];
  return removeSDPLines(sdp, offensive);
};

/**
 * Removes the trickle ICE option from the SDP.
 * @param {RTCSessionDescription} sdp
 * @returns string
 */
var removeTrickle = function removeTrickle(sdp) {
  return removeSDPLines(sdp, ['a=ice-options:trickle']);
};

/**
 * Injects the trickle ICE option into the SDP.
 * @param {RTCSessionDescription} sdp
 * @returns string
 */
var injectTrickle = function injectTrickle(sdp) {
  var inject = 'a=ice-options:trickle';
  if (sdp.indexOf(inject) > -1) {
    return sdp;
  }
  var lines = sdp.split('\r\n');
  var indices = lines.map(function (val, i) {
    return val.match(/^a=ice-ufrag:(.*)/) ? i : -1;
  }).filter(function (val) {
    return val > -1;
  });
  var lastIndex = indices.length > 0 ? indices[indices.length - 1] : -1;
  if (lastIndex > -1) {
    lines.splice(lastIndex + 1, 0, inject);
  }
  return lines.join('\r\n');
};

/**
 * Injects the end-of-candidates line into the SDP.
 * @param {RTCSessionDescription} sdp
 * @returns string
 */
var injectEndOfCandidates = function injectEndOfCandidates(sdp) {
  var inject = 'a=end-of-candidates';
  if (sdp.indexOf(inject) > -1) {
    return sdp;
  }
  var lines = sdp.split('\r\n');
  var indices = lines.map(function (val, i) {
    return val.match(/^a=candidate:(.*)/) ? i : -1;
  }).filter(function (val) {
    return val > -1;
  });
  var lastIndex = indices.length > 0 ? indices[indices.length - 1] : -1;
  if (lastIndex > -1) {
    lines.splice(lastIndex + 1, 0, inject);
  }
  return lines.join('\r\n');
};
var stripExtMaps = function stripExtMaps(sdp) {
  var extReg = /^a=extmap/;
  var s = sdp.split('\r\n');
  var i = s.length;
  while (--i > -1) {
    if (extReg.exec(s[i])) {
      s.splice(i, 1);
    }
  }
  return s.join('\r\n');
};
var rtpmaps = function (list) {
  var regx = [];
  list.forEach(function (line) {
    return regx.push(new RegExp("a=(".concat(line, ")"), 'g'));
  });
  return regx;
}(['rtpmap:(\\d{1,}) ISAC', 'rtpmap:(\\d{1,}) G722', 'rtpmap:(\\d{1,}) CN', 'rtpmap:(\\d{1,}) PCMU', 'rtpmap:(\\d{1,}) PCMA', 'rtpmap:(\\d{1,}) telephone-event']);
var stripRTPMaps = function stripRTPMaps(sdp) {
  var format = function format(id) {
    return "^a=(rtcp-fb|fmtp):".concat(id, " .*");
  };
  var s = sdp.split('\r\n');
  var i = s.length;
  var j, rx;
  var match;
  var formats = [];
  var formatStr;
  // Find offending maps
  while (--i > -1) {
    for (j = 0; j < rtpmaps.length; j++) {
      rx = rtpmaps[j];
      rx.lastIndex = 0;
      match = rx.exec(s[i]);
      if (match) {
        //        console.log(`[SDP] removing ${s[i]}`)
        formatStr = format(match[match.length - 1]);
        if (formats.indexOf(formatStr) === -1) {
          formats.push(formatStr);
        }
        s.splice(i, 1);
        break;
      }
    }
  }
  // Find offending associated formats of removed media mappings.
  if (rx) rx.lastIndex = 0;
  i = s.length;
  //  console.log('formats', formats)
  while (--i > -1) {
    for (j = 0; j < formats.length; j++) {
      rx = new RegExp(formats[j], 'g');
      rx.lastIndex = 0;
      if (rx.exec(s[i])) {
        //        console.log(`[SDP] removing ${s[i]}`)
        s.splice(i, 1);
        break;
      }
    }
  }
  return s.join('\r\n');
};
var stripNonH264 = function stripNonH264(sdp) {
  var maps = /^a=((rtpmap|rtcp-fb|fmtp):(\d{1,}).*)/gi;
  var h264 = /^a=fmtp:(\d{1,}).*profile-level-id=\b42/gi;
  var types = [];
  var s = sdp.split('\r\n');
  var i = s.length;
  var j = 0;
  var match, rx;
  while (--i > -1) {
    h264.lastIndex = 0;
    match = h264.exec(s[i]);
    if (match && types.indexOf(match[match.length - 1]) === -1) {
      types.push(match[match.length - 1]);
    }
  }
  i = s.length;
  //  console.log('types', types)
  while (--i > -1) {
    for (j = 0; j < types.length; j++) {
      maps.lastIndex = 0;
      match = maps.exec(s[i]);
      if (match && types.indexOf(match[match.length - 1]) === -1) {
        //        console.log(`[SDP] removing ${s[i]}`)
        s.splice(i, 1);
        break;
      }
    }
  }
  return s.join('\r\n');
};
var stripNonH264FromVideo = function stripNonH264FromVideo(sdp) {
  var r = /^video/g;
  var videos = sdp.split('m=');
  var out = videos.map(function (entry) {
    if (entry.match(r)) {
      if (entry.indexOf('a=sendrecv') !== -1) {
        return stripNonH264(entry);
      }
    }
    return entry;
  });
  return out.join('m=');
};
var ssrc = /a=ssrc/gi;
var flipRecvOnly = function flipRecvOnly(sdp, mline, match) {
  var media = sdp.split(mline);
  var index = 0;
  // a=sendrecv -> a=recvonly
  var out = media.map(function (entry) {
    if (entry.match(match)) {
      if (++index > 1) {
        var str = entry.replace('a=sendrecv', 'a=recvonly');
        var _out = str.split('\r\n');
        var i = _out.length;
        while (--i > -1) {
          ssrc.lastIndex = 0;
          if (ssrc.exec(_out[i])) {
            _out.splice(i, 1);
          }
        }
        return _out.join('\r\n');
      }
    }
    return entry;
  });
  return out.join(mline);
};
var flipRecvOnlyOnExtraAudio = function flipRecvOnlyOnExtraAudio(sdp) {
  return flipRecvOnly(sdp, 'm=', /^audio/g);
};
var flipRecvOnlyOnExtraVideo = function flipRecvOnlyOnExtraVideo(sdp) {
  return flipRecvOnly(sdp, 'm=', /^video/g);
};
var updateBandwidth = function updateBandwidth(options, sdp) {
  var a_index = sdp.indexOf('m=audio');
  var v_index = sdp.indexOf('m=video');
  var d_index = sdp.indexOf('m=application');
  var l_index, front, back;
  if (a_index > -1 && options.audio) {
    l_index = sdp.indexOf('\r\n', a_index);
    front = sdp.slice(0, l_index);
    back = sdp.slice(l_index + '\r\n'.length, sdp.length);
    sdp = [front, 'b=AS:' + options.audio, back].join('\r\n');
    v_index = sdp.indexOf('m=video');
    d_index = sdp.indexOf('m=application');
  }
  if (v_index > -1 && options.video) {
    l_index = sdp.indexOf('\r\n', v_index);
    front = sdp.slice(0, l_index);
    back = sdp.slice(l_index + '\r\n'.length, sdp.length);
    sdp = [front, 'b=AS:' + options.video, back].join('\r\n');
    d_index = sdp.indexOf('m=application');
  }
  if (d_index > -1 && options.dataChannel) {
    l_index = sdp.indexOf('\r\n', d_index);
    front = sdp.slice(0, l_index);
    back = sdp.slice(l_index + '\r\n'.length, sdp.length);
    sdp = [front, 'b=AS:' + options.dataChannel, back].join('\r\n');
  }
  return sdp;
};
var forceStereoOnLocalAnswer = function forceStereoOnLocalAnswer(sdp) {
  return sdp.includes('stereo=1') ? sdp : sdp.replace('useinbandfec=1', 'useinbandfec=1;stereo=1;sprop-stereo=1');
};

/**
 * For WHIP/WHEP trickle ice candidates, this will generate the fragment required to send in a PATCH.
 * @param {string} sdp The full SDP with candidate listings to parse
 * @param {string} type The desired candidate type (if any). Either `host` or `srflx`.
 * @param {boolean}} isEnd Flag to append end of candidates in the fragment.
 * @returns
 */
var generateSDPCandidateFrag = function generateSDPCandidateFrag(sdp) {
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  var isEnd = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var end = 'a=end-of-candidates';
  var candidateReg = /^a=candidate:/;
  var fragReg = /^a=ice-ufrag:/;
  var pwdReg = /^a=ice-pwd:/;
  var mReg = /^m=(audio|video|application)\ /;
  var lines = sdp.split('\r\n');
  var iceFrag = '';
  var icePwd = '';
  var mLine;
  var id = 'a=mid:0';
  var candidates = [];
  lines.forEach(function (l) {
    if (!mLine && mReg.exec(l)) {
      mLine = l;
    } else if (fragReg.exec(l)) {
      iceFrag = l;
    } else if (pwdReg.exec(l)) {
      icePwd = l;
    } else if (candidateReg.exec(l)) {
      if (type && l.indexOf(type) != -1) {
        candidates.push(l);
      } else if (!type) {
        candidates.push(l);
      }
    }
  });
  if (isEnd && candidates[candidates.length - 1] !== end) {
    candidates.push(end);
  }
  var fragList = [iceFrag, icePwd, mLine, id].concat(candidates);
  return fragList.join('\r\n');
};

/* -- handled by adapter.js -- */
var _RTCPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;
var _RTCIceCandidate = window.RTCIceCandidate || window.mozRTCIceCandidate || window.webkitRTCIceCandidate;
var _RTCSessionDescription = window.RTCSessionDescription || window.mozRTCSessionDescription || window.webkitRTCSessionDescription;
var _RTCRtpSender = window.RTCRtpSender || window.RTCRtpSender || window.RTCRtpSender;
var _TransformStream = window.TransformStream;
var _MediaStreamTrackProcessor = window.MediaStreamTrackProcessor;
var _MediaStreamTrackGenerator = window.MediaStreamTrackGenerator;
var RTCPeerConnection = _RTCPeerConnection;
var RTCIceCandidate = _RTCIceCandidate;
var RTCSessionDescription = _RTCSessionDescription;
var webrtc_RTCRtpSender = _RTCRtpSender;
// CONCATENATED MODULE: ./src/js/adapter/websocket.js




/**
 * Test for WebSocket support in environment.
 *
 * @return {Boolean}
 *
 * @private
 */
var websocket_isSupported = function isSupported() {
  return browser.supportsWebSocket();
};

/**
 * Attempt at creating new instance of a `WebSocket` at endpoint URL.
 *
 * @param {String} url
 * @return {WebSocket}
 *
 * @private
 */
var websocket_create = function create(url) {
  return browser.createWebSocket(url);
};
// CONCATENATED MODULE: ./src/js/event/publisher-event.js
/**
 * Common Publisher-based event types.
 */
var PublisherEventTypes = Object.freeze({
  CONNECT_SUCCESS: 'Connect.Success',
  CONNECT_FAILURE: 'Connect.Failure',
  PUBLISH_START: 'Publish.Start',
  PUBLISH_FAIL: 'Publish.Fail',
  PUBLISH_INVALID_NAME: 'Publish.InvalidName',
  UNPUBLISH_SUCCESS: 'Unpublish.Success',
  PUBLISH_METADATA: 'Publish.Metadata',
  PUBLISH_STATUS: 'Publish.Status',
  PUBLISH_AVAILABLE: 'Publish.Available',
  PUBLISH_INSUFFICIENT_BANDWIDTH: 'Publish.InsufficientBW',
  PUBLISH_SUFFICIENT_BANDWIDTH: 'Publish.SufficientBW',
  PUBLISH_RECOVERING_BANDWIDTH: 'Publish.RecoveringBW',
  PUBLISH_SEND_INVOKE: 'Publish.Send.Invoke',
  CONNECTION_CLOSED: 'Publisher.Connection.Closed',
  DIMENSION_CHANGE: 'Publisher.Video.DimensionChange'
});

/**
 * Event types dispacthed from and specific to `Red5ProPublisher`.
 *
 * @see {Red5ProPublisher}
 */
var FailoverPublisherEventTypes = Object.freeze({
  PUBLISHER_REJECT: 'Publisher.Reject',
  PUBLISHER_ACCEPT: 'Publisher.Accept'
});

/**
 * Event types dispatched from and specific to `RTCPublisher`.
 *
 * @see {RTCPublisher}
 */
var RTCPublisherEventTypes = Object.freeze({
  CONSTRAINTS_ACCEPTED: 'WebRTC.MediaConstraints.Accepted',
  CONSTRAINTS_REJECTED: 'WebRTC.MediaConstraints.Rejected',
  MEDIA_STREAM_AVAILABLE: 'WebRTC.MediaStream.Available',
  PEER_CONNECTION_AVAILABLE: 'WebRTC.PeerConnection.Available',
  OFFER_START: 'WebRTC.Offer.Start',
  OFFER_END: 'WebRTC.Offer.End',
  PEER_CANDIDATE_END: 'WebRTC.PeerConnection.CandidateEnd',
  ICE_TRICKLE_COMPLETE: 'WebRTC.IceTrickle.Complete',
  SOCKET_MESSAGE: 'WebRTC.Socket.Message',
  DATA_CHANNEL_OPEN: 'WebRTC.DataChannel.Open',
  DATA_CHANNEL_AVAILABLE: 'WebRTC.DataChannel.Available',
  DATA_CHANNEL_CLOSE: 'WebRTC.DataChannel.Close',
  DATA_CHANNEL_MESSAGE: 'WebRTC.DataChannel.Message',
  DATA_CHANNEL_ERROR: 'WebRTC.DataChannel.Error',
  PEER_CONNECTION_OPEN: 'WebRTC.PeerConnection.Open',
  TRACK_ADDED: 'WebRTC.PeerConnection.OnTrack',
  UNSUPPORTED_FEATURE: 'WebRTC.Unsupported.Feature',
  TRANSFORM_ERROR: 'WebRTC.Transform.Error'
});

/**
 * Event types dispatched from and specific to `RTMPPublisher`.
 *
 * @see {RTMPPublisher}
 */
var RTMPPublisherEventTypes = Object.freeze({
  EMBED_SUCCESS: 'FlashPlayer.Embed.Success',
  EMBED_FAILURE: 'FlashPlayer.Embed.Failure'
});
// CONCATENATED MODULE: ./src/js/event/subscriber-event.js
/**
 * Common event types on all Subscribers.
 */
var SubscriberEventTypes = Object.freeze({
  CONNECT_SUCCESS: 'Connect.Success',
  CONNECT_FAILURE: 'Connect.Failure',
  SUBSCRIBE_START: 'Subscribe.Start',
  SUBSCRIBE_STOP: 'Subscribe.Stop',
  SUBSCRIBE_FAIL: 'Subscribe.Fail',
  SUBSCRIBE_INVALID_NAME: 'Subscribe.InvalidName',
  SUBSCRIBE_METADATA: 'Subscribe.Metadata',
  SUBSCRIBE_STATUS: 'Subscribe.Status',
  SUBSCRIBE_SEND_INVOKE: 'Subscribe.Send.Invoke',
  SUBSCRIBE_PUBLISHER_CONGESTION: 'Subscribe.Publisher.NetworkCongestion',
  SUBSCRIBE_PUBLISHER_RECOVERY: 'Subscribe.Publisher.NetworkRecovery',
  PLAY_UNPUBLISH: 'Subscribe.Play.Unpublish',
  CONNECTION_CLOSED: 'Subscribe.Connection.Closed',
  ORIENTATION_CHANGE: 'Subscribe.Orientation.Change',
  STREAMING_MODE_CHANGE: 'Subscribe.StreamingMode.Change',
  VIDEO_DIMENSIONS_CHANGE: 'Subscribe.VideoDimensions.Change',
  VOLUME_CHANGE: 'Subscribe.Volume.Change',
  SEEK_CHANGE: 'Subscribe.Seek.Change',
  PLAYBACK_TIME_UPDATE: 'Subscribe.Time.Update',
  PLAYBACK_STATE_CHANGE: 'Subscribe.Playback.Change',
  FULL_SCREEN_STATE_CHANGE: 'Subscribe.FullScreen.Change',
  AUTO_PLAYBACK_FAILURE: 'Subscribe.Autoplay.Failure',
  AUTO_PLAYBACK_MUTED: 'Subscribe.Autoplay.Muted'
});

/**
 * Event types dispatched from and specific to `Red5ProSubscriber`.
 *
 * @see {Red5ProSubscriber}
 */
var FailoverSubscriberEventTypes = Object.freeze({
  SUBSCRIBER_REJECT: 'Subscriber.Reject',
  SUBSCRIBER_ACCEPT: 'Subscriber.Accept'
});

/**
 * Event types dispatched from and specific to `RTCSubscriber`.
 *
 * @see {RTCSubscriber}
 */
var RTCSubscriberEventTypes = Object.freeze({
  PEER_CONNECTION_AVAILABLE: 'WebRTC.PeerConnection.Available',
  OFFER_START: 'WebRTC.Offer.Start',
  OFFER_END: 'WebRTC.Offer.End',
  ANSWER_START: 'WebRTC.Answer.Start',
  ANSWER_END: 'WebRTC.Answer.End',
  CANDIDATE_START: 'WebRTC.Candidate.Start',
  CANDIDATE_END: 'WebRTC.Candidate.End',
  PEER_CANDIDATE_END: 'WebRTC.PeerConnection.CandidateEnd',
  ICE_TRICKLE_COMPLETE: 'WebRTC.IceTrickle.Complete',
  SOCKET_MESSAGE: 'WebRTC.Socket.Message',
  DATA_CHANNEL_MESSAGE: 'WebRTC.DataChannel.Message',
  DATA_CHANNEL_OPEN: 'WebRTC.DataChannel.Open',
  DATA_CHANNEL_AVAILABLE: 'WebRTC.DataChannel.Available',
  DATA_CHANNEL_CLOSE: 'WebRTC.DataChannel.Close',
  DATA_CHANNEL_ERROR: 'WebRTC.DataChannel.Error',
  PEER_CONNECTION_OPEN: 'WebRTC.PeerConnection.Open',
  ON_ADD_STREAM: 'WebRTC.Add.Stream',
  TRACK_ADDED: 'WebRTC.PeerConnection.OnTrack',
  SUBSCRIBE_STREAM_SWITCH: 'WebRTC.Subscribe.StreamSwitch',
  LIVE_SEEK_ERROR: 'WebRTC.LiveSeek.Error',
  LIVE_SEEK_ENABLED: 'WebRTC.LiveSeek.Enabled',
  LIVE_SEEK_DISABLED: 'WebRTC.LiveSeek.Disabled',
  LIVE_SEEK_LOADING: 'WebRTC.LiveSeek.FragmentLoading',
  LIVE_SEEK_LOADED: 'WebRTC.LiveSeek.FragmentLoaded',
  LIVE_SEEK_CHANGE: 'WebRTC.LiveSeek.Change',
  TRANSFORM_ERROR: 'WebRTC.Transform.Error'
});

/**
 * Event type dispatched from and specific to `RTMPSubscriber`.
 *
 * @see {RTMPSubscriber}
 */
var RTMPSubscriberEventTypes = Object.freeze({
  EMBED_SUCCESS: 'FlashPlayer.Embed.Success',
  EMBED_FAILURE: 'FlashPlayer.Embed.Failure',
  // Stream Manager + ABR Specific
  ABR_LEVEL_CHANGE: 'RTMP.AdaptiveBitrate.Level'
});
// CONCATENATED MODULE: ./src/js/event/sharedobject-event.js
/**
 * Common event types on SharedObject.
 *
 * @see {Red5ProSharedObject}
 */
var SharedObjectEventTypes = Object.freeze({
  CONNECT_SUCCESS: 'Connect.Success',
  CONNECT_FAILURE: 'Connect.Failure',
  PROPERTY_UPDATE: 'SharedObject.PropertyUpdate',
  PROPERTY_REMOVE: 'SharedObject.PropertyRemove',
  METHOD_UPDATE: 'SharedObject.MethodUpdate',
  CONNECTION_CLOSED: 'SharedObject.Connection.Closed'
});
// CONCATENATED MODULE: ./src/js/event/message-transport-event.js
/**
 * Common state event types from a message transport layer (WebSocket or RTCDataChannel).
 */
var MessageTransportStateEventTypes = Object.freeze({
  OPEN: 'MessageTransport.Open',
  CLOSE: 'MessageTransport.Close',
  CHANGE: 'MessageTransport.Change',
  ERROR: 'MessageTransport.Error'
});
// CONCATENATED MODULE: ./src/js/event/participant-event.js
var RTCConferenceParticipantEventTypes = Object.freeze({
  AUDIO_STREAM: 'Conference.AudioStream',
  VIDEO_STREAM: 'Conference.VideoStream',
  MEDIA_STREAM: 'Conference.MediaStream'
});
// CONCATENATED MODULE: ./src/js/event/index.js
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (event_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function event_typeof(obj) { "@babel/helpers - typeof"; return event_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, event_typeof(obj); }
function event_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function event_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, event_toPropertyKey(descriptor.key), descriptor); } }
function event_createClass(Constructor, protoProps, staticProps) { if (protoProps) event_defineProperties(Constructor.prototype, protoProps); if (staticProps) event_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function event_toPropertyKey(arg) { var key = event_toPrimitive(arg, "string"); return event_typeof(key) === "symbol" ? key : String(key); }
function event_toPrimitive(input, hint) { if (event_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (event_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * Base class for all events.
 */
var Event = /*#__PURE__*/function () {
  function Event(type) {
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
    event_classCallCheck(this, Event);
    this._type = type;
    this._data = data;
  }

  /**
   * Type accessor.
   *
   * @type {String}
   */
  event_createClass(Event, [{
    key: "type",
    get: function get() {
      return this._type;
    }

    /**
     * Data related to event.
     *
     * @type {Object}
     */
  }, {
    key: "data",
    get: function get() {
      return this._data;
    }
  }]);
  return Event;
}();
/**
 * Base Publisher-related Event.
 *
 * @extends Event
 */
var PublisherEvent = /*#__PURE__*/function (_Event) {
  _inherits(PublisherEvent, _Event);
  var _super = _createSuper(PublisherEvent);
  function PublisherEvent(type, publisher, data) {
    var _this;
    event_classCallCheck(this, PublisherEvent);
    _this = _super.call(this, type, data);
    _this._publisher = publisher;
    return _this;
  }

  /**
   * The Publisher instance that dispatched the event.
   *
   * @type {Object}
   *
   * @see Red5ProPublisher
   * @see RTCPublisher
   * @see RTMPPublisher
   */
  event_createClass(PublisherEvent, [{
    key: "publisher",
    get: function get() {
      return this._publisher;
    }
  }]);
  return PublisherEvent;
}(Event);
/**
 * Base Subscriber-related Event.
 *
 * @extends Event
 */
var SubscriberEvent = /*#__PURE__*/function (_Event2) {
  _inherits(SubscriberEvent, _Event2);
  var _super2 = _createSuper(SubscriberEvent);
  function SubscriberEvent(type, subscriber, data) {
    var _this2;
    event_classCallCheck(this, SubscriberEvent);
    _this2 = _super2.call(this, type, data);
    _this2._subscriber = subscriber;
    return _this2;
  }

  /**
   * The Subscriber instance that dispatched the event.
   *
   * @type {Object}
   *
   * @see Red5ProSubscriber
   * @see RTCSubscriber
   * @see RTMPSubscriber
   * @see HLSubscriber
   */
  event_createClass(SubscriberEvent, [{
    key: "subscriber",
    get: function get() {
      return this._subscriber;
    }
  }]);
  return SubscriberEvent;
}(Event);
/**
 * Base SharedObject-related Event.
 *
 * @extends Event
 */
var SharedObjectEvent = /*#__PURE__*/function (_Event3) {
  _inherits(SharedObjectEvent, _Event3);
  var _super3 = _createSuper(SharedObjectEvent);
  function SharedObjectEvent(type, sharedObjectName, data) {
    var _this3;
    event_classCallCheck(this, SharedObjectEvent);
    _this3 = _super3.call(this, type, data);
    _this3._name = sharedObjectName;
    return _this3;
  }

  /**
   * The name of the Shared Object.
   *
   * @type {String}
   *
   * @see {Red5ProSharedObject}
   */
  event_createClass(SharedObjectEvent, [{
    key: "name",
    get: function get() {
      return this._name;
    }
  }]);
  return SharedObjectEvent;
}(Event);
/**
 * Base WebSocketProxy-related state Event.
 *
 * @extends Event
 */
var MessageTransportStateEvent = /*#__PURE__*/function (_Event4) {
  _inherits(MessageTransportStateEvent, _Event4);
  var _super4 = _createSuper(MessageTransportStateEvent);
  function MessageTransportStateEvent(type, name, data) {
    var _this4;
    event_classCallCheck(this, MessageTransportStateEvent);
    _this4 = _super4.call(this, type, data);
    _this4._name = name;
    return _this4;
  }

  /**
   * The name of the WebSocket.
   *
   * @type {String}
   *
   * @see {Red5ProSharedObject}
   */
  event_createClass(MessageTransportStateEvent, [{
    key: "name",
    get: function get() {
      return this._name;
    }
  }]);
  return MessageTransportStateEvent;
}(Event);
/**
 * Base RTCConferenceParticipant state Event.
 *
 * @extends Event
 */
var RTCConferenceParticipantEvent = /*#__PURE__*/function (_Event5) {
  _inherits(RTCConferenceParticipantEvent, _Event5);
  var _super5 = _createSuper(RTCConferenceParticipantEvent);
  function RTCConferenceParticipantEvent(type, participant, data) {
    var _this5;
    event_classCallCheck(this, RTCConferenceParticipantEvent);
    _this5 = _super5.call(this, type, data);
    _this5._participant = participant;
    return _this5;
  }

  /**
   * The RTCConferenceParticipant.
   *
   * @type {RTCConferenceParticipant}
   *
   * @see {RTCConferenceParticipant}
   */
  event_createClass(RTCConferenceParticipantEvent, [{
    key: "participant",
    get: function get() {
      return this._participant;
    }
  }]);
  return RTCConferenceParticipantEvent;
}(Event);

















// CONCATENATED MODULE: ./src/js/subscriber/controls/event.js


function controls_event_typeof(obj) { "@babel/helpers - typeof"; return controls_event_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, controls_event_typeof(obj); }
function controls_event_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function controls_event_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, controls_event_toPropertyKey(descriptor.key), descriptor); } }
function controls_event_createClass(Constructor, protoProps, staticProps) { if (protoProps) controls_event_defineProperties(Constructor.prototype, protoProps); if (staticProps) controls_event_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function controls_event_toPropertyKey(arg) { var key = controls_event_toPrimitive(arg, "string"); return controls_event_typeof(key) === "symbol" ? key : String(key); }
function controls_event_toPrimitive(input, hint) { if (controls_event_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (controls_event_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function event_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) event_setPrototypeOf(subClass, superClass); }
function event_setPrototypeOf(o, p) { event_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return event_setPrototypeOf(o, p); }
function event_createSuper(Derived) { var hasNativeReflectConstruct = event_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = event_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = event_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return event_possibleConstructorReturn(this, result); }; }
function event_possibleConstructorReturn(self, call) { if (call && (controls_event_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return event_assertThisInitialized(self); }
function event_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function event_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function event_getPrototypeOf(o) { event_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return event_getPrototypeOf(o); }


/**
 * Events for Slider Control.
 *
 * @see {SliderControl}
 *
 * @private
 */
var SliderEvent = /*#__PURE__*/function (_Event) {
  event_inherits(SliderEvent, _Event);
  var _super = event_createSuper(SliderEvent);
  function SliderEvent(type, control, data) {
    var _this;
    controls_event_classCallCheck(this, SliderEvent);
    _this = _super.call(this, type, data);
    _this._control = control;
    return _this;
  }
  controls_event_createClass(SliderEvent, [{
    key: "control",
    get: function get() {
      return this._control;
    }
  }]);
  return SliderEvent;
}(Event);
/**
 * Enumeration of Slider Event types.
 *
 * @private
 */
var SliderEventTypes = Object.freeze({
  CHANGE_START: 'changestart',
  CHANGE: 'change',
  CHANGE_COMPLETE: 'changecomplete'
});
var SeekEventTypes = Object.freeze({
  SEEK_START: 'seekstart',
  SEEK_END: 'seekend'
});



// CONCATENATED MODULE: ./src/js/subscriber/controls/slider.js


function slider_typeof(obj) { "@babel/helpers - typeof"; return slider_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, slider_typeof(obj); }
function slider_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function slider_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, slider_toPropertyKey(descriptor.key), descriptor); } }
function slider_createClass(Constructor, protoProps, staticProps) { if (protoProps) slider_defineProperties(Constructor.prototype, protoProps); if (staticProps) slider_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function slider_toPropertyKey(arg) { var key = slider_toPrimitive(arg, "string"); return slider_typeof(key) === "symbol" ? key : String(key); }
function slider_toPrimitive(input, hint) { if (slider_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (slider_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function slider_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) slider_setPrototypeOf(subClass, superClass); }
function slider_setPrototypeOf(o, p) { slider_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return slider_setPrototypeOf(o, p); }
function slider_createSuper(Derived) { var hasNativeReflectConstruct = slider_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = slider_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = slider_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return slider_possibleConstructorReturn(this, result); }; }
function slider_possibleConstructorReturn(self, call) { if (call && (slider_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return slider_assertThisInitialized(self); }
function slider_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function slider_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function slider_getPrototypeOf(o) { slider_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return slider_getPrototypeOf(o); }




var NAME = 'ControlSlider';

/**
 * Custom slider control for Playback Controls.
 *
 * @private
 */
var slider_ControlSlider = /*#__PURE__*/function (_EventEmitter) {
  slider_inherits(ControlSlider, _EventEmitter);
  var _super = slider_createSuper(ControlSlider);
  function ControlSlider(type) {
    var _this;
    slider_classCallCheck(this, ControlSlider);
    _this = _super.call(this);
    _this.name = [NAME, type].join('::');
    log_debug(_this.name, '[init]');
    _this._container = browser.createElement('div');
    _this._button = _this.createButton();
    _this._track = _this.createTrack();
    _this._progressBar = _this.createProgressBar();
    _this._container.appendChild(_this._track);
    _this._container.appendChild(_this._progressBar);
    _this._container.appendChild(_this._button);
    _this._value = 0; // 0 - 1
    _this._disabled = false;
    _this._eventStartPosition = 0;
    _this._layout();
    _this._mouseupHandler = _this._mouseup.bind(slider_assertThisInitialized(_this));
    _this._mousedownHandler = _this._mousedown.bind(slider_assertThisInitialized(_this));
    _this._mousemoveHandler = _this._mousemove.bind(slider_assertThisInitialized(_this));
    _this._touchupHandler = _this._touchproxy.bind(slider_assertThisInitialized(_this));
    _this._touchdownHandler = _this._touchproxy.bind(slider_assertThisInitialized(_this));
    _this._touchmoveHandler = _this._touchproxy.bind(slider_assertThisInitialized(_this));
    _this._updateHandlers(_this._disabled);
    return _this;
  }

  /**
   * Touch event proxy to bubble out mouse events for handling interaction.
   *
   * @private
   */
  slider_createClass(ControlSlider, [{
    key: "_touchproxy",
    value: function _touchproxy(event) {
      event.preventDefault();
      if (event.touches.length > 1 || event.type == "touchend" && event.touches.length > 0) {
        return;
      }
      var evt = browser.createEvent('MouseEvent');
      var type, touch;
      var t = event.originalTarget || event.target;
      switch (event.type) {
        case 'touchstart':
          type = 'mousedown';
          touch = event.changedTouches[0];
          break;
        case 'touchmove':
          type = 'mousemove';
          touch = event.changedTouches[0];
          break;
        case 'touchend':
          type = 'mouseup';
          touch = event.changedTouches[0];
          break;
      }
      evt.initMouseEvent(type, true, true, t.ownerDocument.defaultView, 0, touch.screenX, touch.screenY, touch.clientX, touch.clientY, event.ctrlKey, event.altKey, event.shiftKey, event.metaKey, 0, null);
      t.dispatchEvent(evt);
    }

    /**
     * Event handler for mouse up.
     *
     * @private
     */
  }, {
    key: "_mouseup",
    value: function _mouseup() {
      this._eventStartPosition = 0;
      document.removeEventListener('mousemove', this._mousemoveHandler);
      document.removeEventListener('mouseup', this._mouseupHandler);
      document.removeEventListener('touchmove', this._touchmoveHandler);
      document.removeEventListener('touchup', this._touchupHandler);
      this.trigger(new SliderEvent(SliderEventTypes.CHANGE_COMPLETE, this));
    }

    /**
     * Event handler for mouse move.
     *
     * @private
     */
  }, {
    key: "_mousemove",
    value: function _mousemove(event) {
      var positionOffset = browser.getMouseXFromEvent(event) - this._eventStartPosition;
      var rect = this._button.parentNode.getBoundingClientRect();
      var position = this._eventStartPosition + positionOffset - rect.left; // - environment.getScrollX()
      position = Math.max(0, position);
      position = Math.min(position, rect.width);
      var percentage = position / rect.width;
      this.trigger(new SliderEvent(SliderEventTypes.CHANGE, this, percentage));
    }

    /**
     * Event handler for mouse down.
     *
     * @private
     */
  }, {
    key: "_mousedown",
    value: function _mousedown(event) {
      this._eventStartPosition = browser.getMouseXFromEvent(event);
      this.trigger(new SliderEvent(SliderEventTypes.CHANGE_START, this));
      document.addEventListener('mousemove', this._mousemoveHandler);
      document.addEventListener('mouseup', this._mouseupHandler);
      document.addEventListener('touchmove', this._touchmoveHandler);
      document.addEventListener('touchup', this._touchupHandler);
    }

    /**
     * Adds or removes control hanlders based on flag of overall control being disabled.
     *
     * @param {Boolean} isDisabled
     *
     * @private
     */
  }, {
    key: "_updateHandlers",
    value: function _updateHandlers(isDisabled) {
      this._eventStartPosition = 0;
      if (isDisabled) {
        this._track.removeEventListener('click', this._mousemoveHandler);
        this._progressBar.removeEventListener('click', this._mousemoveHandler);
        this._button.removeEventListener('mousedown', this._mousedownHandler);
        document.removeEventListener('mousemove', this._mousemoveHandler);
        document.removeEventListener('mouseup', this._mouseupHandler);
        document.removeEventListener('touchmove', this._touchmoveHandler);
        document.removeEventListener('touchup', this._touchupHandler);
        this._track.classList.add('red5pro-media-slider-disabled');
        this._progressBar.classList.add('red5pro-media-slider-disabled');
        this._button.classList.add('red5pro-media-slider-disabled');
      } else {
        this._track.addEventListener('click', this._mousemoveHandler);
        this._progressBar.addEventListener('click', this._mousemoveHandler);
        this._button.addEventListener('mousedown', this._mousedownHandler);
        this._button.addEventListener('touchstart', this._touchdownHandler);
        this._track.classList.remove('red5pro-media-slider-disabled');
        this._progressBar.classList.remove('red5pro-media-slider-disabled');
        this._button.classList.remove('red5pro-media-slider-disabled');
      }
    }

    /**
     * Re-layout sub controls.
     *
     * @private
     */
  }, {
    key: "_layout",
    value: function _layout() {
      var position = this._progressBar.parentNode.clientWidth * this._value;
      this._progressBar.style.width = position + 'px';
      this._button.style.left = position - this._button.clientWidth * 0.5 + 'px';
    }

    /**
     * Creates the button element.
     *
     * @private
     */
  }, {
    key: "createButton",
    value: function createButton() {
      var span = browser.createElement('span');
      span.classList.add('red5pro-media-slider-button');
      return span;
    }

    /**
     * Creates the progress bar element.
     *
     * @private
     */
  }, {
    key: "createProgressBar",
    value: function createProgressBar() {
      var span = browser.createElement('span');
      span.classList.add('red5pro-media-slider-progress');
      return span;
    }

    /**
     * Creates the track element.
     *
     * @private
     */
  }, {
    key: "createTrack",
    value: function createTrack() {
      var span = browser.createElement('span');
      span.classList.add('red5pro-media-slider-track');
      return span;
    }

    /**
     * Returns the current value.
     *
     * @return {Number}
     */
  }, {
    key: "value",
    get: function get() {
      return this._value;
    }

    /**
     * Sets the current value.
     *
     * @param {Number} 0..1
     */,
    set: function set(percentValue /* 0 - 1 */) {
      this._value = percentValue;
      this._layout();
    }

    /**
     * Returns disabled flag.
     *
     * @return {Boolean}
     */
  }, {
    key: "disabled",
    get: function get() {
      return this._disabled;
    }

    /**
     * Sets the disabled flag.
     *
     * @param {Boolean} bool
     */,
    set: function set(bool) {
      this._disabled = bool;
      this._updateHandlers(bool);
    }

    /**
     * Returns the target container this control is assigned to in the DOM.
     *
     * @return {Element}
     */
  }, {
    key: "view",
    get: function get() {
      return this._container;
    }
  }]);
  return ControlSlider;
}(event_emitter);
/* harmony default export */ var controls_slider = (slider_ControlSlider);
// CONCATENATED MODULE: ./src/js/subscriber/controls/state.js
/**
 * Enumeration of Playback State.
 *
 * @see {SubscriberPlaybackControls}
 */
var PlaybackState = Object.freeze({
  UNAVAILABLE: 1000,
  AVAILABLE: 0,
  IDLE: 1,
  PLAYING: 2,
  PAUSED: 3
});

/**
 * Human readable playback state.
 *
 * @see {SubscriberPlaybackControls}
 * @private
 */
var PlaybackStateReadable = Object.freeze({
  1000: 'Playback.UNAVAILABLE',
  0: 'Playback.AVAILABLE',
  1: 'Playback.IDLE',
  2: 'Playback.PLAYING',
  3: 'Playback.PAUSED'
});

/**
 * Enumeration of Live Seek State.
 */
var LiveSeekState = Object.freeze({
  LIVE: 0,
  VOD: 1
});

/**
 * Human readable live seek state.
 */
var LiveSeekStateReadable = Object.freeze({
  0: 'LiveSeek.LIVE',
  1: 'LiveSeek.VOD'
});
// CONCATENATED MODULE: ./src/js/subscriber/controls/index.js


function controls_typeof(obj) { "@babel/helpers - typeof"; return controls_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, controls_typeof(obj); }
function controls_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function controls_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, controls_toPropertyKey(descriptor.key), descriptor); } }
function controls_createClass(Constructor, protoProps, staticProps) { if (protoProps) controls_defineProperties(Constructor.prototype, protoProps); if (staticProps) controls_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function controls_toPropertyKey(arg) { var key = controls_toPrimitive(arg, "string"); return controls_typeof(key) === "symbol" ? key : String(key); }
function controls_toPrimitive(input, hint) { if (controls_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (controls_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function controls_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) controls_setPrototypeOf(subClass, superClass); }
function controls_setPrototypeOf(o, p) { controls_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return controls_setPrototypeOf(o, p); }
function controls_createSuper(Derived) { var hasNativeReflectConstruct = controls_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = controls_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = controls_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return controls_possibleConstructorReturn(this, result); }; }
function controls_possibleConstructorReturn(self, call) { if (call && (controls_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return controls_assertThisInitialized(self); }
function controls_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function controls_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function controls_getPrototypeOf(o) { controls_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return controls_getPrototypeOf(o); }







var controls_NAME = 'PlaybackControls';

/**
 * Interface contract for playback controller actions.
 *
 * @extends EventEmitter
 */
var SubscriberPlaybackController = /*#__PURE__*/function (_EventEmitter) {
  controls_inherits(SubscriberPlaybackController, _EventEmitter);
  var _super = controls_createSuper(SubscriberPlaybackController);
  function SubscriberPlaybackController() {
    controls_classCallCheck(this, SubscriberPlaybackController);
    return _super.call(this);
  }

  /**
   * Request to start playing the stream.
   */
  controls_createClass(SubscriberPlaybackController, [{
    key: "play",
    value: function play() {}
    /**
     * Request to pause playback of stream.
     */
  }, {
    key: "pause",
    value: function pause() {}
    /**
     * Request to resume playback od stream.
     */
  }, {
    key: "resume",
    value: function resume() {}
    /**
     * Request to stop playback of stream.
     */
  }, {
    key: "stop",
    value: function stop() {}
    /**
     * Request to mute the audio of the stream.
     */
  }, {
    key: "mute",
    value: function mute() {}
    /**
     * Request to unmute the audio of the stream.
     */
  }, {
    key: "unmute",
    value: function unmute() {}
    /**
     * Request to set volume of audio of stream.
     *
     * @param {Number} value
     *        From 0..1.
     */
  }, {
    key: "setVolume",
    value: function setVolume(value) {} // eslint-disable-line no-unused-vars
    /**
     * Request to set playback point in time.
     *
     * @param {Number} value
     *        Either the percentage of the duration (if provided) or the time in seconds.
     * @param {Number} duration
     *        Optional duration of video (when known through VOD) to use to determine time based on first param passed as percentage.
     */
  }, {
    key: "seekTo",
    value: function seekTo(value) {
      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
    } // eslint-disable-line no-unused-vars
    /**
     * Request to toggle fullscreen state.
     */
  }, {
    key: "toggleFullScreen",
    value: function toggleFullScreen() {}
  }]);
  return SubscriberPlaybackController;
}(event_emitter);
/**
 * Interface for PlaybackControls used by Subscribers with `controls` and `class="red5pro-media` defined on target elements. This interface serves as a presentation controller and playback API for target DOM elements.
 *
 * You can use this as a prototype for creating and providing your own custom Playback Controls. To do so: provide an implementation of this Class as the `controls` property on the initialization configuration map provided in the `init()` call of a Subscriber.
 *
 * TODO: Fully vet the viability of developers being adhere to this contract for custom controls.
 * @private
 */
var SubscriberPlaybackControls = /*#__PURE__*/function (_EventEmitter2) {
  controls_inherits(SubscriberPlaybackControls, _EventEmitter2);
  var _super2 = controls_createSuper(SubscriberPlaybackControls);
  function SubscriberPlaybackControls() {
    controls_classCallCheck(this, SubscriberPlaybackControls);
    return _super2.call(this);
  }

  /**
   * Returns the volume level.
   *
   * @return {Number} 0..1
   */
  controls_createClass(SubscriberPlaybackControls, [{
    key: "getVolume",
    value: function getVolume() {}

    /**
     * Sets the volume level of playback.
     *
     * @param {Number} value
     *        0..1
     */
  }, {
    key: "setVolume",
    value: function setVolume(value) {} // eslint-disable-line no-unused-vars

    /**
     * Request to set playback point in time.
     *
     * @param {Number} value
     *        Either the percentage of the duration (if provided) or the time in seconds.
     * @param {Number} duration
     *        Optional duration of video (when known through VOD) to use to determine time based on first param passed as percentage.
     */
  }, {
    key: "setSeekTime",
    value: function setSeekTime(value) {
      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    } // eslint-disable-line no-unused-vars

    /**
     * Sets the playback duration of the stream, if available from VOD (Video On Demand).
     *
     * @param {Number} value
     *        In seconds.
     */
  }, {
    key: "setPlaybackDuration",
    value: function setPlaybackDuration(value) {} // eslint-disable-line no-unused-vars

    /**
     * Returns the current playback state.
     *
     * @return {Number}
     * @see {PlaybackState}
     */
  }, {
    key: "getState",
    value: function getState() {}

    /**
     * Set the current playback state.
     *
     * @param {Number} state
     * @see {PlaybackState}
     */
  }, {
    key: "setState",
    value: function setState(state) {} // eslint-disable-line no-unused-vars

    /**
     * Sets playback as VOD (Video On Demand) type.
     *
     * @param {Boolean} value
     */
  }, {
    key: "setAsVOD",
    value: function setAsVOD(value) {} // eslint-disable-line no-unused-vars

    /**
    * Enables controls and event handlers.
    *
    * @private
    */
  }, {
    key: "enable",
    value: function enable(value) {} // eslint-disable-line no-unused-vars
  }]);
  return SubscriberPlaybackControls;
}(event_emitter);
/**
 * Default implementation of `SubscriberPlaybackControls` used internally in the SDK.
 *
 * @private
 */
var controls_SubscriberPlaybackControlsImpl = /*#__PURE__*/function (_SubscriberPlaybackCo) {
  controls_inherits(SubscriberPlaybackControlsImpl, _SubscriberPlaybackCo);
  var _super3 = controls_createSuper(SubscriberPlaybackControlsImpl);
  function SubscriberPlaybackControlsImpl(player, container) {
    var _this;
    controls_classCallCheck(this, SubscriberPlaybackControlsImpl);
    _this = _super3.call(this);
    _this.player = player;
    _this.container = container;
    _this._controlbar = undefined;
    _this._playPauseButton = undefined;
    _this._muteButton = undefined;
    _this._volumeField = undefined;
    _this._seekTimeField = undefined;
    _this._timeField = undefined;
    _this._fullScreenButton = undefined;
    _this._state = PlaybackState.IDLE;
    _this._mutedState = false;
    _this._resumeAfterSeek = false;
    _this._playbackDuration = 0;
    _this._volumeValue = 1;
    _this._onPlayPauseClickBound = _this._onPlayPauseClick.bind(controls_assertThisInitialized(_this));
    _this.decorate(_this.container);
    return _this;
  }

  /**
   * Decorates target container with playback control elements.
   *
   * @param {Element} container
   *
   * @private
   */
  controls_createClass(SubscriberPlaybackControlsImpl, [{
    key: "decorate",
    value: function decorate(container) {
      log_debug(controls_NAME, '[decorate]');
      var controlbar = browser.createElement('div');
      controlbar.classList.add('red5pro-media-control-bar');
      this._playPauseButton = this._createPlayPauseButton();
      this._muteButton = this._createMuteButton();
      this._volumeField = this._createVolumeControl();
      this._seekTimeField = this._createSeekControl();
      this._timeField = this._createPlaybackTime();
      this._fullScreenButton = this._createFullScreenToggle();
      controlbar.appendChild(this._playPauseButton);
      controlbar.appendChild(this._timeField);
      controlbar.appendChild(this._seekTimeField.view);
      controlbar.appendChild(this._muteButton);
      controlbar.appendChild(this._volumeField.view);
      controlbar.appendChild(this._fullScreenButton);
      container.appendChild(controlbar);
      this._controlbar = controlbar;
      var controlBarOff;
      var delayControlBarOff = function delayControlBarOff() {
        clearTimeout(controlBarOff);
        controlBarOff = setTimeout(function () {
          controlbar.classList.remove('red5pro-media-control-bar-show');
        }, 6000);
      };
      if (browser.isTouchEnabled()) {
        controlbar.classList.add('red5pro-media-control-bar-show');
        this.container.addEventListener('touchend', function () {
          controlbar.classList.toggle('red5pro-media-control-bar-show');
          delayControlBarOff();
        });
        delayControlBarOff();
      } else {
        this.container.addEventListener('mouseover', function () {
          controlbar.classList.add('red5pro-media-control-bar-show');
        });
        this.container.addEventListener('mouseout', function () {
          controlbar.classList.remove('red5pro-media-control-bar-show');
        });
      }
      this.setState(PlaybackState.IDLE).onFullScreenChange(false).setSeekTime(0).enable(false);
    }

    /**
     * Click handler for play/pause control.
     *
     * @private
     */
  }, {
    key: "_onPlayPauseClick",
    value: function _onPlayPauseClick() {
      if (this.getState() === PlaybackState.PLAYING) {
        this.player.pause(true);
      } else if (this.getState() === PlaybackState.PAUSED) {
        this.player.resume(true);
      } else {
        this.player.play(true);
      }
    }

    /**
     * Creates play/pause control.
     *
     * @private
     */
  }, {
    key: "_createPlayPauseButton",
    value: function _createPlayPauseButton() {
      var button = browser.createElement('button');
      button.setAttribute('aria-label', 'Toggle Playback');
      button.classList.add('red5pro-media-control-element');
      button.classList.add('red5pro-media-element-button');
      button.classList.add('red5pro-media-playpause-button');
      return button;
    }

    /**
     * Creates mute/unmute control.
     *
     * @private
     */
  }, {
    key: "_createMuteButton",
    value: function _createMuteButton() {
      var self = this;
      var button = browser.createElement('button');
      button.setAttribute('aria-label', 'Toggle Mute Audio');
      button.classList.add('red5pro-media-control-element');
      button.classList.add('red5pro-media-element-button');
      button.classList.add('red5pro-media-muteunmute-button');
      button.addEventListener('click', function () {
        if (self.getMutedState()) {
          self.player.unmute();
          self.setMutedState(false);
        } else {
          self.player.mute();
          self.setMutedState(true);
        }
      });
      return button;
    }

    /**
     * Creates volume control.
     *
     * @private
     */
  }, {
    key: "_createVolumeControl",
    value: function _createVolumeControl() {
      var self = this;
      var slider = new controls_slider('volume');
      slider.view.classList.add('red5pro-media-control-element');
      slider.view.classList.add('red5pro-media-volume-slider');
      slider.view.classList.add('red5pro-media-slider');
      slider.on(SliderEventTypes.CHANGE, function (event) {
        var percentage = Number(event.data);
        self.player.setVolume(percentage);
      });
      return slider;
    }

    /**
     * Creates seek control.
     *
     * @private
     */
  }, {
    key: "_createSeekControl",
    value: function _createSeekControl() {
      var self = this;
      var slider = new controls_slider('seek');
      slider.view.classList.add('red5pro-media-control-element');
      slider.view.classList.add('red5pro-media-seektime-slider');
      slider.view.classList.add('red5pro-media-slider');
      slider.on(SliderEventTypes.CHANGE_START, function () {
        if (self.getState() === PlaybackState.PLAYING) {
          self._resumeAfterSeek = true;
          self.player.pause(true, true);
        }
        self.trigger(new Event(SeekEventTypes.SEEK_START));
      });
      slider.on(SliderEventTypes.CHANGE, function (event) {
        var percentage = Number(event.data);
        self.player.seekTo(percentage, self._playbackDuration === 0 ? undefined : self._playbackDuration);
        self.setSeekTime(percentage * self._playbackDuration, self._playbackDuration);
      });
      slider.on(SliderEventTypes.CHANGE_COMPLETE, function () {
        if (self._resumeAfterSeek && self.getState() === PlaybackState.PAUSED) {
          self._resumeAfterSeek = false;
          self.player.resume(true, true);
        }
        self.trigger(new Event(SeekEventTypes.SEEK_END));
      });
      return slider;
    }

    /**
     * Creates playback time field.
     *
     * @private
     */
  }, {
    key: "_createPlaybackTime",
    value: function _createPlaybackTime() {
      var span = browser.createElement('span');
      var text = browser.createElement('text', 'hello!');
      span.classList.add('red5pro-media-control-element');
      span.classList.add('red5pro-media-time-field');
      span.appendChild(text);
      return span;
    }

    /**
     * Create fullscreen toggle control.
     *
     * @private
     */
  }, {
    key: "_createFullScreenToggle",
    value: function _createFullScreenToggle() {
      var self = this;
      var button = browser.createElement('button');
      button.setAttribute('aria-label', 'Toggle Fullscreen');
      button.classList.add('red5pro-media-control-element');
      button.classList.add('red5pro-media-element-button');
      button.classList.add('red5pro-media-fullscreen-button');
      button.addEventListener('click', function () {
        self.player.toggleFullScreen();
      });
      return button;
    }

    /**
     * Enables controls and event handlers.
     *
     * @private
     */
  }, {
    key: "enable",
    value: function enable(value) {
      if (value) {
        this._playPauseButton.classList.remove('red5pro-media-element-button-disabled');
        this._playPauseButton.addEventListener('click', this._onPlayPauseClickBound);
      } else {
        this._playPauseButton.classList.add('red5pro-media-element-button-disabled');
        this._playPauseButton.removeEventListener('click', this._onPlayPauseClickBound);
      }
    }

    /**
     * Formats the time value.
     *
     * @param {value} Number
     * @return {String}
     */
  }, {
    key: "formatTime",
    value: function formatTime(value) {
      var hrs = 0;
      var mins = value === 0 || isNaN(value) ? 0 : parseInt(value / 60);
      var secs = 0;
      if (mins >= 60) {
        hrs = parseInt(mins / 60);
        mins = mins % 60;
      }
      secs = value === 0 || isNaN(value) ? 0 : parseInt(value % 60);
      var formattedArr = hrs < 10 ? ['0' + hrs] : [hrs];
      formattedArr.push(mins < 10 ? ['0' + mins] : [mins]);
      formattedArr.push(secs < 10 ? ['0' + secs] : [secs]);
      return formattedArr.join(':');
    }

    /**
     * Returns the volume level.
     *
     * @return {Number} 0..1
     */
  }, {
    key: "getVolume",
    value: function getVolume() {
      return this._volumeValue;
    }

    /**
     * Sets the volume level of playback.
     *
     * @param {Number} value
     *        0..1
     */
  }, {
    key: "setVolume",
    value: function setVolume(value) {
      this._volumeField.value = value;
      this._volumeValue = value;
      if (value === 0) {
        this.setMutedState(true);
      } else if (this.getMutedState()) {
        this.setMutedState(false);
      }
      return this;
    }

    /**
     * Request to set playback point in time.
     *
     * @param {Number} value
     *        Either the percentage of the duration (if provided) or the time in seconds.
     * @param {Number} duration
     *        Optional duration of video (when known through VOD) to use to determine time based on first param passed as percentage.
     */
  }, {
    key: "setSeekTime",
    value: function setSeekTime(value) {
      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      this._seekTimeField.value = length === 0 ? 0 : value / length;
      if (this._playbackDuration !== 0 && parseInt(this._playbackDuration) <= parseInt(value)) {
        this._seekTimeField.value = 1;
      }
      this._timeField.innerText = this.formatTime(Math.floor(value));
      return this;
    }

    /**
     * Sets the playback duration of the stream, if available from VOD (Video On Demand).
     *
     * @param {Number} value
     *        In seconds.
     */
  }, {
    key: "setPlaybackDuration",
    value: function setPlaybackDuration(value) {
      log_debug(controls_NAME, '[setplaybackduration]: ' + value);
      this._playbackDuration = value;
    }
  }, {
    key: "getPlaybackDuration",
    value: function getPlaybackDuration() {
      return this._playbackDuration;
    }

    /**
     * Returns the current playback state.
     *
     * @return {Number}
     * @see {PlaybackState}
     */
  }, {
    key: "getState",
    value: function getState() {
      return this._state;
    }

    /**
     * Set the current playback state.
     *
     * @param {Number} state
     * @see {PlaybackState}
     */
  }, {
    key: "setState",
    value: function setState(state) {
      log_debug(controls_NAME, '[setState]: ' + PlaybackStateReadable[state]);
      this._state = state;
      this.onStateChange(this._state);
      return this;
    }

    /**
     * Returns the current state of the playback being muted.
     * This differs from just the volume level being 0. The controls can be muted, but have a volume level greater than 0 - meaning, unmute will return back to the volume level previously set.
     *
     * @return {Boolean}
     */
  }, {
    key: "getMutedState",
    value: function getMutedState() {
      return 'muted' in this.player ? this.player.muted : this._mutedState;
    }

    /**
     * Sets the muted state of the playback.
     *
     * @param {Boolean} state
     */
  }, {
    key: "setMutedState",
    value: function setMutedState(state) {
      this._mutedState = state;
      this.onMutedStateChange(this._mutedState);
      return this;
    }

    /**
     * Handler for change in state.
     *
     * @param {Number} state
     *        The PlaybackState
     *
     * @private
     */
  }, {
    key: "onStateChange",
    value: function onStateChange(state) {
      if (state === PlaybackState.PLAYING) {
        this._playPauseButton.classList.remove('red5pro-media-play-button');
        this._playPauseButton.classList.add('red5pro-media-pause-button');
      } else {
        this._playPauseButton.classList.add('red5pro-media-play-button');
        this._playPauseButton.classList.remove('red5pro-media-pause-button');
      }
      return this;
    }

    /**
     * Handler for change in mute state.
     *
     * @param {Boolean} state
     *
     * @private
     */
  }, {
    key: "onMutedStateChange",
    value: function onMutedStateChange(state) {
      if (state) {
        this._muteButton.classList.add('red5pro-media-mute-button');
        this._muteButton.classList.remove('red5pro-media-unmute-button');
        this._volumeField.value = 0;
      } else {
        this._muteButton.classList.remove('red5pro-media-mute-button');
        this._muteButton.classList.add('red5pro-media-unmute-button');
        this._volumeField.value = this._volumeValue;
      }
    }

    /**
     * Handler for change in fullscreen state.
     *
     * @param {Boolean} isFullScreen
     *
     * @private
     */
  }, {
    key: "onFullScreenChange",
    value: function onFullScreenChange(isFullScreen) {
      if (isFullScreen) {
        this._fullScreenButton.classList.add('red5pro-media-exit-fullscreen-button');
        this._fullScreenButton.classList.remove('red5pro-media-fullscreen-button');
      } else {
        this._fullScreenButton.classList.remove('red5pro-media-exit-fullscreen-button');
        this._fullScreenButton.classList.add('red5pro-media-fullscreen-button');
      }
      return this;
    }

    /**
     * Sets playback as VOD (Video On Demand) type.
     *
     * @param {Boolean} value
     */
  }, {
    key: "setAsVOD",
    value: function setAsVOD(isVOD) {
      log_debug(controls_NAME, '[setAsVOD]: ' + isVOD);
      if (!isVOD) {
        this._seekTimeField.value = 0;
        this._seekTimeField.disabled = true;
      } else {
        this._seekTimeField.disabled = false;
      }
    }

    /**
     * Request to detach the control bar to provided container.
     */
  }, {
    key: "detach",
    value: function detach() {
      this.enable(false);
      if (this._controlbar && this._controlbar.parentNode) {
        this._controlbar.parentNode.removeChild(this._controlbar);
      }
      this._controlbar = undefined;
      this.container = undefined;
    }
  }]);
  return SubscriberPlaybackControlsImpl;
}(SubscriberPlaybackControls);
var PlaybackController = SubscriberPlaybackController;
var PlaybackControls = SubscriberPlaybackControls;
var PlaybackControlsImpl = controls_SubscriberPlaybackControlsImpl;
// CONCATENATED MODULE: ./src/js/subscriber/red5pro-source-handler-rtc.js


function red5pro_source_handler_rtc_typeof(obj) { "@babel/helpers - typeof"; return red5pro_source_handler_rtc_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, red5pro_source_handler_rtc_typeof(obj); }
function red5pro_source_handler_rtc_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function red5pro_source_handler_rtc_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, red5pro_source_handler_rtc_toPropertyKey(descriptor.key), descriptor); } }
function red5pro_source_handler_rtc_createClass(Constructor, protoProps, staticProps) { if (protoProps) red5pro_source_handler_rtc_defineProperties(Constructor.prototype, protoProps); if (staticProps) red5pro_source_handler_rtc_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function red5pro_source_handler_rtc_toPropertyKey(arg) { var key = red5pro_source_handler_rtc_toPrimitive(arg, "string"); return red5pro_source_handler_rtc_typeof(key) === "symbol" ? key : String(key); }
function red5pro_source_handler_rtc_toPrimitive(input, hint) { if (red5pro_source_handler_rtc_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (red5pro_source_handler_rtc_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function red5pro_source_handler_rtc_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) red5pro_source_handler_rtc_setPrototypeOf(subClass, superClass); }
function red5pro_source_handler_rtc_setPrototypeOf(o, p) { red5pro_source_handler_rtc_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return red5pro_source_handler_rtc_setPrototypeOf(o, p); }
function red5pro_source_handler_rtc_createSuper(Derived) { var hasNativeReflectConstruct = red5pro_source_handler_rtc_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = red5pro_source_handler_rtc_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = red5pro_source_handler_rtc_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return red5pro_source_handler_rtc_possibleConstructorReturn(this, result); }; }
function red5pro_source_handler_rtc_possibleConstructorReturn(self, call) { if (call && (red5pro_source_handler_rtc_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return red5pro_source_handler_rtc_assertThisInitialized(self); }
function red5pro_source_handler_rtc_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function red5pro_source_handler_rtc_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function red5pro_source_handler_rtc_getPrototypeOf(o) { red5pro_source_handler_rtc_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return red5pro_source_handler_rtc_getPrototypeOf(o); }






var red5pro_source_handler_rtc_NAME = 'RTCSourceHandler';

/**
 * Source Handler for WebRTC-based Subscribers, which serves as a Presentation Controller between view and subscriber.
 *
 * @extends EventEmitter
 * @extends SubscriberPlaybackController
 *
 * @private
 */
var red5pro_source_handler_rtc_RTCSourceHandler = /*#__PURE__*/function (_PlaybackController) {
  red5pro_source_handler_rtc_inherits(RTCSourceHandler, _PlaybackController);
  var _super = red5pro_source_handler_rtc_createSuper(RTCSourceHandler);
  function RTCSourceHandler(media, type) {
    var _this;
    red5pro_source_handler_rtc_classCallCheck(this, RTCSourceHandler);
    _this = _super.call(this);
    _this.media = media;
    var usePlaybackControls = browser.hasAttributeDefined(_this.media, 'controls') && browser.hasClassDefined(_this.media, 'red5pro-media');
    if (usePlaybackControls) {
      _this.clone = _this.media.cloneNode(true);
      _this.parent = _this.media.parentNode;
      _this.holder = _this._determineHolder(_this.media);
    }
    _this.playerType = type;
    _this._isVOD = false;
    _this._controls = undefined;
    _this._playbackNotificationCenter = _this.media;
    browser.onFullScreenStateChange(_this._handleFullScreenChange.bind(red5pro_source_handler_rtc_assertThisInitialized(_this)));
    return _this;
  }

  /**
   * Established DOM Element order for playback.
   *
   * @param {Element} media
   *        The target media element: e.g., `video` or `audio`.
   *
   * @private
   */
  red5pro_source_handler_rtc_createClass(RTCSourceHandler, [{
    key: "_determineHolder",
    value: function _determineHolder(media) {
      if (media.parentNode.classList.contains('red5pro-media-container')) {
        return media.parentNode;
      } else {
        var parent = media.parentNode;
        var div = browser.createElement('div');
        div.classList.add('red5pro-media-container');
        parent.insertBefore(div, media);
        parent.removeChild(media);
        div.appendChild(media);
        return div;
      }
    }

    /**
     * Established DOM Element order for playback.
     *
     * @param {Element} media
     *        The target media element: e.g., `video` or `audio`.
     *
     * @private
     */
  }, {
    key: "_cleanUp",
    value: function _cleanUp() {
      if (!this.clone) return;

      // Return to prior DOM manipulation.
      var el = this.media;
      var elParent = el.parentNode;
      var mediaHolder = this.holder;
      if (elParent) {
        elParent.removeChild(el);
        // The object parent could be a wrapper child in the original parent element.
        if (elParent !== this.parent) {
          elParent.parentNode.removeChild(elParent);
          mediaHolder = this.parent;
        }
      } else {
        try {
          el.remove();
        } catch (e) {
          log_warn(red5pro_source_handler_rtc_NAME, "Issue in DOM cleanup of WebRTC video object: ".concat(e.message));
        }
      }
      this.media = this.clone.cloneNode(true);
      mediaHolder.appendChild(this.media);
      if (this._controls) {
        this._controls.detach();
      }
    }

    /**
     * Assigns and handlers event notificiations coming from the media notifier (e.g., `video` or `audio` element).
     *
     * @param {Object} notifier
     *
     * @private
     */
  }, {
    key: "_addPlaybackHandlers",
    value: function _addPlaybackHandlers(notifier) {
      var _this2 = this;
      var controls = this.getControls();
      var hasControls = typeof controls !== 'undefined';
      notifier.oncanplay = function () {
        log_debug(red5pro_source_handler_rtc_NAME, '[videoelement:event] canplay');
        if (controls) {
          controls.enable(true);
        }
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
          code: PlaybackState.AVAILABLE,
          state: PlaybackStateReadable[PlaybackState.AVAILABLE]
        }));
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.VOLUME_CHANGE, undefined, {
          volume: notifier.volume
        }));
      };
      notifier.ondurationchange = function (event) {
        // eslint-disable-line no-unused-vars
        log_debug(red5pro_source_handler_rtc_NAME, '[videoelement:event] durationchange');
        if (!isNaN(notifier.duration) && Number.isFinite(notifier.duration)) {
          _this2.isVOD = true;
        }
        if (hasControls) {
          controls.setPlaybackDuration(notifier.duration);
        }
      };
      notifier.onended = function () {
        log_debug(red5pro_source_handler_rtc_NAME, '[videoelement:event] ended');
        if (hasControls) {
          controls.setState(PlaybackState.IDLE);
        }
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
          code: PlaybackState.IDLE,
          state: PlaybackStateReadable[PlaybackState.IDLE]
        }));
      };
      notifier.ontimeupdate = function (event) {
        // eslint-disable-line no-unused-vars
        if (hasControls) {
          controls.setSeekTime(notifier.currentTime, self.isVOD ? notifier.duration : undefined);
        }
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_TIME_UPDATE, undefined, {
          time: notifier.currentTime,
          duration: notifier.duration
        }));
      };
      notifier.onseeked = function (event) {// eslint-disable-line no-unused-vars
        //      debug(NAME, 'Seeked.')
      };
      notifier.onseeking = function (event) {// eslint-disable-line no-unused-vars
        //      debug(NAME, 'Seeking.')
      };
      notifier.onplay = function () {
        log_debug(red5pro_source_handler_rtc_NAME, '[videoelement:event] play');
        if (hasControls) {
          controls.setState(PlaybackState.PLAYING);
        }
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
          code: PlaybackState.PLAYING,
          state: PlaybackStateReadable[PlaybackState.PLAYING]
        }));
      };
      notifier.onpause = function () {
        log_debug(red5pro_source_handler_rtc_NAME, '[videoelement:event] pause');
        if (hasControls) {
          controls.setState(PlaybackState.PAUSED);
        }
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
          code: PlaybackState.PAUSED,
          state: PlaybackStateReadable[PlaybackState.PAUSED]
        }));
      };
      notifier.onvolumechange = function (event) {
        // eslint-disable-line no-unused-vars
        if (hasControls && controls.getVolume() !== _this2.media.volume) {
          controls.setVolume(_this2.media.volume);
        }
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.VOLUME_CHANGE, undefined, {
          volume: notifier.muted ? 0 : notifier.volume
        }));
      };
      // for debugging purposes.
      notifier.onencrypted = function () {
        log_debug(red5pro_source_handler_rtc_NAME, '[videoelement:event] encrypted');
      };
      notifier.onemptied = function () {
        log_debug(red5pro_source_handler_rtc_NAME, '[videoelement:event] emptied');
      };
      notifier.onloadeddata = function () {
        log_debug(red5pro_source_handler_rtc_NAME, '[videoelement:event] loadeddata');
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.VIDEO_DIMENSIONS_CHANGE, undefined, {
          width: _this2.media.videoWidth,
          height: _this2.media.videoHeight
        }));
      };
      notifier.onresize = function () {
        log_debug(red5pro_source_handler_rtc_NAME, '[videoelement:event] resize');
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.VIDEO_DIMENSIONS_CHANGE, undefined, {
          width: _this2.media.videoWidth,
          height: _this2.media.videoHeight
        }));
      };
      notifier.onloadedmetadata = function () {
        log_debug(red5pro_source_handler_rtc_NAME, '[videoelement:event] loadedmetadata');
      };
      notifier.onloadstart = function () {
        log_debug(red5pro_source_handler_rtc_NAME, '[videoelement:event] loadedstart');
      };
      notifier.onstalled = function () {
        log_debug(red5pro_source_handler_rtc_NAME, '[videoelement:event] stalled');
      };
      notifier.onsuspend = function () {
        log_debug(red5pro_source_handler_rtc_NAME, '[videoelement:event] suspend');
      };
      notifier.onwaiting = function () {
        log_debug(red5pro_source_handler_rtc_NAME, '[videoelement:event] waiting');
      };
      //    notifier.onprogress = () => { debug(NAME, '[videoelement:event] progress. Played: ' + notifier.played.length + ', Buffered: ' + notifier.buffered.length + '.') }
    }

    /**
     * Event handler for change in fullscreen state.
     *
     * @param {Boolean} isFullScreen
     *
     * @private
     */
  }, {
    key: "_handleFullScreenChange",
    value: function _handleFullScreenChange(isFullScreen) {
      if (isFullScreen) {
        if (this.holder) {
          this.holder.classList.add('red5pro-media-container-full-screen');
        }
        this.media.classList.add('red5pro-media-container-full-screen');
      } else {
        if (this.holder) {
          this.holder.classList.remove('red5pro-media-container-full-screen');
        }
        this.media.classList.remove('red5pro-media-container-full-screen');
      }
      this.trigger(new SubscriberEvent(SubscriberEventTypes.FULL_SCREEN_STATE_CHANGE, undefined, isFullScreen));
    }

    /**
     * Request to setup the presentation of a playback stream using WebRTC.
     *
     * @param {Object} options
     *        The initialization configuration map.
     *
     * @returns {Promise}
     */
  }, {
    key: "addSource",
    value: function addSource(options) {
      log_debug(red5pro_source_handler_rtc_NAME, '[addsource]');
      var usePlaybackControls = browser.hasAttributeDefined(this.media, 'controls') && browser.hasClassDefined(this.media, 'red5pro-media');
      if (usePlaybackControls) {
        this.holder = this._determineHolder(this.media);
      }
      var deferred = new DeferredPromise();
      var hasDefinedControls = options.controls;
      var isMuted = browser.hasAttributeDefined(this.media, 'muted');
      if (hasDefinedControls || usePlaybackControls) {
        if (hasDefinedControls) {
          this._controls = options.controls;
        } else {
          this._controls = new PlaybackControlsImpl(this, this.holder);
        }
        this.media.controls = false;
        this._controls.setAsVOD(this.isVOD);
        this._controls.setMutedState(isMuted);
      }
      this._addPlaybackHandlers(this._playbackNotificationCenter);
      deferred.resolve();
      return deferred.promise;
    }

    /**
     * Request to connect to stream.
     */
  }, {
    key: "connect",
    value: function connect() {
      log_debug(red5pro_source_handler_rtc_NAME, '[connect]');
    }
  }, {
    key: "attemptAutoplay",
    value: function attemptAutoplay() {
      var _this3 = this;
      var muteOnAutoplay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      this.play()["catch"](function (e) {
        if (muteOnAutoplay) {
          _this3.mute();
          _this3.play().then(function () {
            _this3.trigger(new SubscriberEvent(SubscriberEventTypes.AUTO_PLAYBACK_MUTED, undefined, {
              element: _this3.media
            }));
          })["catch"](function (err) {
            _this3.trigger(new SubscriberEvent(SubscriberEventTypes.AUTO_PLAYBACK_FAILURE, undefined, {
              error: err.message ? err.message : err,
              element: _this3.media
            }));
          });
        } else {
          _this3.trigger(new SubscriberEvent(SubscriberEventTypes.AUTO_PLAYBACK_FAILURE, undefined, {
            error: e.message ? e.message : e,
            element: _this3.media
          }));
        }
      });
    }
  }, {
    key: "play",
    value: function play() {
      log_debug(red5pro_source_handler_rtc_NAME, '[videoelement:action] play');
      var deferred = new DeferredPromise();
      try {
        var maybePromise = this.media.play();
        if (maybePromise) {
          maybePromise.then(function () {
            log_debug(red5pro_source_handler_rtc_NAME, '[videoelement:action] play (START)');
            deferred.resolve();
          })["catch"](deferred.reject);
        } else {
          log_debug(red5pro_source_handler_rtc_NAME, '[videoelement:action] play (START)');
          deferred.resolve();
        }
      } catch (e) {
        log_error(red5pro_source_handler_rtc_NAME, '[videoelement:action] play (FAULT) - ' + e.message);
        deferred.reject(e);
      }
      return deferred.promise;
    }
  }, {
    key: "pause",
    value: function pause() {
      log_debug(red5pro_source_handler_rtc_NAME, '[videoelement:action] pause');
      try {
        this.media.pause();
      } catch (e) {
        log_warn(red5pro_source_handler_rtc_NAME, '[videoelement:action] pause (CATCH::FAULT) - ' + e.message);
      }
    }
  }, {
    key: "resume",
    value: function resume() {
      log_debug(red5pro_source_handler_rtc_NAME, '[videoelement:action] resume');
      try {
        var maybePromise = this.media.play();
        if (maybePromise) {
          maybePromise.then(function () {
            return log_debug(red5pro_source_handler_rtc_NAME, '[videoelement:action] play (START)');
          })["catch"](function (err) {
            return log_warn(red5pro_source_handler_rtc_NAME, '[videoelement:action] play (CATCH::FAULT) ' + (err.message ? err.message : err));
          });
        }
      } catch (e) {
        log_warn(red5pro_source_handler_rtc_NAME, '[videoelement:action] resume (CATCH::FAULT) - ' + e.message);
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      log_debug(red5pro_source_handler_rtc_NAME, '[videoelement:action] stop');
      try {
        this.media.stop();
      } catch (e) {
        // ok.
      }
    }
  }, {
    key: "mute",
    value: function mute() {
      this.media.muted = true;
      var controls = this.getControls();
      if (controls) {
        controls.setMutedState(true);
      }
    }
  }, {
    key: "unmute",
    value: function unmute() {
      this.media.muted = false;
      var controls = this.getControls();
      if (controls) {
        controls.setMutedState(false);
      }
    }
  }, {
    key: "setVolume",
    value: function setVolume(value) {
      this.unmute();
      this.media.volume = value;
    }
  }, {
    key: "seekTo",
    value: function seekTo(percentage) {
      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      this.media.currentTime = duration ? percentage * duration : percentage;
    }
  }, {
    key: "toggleFullScreen",
    value: function toggleFullScreen() {
      try {
        if (this.holder) {
          browser.toggleFullScreen(this.holder);
        }
      } catch (e) {
        throw e;
        // nada.
      }
    }

    /**
     * Notification of current stream being in an unpublished state.
     * The stream enters an unpublished state when the broadcaster stop the stream and the subscriber is still connected.
     */
  }, {
    key: "unpublish",
    value: function unpublish() {
      try {
        this.stop();
        this.media.onended.call(this.media);
      } catch (e) {
        // nada.
      }
    }

    /**
     * Request to disconnect playback.
     */
  }, {
    key: "disconnect",
    value: function disconnect() {
      this._cleanUp();
    }

    /**
     * Responder to change in orientation received through metadata.
     *
     * @param {Number} orientation
     *        The orientation value.
     *
     * @private
     */
  }, {
    key: "handleOrientationChange",
    value: function handleOrientationChange(orientation) {
      if (this._controls && orientation % 180 !== 0) {
        if (this.holder) {
          this.holder.classList.add('red5pro-media-background');
        }
        this.media.classList.remove('red5pro-media-background');
      }
    }

    /*
     * || SHARED OBJECT INTEGRATION NOT AVAILABLE FOR HLS PLAYBACK ||
     */
    // eslint-disable-next-line no-unused-vars
  }, {
    key: "addSharedObjectResponseHandler",
    value: function addSharedObjectResponseHandler(handler) {}

    // eslint-disable-next-line no-unused-vars
  }, {
    key: "removeSharedObjectResponseHandler",
    value: function removeSharedObjectResponseHandler(handler) {}

    // eslint-disable-next-line no-unused-vars
  }, {
    key: "sendToSharedObject",
    value: function sendToSharedObject(name, callName, message) {}

    // eslint-disable-next-line no-unused-vars
  }, {
    key: "sendPropertyToSharedObject",
    value: function sendPropertyToSharedObject(name, key, value) {}

    // eslint-disable-next-line no-unused-vars
  }, {
    key: "getRemoteSharedObject",
    value: function getRemoteSharedObject(sharedObjectName) {}

    // eslint-disable-next-line no-unused-vars
  }, {
    key: "connectToSharedObject",
    value: function connectToSharedObject(sharedObjectName) {}

    // eslint-disable-next-line no-unused-vars
  }, {
    key: "closeSharedObject",
    value: function closeSharedObject(sharedObjectName) {}

    /**
     * Returns playback controls if available.
     *
     * @returns {PlaybackControls}
     */
  }, {
    key: "getControls",
    value: function getControls() {
      return this._controls;
    }

    /**
     * Returns the subscriber type associated with this controller.
     *
     * @returns {String}
     */
  }, {
    key: "getType",
    value: function getType() {
      return this.playerType;
    }

    /**
     * Returns flag of video being recognized as VOD (Video On Demand).
     *
     * @returns {Boolean}
     */
  }, {
    key: "isVOD",
    get: function get() {
      return this._isVOD;
    }

    /**
     * Sets flag of video being considered as VOD (Video On Demand).
     *
     * @param {Boolean} value
     */,
    set: function set(value) {
      this._isVOD = value;
      if (this._controls) {
        this._controls.setAsVOD(value);
      }
    }
  }]);
  return RTCSourceHandler;
}(PlaybackController);
/* harmony default export */ var red5pro_source_handler_rtc = (red5pro_source_handler_rtc_RTCSourceHandler);
// CONCATENATED MODULE: ./src/js/subscriber/red5pro-source-handler-rtc-seekable.js


function red5pro_source_handler_rtc_seekable_typeof(obj) { "@babel/helpers - typeof"; return red5pro_source_handler_rtc_seekable_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, red5pro_source_handler_rtc_seekable_typeof(obj); }
function red5pro_source_handler_rtc_seekable_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function red5pro_source_handler_rtc_seekable_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, red5pro_source_handler_rtc_seekable_toPropertyKey(descriptor.key), descriptor); } }
function red5pro_source_handler_rtc_seekable_createClass(Constructor, protoProps, staticProps) { if (protoProps) red5pro_source_handler_rtc_seekable_defineProperties(Constructor.prototype, protoProps); if (staticProps) red5pro_source_handler_rtc_seekable_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function red5pro_source_handler_rtc_seekable_toPropertyKey(arg) { var key = red5pro_source_handler_rtc_seekable_toPrimitive(arg, "string"); return red5pro_source_handler_rtc_seekable_typeof(key) === "symbol" ? key : String(key); }
function red5pro_source_handler_rtc_seekable_toPrimitive(input, hint) { if (red5pro_source_handler_rtc_seekable_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (red5pro_source_handler_rtc_seekable_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function red5pro_source_handler_rtc_seekable_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) red5pro_source_handler_rtc_seekable_setPrototypeOf(subClass, superClass); }
function red5pro_source_handler_rtc_seekable_setPrototypeOf(o, p) { red5pro_source_handler_rtc_seekable_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return red5pro_source_handler_rtc_seekable_setPrototypeOf(o, p); }
function red5pro_source_handler_rtc_seekable_createSuper(Derived) { var hasNativeReflectConstruct = red5pro_source_handler_rtc_seekable_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = red5pro_source_handler_rtc_seekable_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = red5pro_source_handler_rtc_seekable_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return red5pro_source_handler_rtc_seekable_possibleConstructorReturn(this, result); }; }
function red5pro_source_handler_rtc_seekable_possibleConstructorReturn(self, call) { if (call && (red5pro_source_handler_rtc_seekable_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return red5pro_source_handler_rtc_seekable_assertThisInitialized(self); }
function red5pro_source_handler_rtc_seekable_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function red5pro_source_handler_rtc_seekable_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function red5pro_source_handler_rtc_seekable_getPrototypeOf(o) { red5pro_source_handler_rtc_seekable_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return red5pro_source_handler_rtc_seekable_getPrototypeOf(o); }






var red5pro_source_handler_rtc_seekable_NAME = 'RTCSeekableSourceHandler';
var MAX_TS = 6;
/**
 * Source Handler for WebRTC-based Subscribers, which serves as a Presentation Controller between view and subscriber.
 *
 * @extends EventEmitter
 * @extends SubscriberPlaybackController
 *
 * @private
 */
var red5pro_source_handler_rtc_seekable_RTCSeekableSourceHandler = /*#__PURE__*/function (_PlaybackController) {
  red5pro_source_handler_rtc_seekable_inherits(RTCSeekableSourceHandler, _PlaybackController);
  var _super = red5pro_source_handler_rtc_seekable_createSuper(RTCSeekableSourceHandler);
  function RTCSeekableSourceHandler(media, type, hlsOptions) {
    var _this;
    var usePlaybackControls = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    red5pro_source_handler_rtc_seekable_classCallCheck(this, RTCSeekableSourceHandler);
    _this = _super.call(this);
    _this.media = media;
    _this.clone = _this.media.cloneNode(true);
    _this.parent = _this.media.parentNode;
    _this.holder = usePlaybackControls ? _this._determineHolder(_this.media) : undefined;
    _this.playerType = type;
    _this.hlsOptions = hlsOptions;
    _this.subscriberId = undefined;
    _this.hlsElement = undefined;
    _this._usePlaybackControls = usePlaybackControls;
    _this._isVOD = false;
    _this._isSeekable = false; // can be seekable but not VOD when doing live scrub.
    _this._isHLSPlaybackActive = false; // when we have switched over to VOD playback.
    _this._isFragLoading = false; // when scrubbed and loading landed fragment.
    _this._hlsRecoverFlop = false; // https://github.com/video-dev/hls.js/blob/master/docs/API.md#hlsswapaudiocodec
    _this._hlsRecoverAttempts = 0;
    _this._lastDurationUpdate = 0; // the currentTime of the RTC stream when switched to live playback.
    _this._controls = undefined;
    _this._resizeObserver = undefined;
    _this._playbackNotificationCenter = _this.media;
    _this._pendingUnpublish = false;
    _this._wallOffset = NaN;
    _this._averageSegmentDuration = MAX_TS;
    browser.onFullScreenStateChange(_this._handleFullScreenChange.bind(red5pro_source_handler_rtc_seekable_assertThisInitialized(_this)));

    // Live Seek HLS Support
    // Possible HLS.JS instance.
    _this.hls = undefined;
    // The DOMElement for HLS playback.
    _this.hlsElement = undefined;
    return _this;
  }

  /**
   * Established DOM Element order for playback.
   *
   * @param {Element} media
   *        The target media element: e.g., `video` or `audio`.
   *
   * @private
   */
  red5pro_source_handler_rtc_seekable_createClass(RTCSeekableSourceHandler, [{
    key: "_determineHolder",
    value: function _determineHolder(media) {
      if (media.parentNode.classList.contains('red5pro-media-container')) {
        return media.parentNode;
      } else {
        var parent = media.parentNode;
        var div = browser.createElement('div');
        div.classList.add('red5pro-media-container');
        parent.insertBefore(div, media);
        parent.removeChild(media);
        div.appendChild(media);
        return div;
      }
    }

    /**
     * Generates video element for HLS playback and adds it in container properly ordered.
     *
     * @param {DOMElement} holder
     * @param {DOMElement} media
     * @param {string} subscriberId
     *
     * @returns DOMElement
     */
  }, {
    key: "_generateHLSLivePlayback",
    value: function _generateHLSLivePlayback(holder, media, subscriberId) {
      var id = "".concat(subscriberId, "-hls-vod");
      var hlsElement = document.querySelector("#".concat(id));
      if (!hlsElement) {
        hlsElement = document.createElement('video');
        hlsElement.id = id;
        hlsElement.classList.add('red5pro-hls-vod');
        hlsElement.playsinline = 'playsinline';
        hlsElement.style.width = '100%'; // `${media.clientWidth}px`
        hlsElement.style.height = '100%'; // `${media.clientHeight}px`
        hlsElement.style.position = 'absolute';
        hlsElement.style.display = 'none';
        holder.insertBefore(hlsElement, media);
        // eslint-disable-next-line no-undef
        //       this._resizeObserver = new ResizeObserver((entries) => {
        //         for (const entry of entries) {
        //           if (entry.contentRect) {
        // //            hlsElement.style.width = `${entry.contentRect.width}px`
        // //            hlsElement.style.height = `${entry.contentRect.height}px`
        //           }
        //         }
        //       })
        //       this._resizeObserver.observe(media)
      }

      return hlsElement;
    }
  }, {
    key: "_showHLSLivePlayback",
    value: function _showHLSLivePlayback(flag, hlsMedia, media, holder) {
      if (this._isHLSPlaybackActive === flag) {
        return;
      }
      this._isHLSPlaybackActive = flag;
      var isMuted = flag ? media.muted : hlsMedia.muted;
      if (flag) {
        hlsMedia.volume = media.volume;
        hlsMedia.muted = isMuted;
        media.muted = true;
        hlsMedia.style.display = 'inline-block';
        holder.style.position = 'relative';
        try {
          if (!media.paused) {
            this.pause(true);
            this.play();
          } else {
            this.pause(false);
          }
        } catch (e) {
          log_warn("Could not start playback: ".concat(e.message, "."));
        }
        media.style.display = 'none';
      } else {
        media.volume = hlsMedia.volume;
        hlsMedia.muted = true;
        media.muted = isMuted;
        media.style.display = 'inline-block';
        try {
          if (!hlsMedia.paused) {
            this.pause(true);
            this.play();
          } else {
            this.pause(false);
          }
        } catch (e) {
          log_warn("Could not start playback: ".concat(e.message, "."));
        }
        hlsMedia.style.display = 'none';
      }
      var code = flag ? LiveSeekState.VOD : LiveSeekState.LIVE;
      this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.LIVE_SEEK_CHANGE, undefined, {
        code: code,
        state: LiveSeekStateReadable[code]
      }));
    }

    /**
     * Established DOM Element order for playback.
     *
     * @param {Element} media
     *        The target media element: e.g., `video` or `audio`.
     *
     * @private
     */
  }, {
    key: "_cleanUp",
    value: function _cleanUp() {
      if (!this.clone) return;

      // Return to prior DOM manipulation.
      var el = this.media;
      var elParent = el.parentNode;
      var mediaHolder = this.holder;
      this._removePlaybackHandlers(el);
      // Note: liveSeek requires custom controls, so we should always arrive here.
      if (this.hls) {
        this.hls.detachMedia();
        this.hls = undefined;
      }
      if (this.hlsElement) {
        this._removeSeekableHandlers(this.hlsElement);
        if (this.hlsElement.parentNode) {
          this.hlsElement.parentNode.removeChild(this.hlsElement);
        }
        this.hlsElement = undefined;
      }
      if (this._controls) {
        this._controls.detach();
        this._controls = undefined;
      }
      if (elParent) {
        elParent.removeChild(el);
        // The object parent could be a wrapper child in the original parent element.
        if (elParent !== this.parent) {
          elParent.parentNode.removeChild(elParent);
          mediaHolder = this.parent;
        }
      } else {
        try {
          el.remove();
        } catch (e) {
          log_warn(red5pro_source_handler_rtc_seekable_NAME, "Issue in DOM cleanup of WebRTC video object: ".concat(e.message));
        }
      }
      this.media = this.clone.cloneNode(true);
      mediaHolder.appendChild(this.media);
      if (this._resizeObserver) {
        this._resizeObserver.unobserve();
        this._resizeObserver = undefined;
      }
      this._isVOD = false;
      this._isSeekable = false;
      this._isHLSPlaybackActive = false;
      this._isFragLoading = false;
      this._hlsRecoverFlop = false;
      this._hlsRecoverAttempts = 0;
    }

    /**
     * Assigns and handlers event notificiations coming from the media notifier (e.g., `video` or `audio` element).
     *
     * @param {Object} notifier
     *
     * @private
     */
  }, {
    key: "_addPlaybackHandlers",
    value: function _addPlaybackHandlers(notifier) {
      var _this2 = this;
      var controls = this.getControls();
      notifier.oncanplay = function () {
        log_debug(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:event] canplay');
        if (controls) {
          controls.enable(true);
        }
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
          code: PlaybackState.AVAILABLE,
          state: PlaybackStateReadable[PlaybackState.AVAILABLE]
        }));
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.VOLUME_CHANGE, undefined, {
          volume: notifier.volume
        }));
      };
      notifier.onended = function () {
        return _this2._onRTCEnded.bind(_this2);
      };
      notifier.ondurationchange = this._onRTCDurationChange.bind(this);
      notifier.ontimeupdate = this._onRTCTimeUpdate.bind(this);
      notifier.onplay = this._onRTCPlay.bind(this);
      notifier.onpause = this._onRTCPause.bind(this);
      notifier.onvolumechange = function (event) {
        // eslint-disable-line no-unused-vars
        if (controls && controls.getVolume() !== _this2.media.volume) {
          controls.setVolume(_this2.media.volume);
        }
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.VOLUME_CHANGE, undefined, {
          volume: notifier.muted ? 0 : notifier.volume
        }));
      };
      // for debugging purposes.
      notifier.onencrypted = function () {
        log_debug(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:event] encrypted');
      };
      notifier.onemptied = function () {
        log_debug(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:event] emptied');
      };
      notifier.onloadeddata = function () {
        log_debug(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:event] loadeddata');
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.VIDEO_DIMENSIONS_CHANGE, undefined, {
          width: _this2.media.videoWidth,
          height: _this2.media.videoHeight
        }));
      };
      notifier.onresize = function () {
        log_debug(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:event] resize');
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.VIDEO_DIMENSIONS_CHANGE, undefined, {
          width: _this2.media.videoWidth,
          height: _this2.media.videoHeight
        }));
      };
      notifier.onloadedmetadata = function () {
        log_debug(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:event] loadedmetadata');
      };
      notifier.onloadstart = function () {
        log_debug(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:event] loadedstart');
      };
      notifier.onstalled = function () {
        log_debug(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:event] stalled');
      };
      notifier.onsuspend = function () {
        log_debug(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:event] suspend');
      };
      notifier.onwaiting = function () {
        log_debug(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:event] waiting');
      };
      //    notifier.onprogress = () => { debug(NAME, '[videoelement:event] progress. Played: ' + notifier.played.length + ', Buffered: ' + notifier.buffered.length + '.') }
    }
  }, {
    key: "_removePlaybackHandlers",
    value: function _removePlaybackHandlers(notifier) {
      notifier.oncanplay = undefined;
      notifier.onended = undefined;
      notifier.ondurationchange = undefined;
      notifier.ontimeupdate = undefined;
      notifier.onplay = undefined;
      notifier.onpause = undefined;
      notifier.onvolumechange = undefined;
      notifier.onencrypted = undefined;
      notifier.onemptied = undefined;
      notifier.onloadeddata = undefined;
      notifier.onresize = undefined;
      notifier.onloadedmetadata = undefined;
      notifier.onloadstart = undefined;
      notifier.onstalled = undefined;
      notifier.onsuspend = undefined;
      notifier.onwaiting = undefined;
    }
  }, {
    key: "_addSeekableHandlers",
    value: function _addSeekableHandlers(element, control) {
      var _this3 = this;
      if (control) {
        // HLS.JS
        // eslint-disable-next-line no-unused-vars
        control.on(browser.getHLSClientEventEnum().ERROR, function (event, data) {
          var type = data.type,
            details = data.details,
            fatal = data.fatal,
            url = data.url;
          if (type.toLowerCase() === 'networkerror') {
            if (details.toLowerCase() === 'levelemptyerror') {
              _this3.trigger(new SubscriberEvent(RTCSubscriberEventTypes.LIVE_SEEK_DISABLED, undefined, {
                hlsElement: element,
                hlsControl: control
              }));
              _this3.isSeekable = false;
              // Try, try again.
              control.destroy();
              var t = setTimeout(function () {
                clearTimeout(t);
                _this3.enableLiveSeek(url, _this3.subscriberId, _this3.hlsElement, false);
              }, 3000);
              return;
            } else {
              _this3.trigger(new SubscriberEvent(RTCSubscriberEventTypes.LIVE_SEEK_ERROR, undefined, {
                hlsElement: element,
                hlsControl: control,
                error: data
              }));
            }
          } else {
            _this3.trigger(new SubscriberEvent(RTCSubscriberEventTypes.LIVE_SEEK_ERROR, undefined, {
              hlsElement: element,
              hlsControl: control,
              error: data
            }));
          }
          if (type.toLowerCase() === 'mediaerror') {
            if (_this3._hlsRecoverFlop) {
              control.swapAudioCodec();
            }
            _this3._hlsRecoverFlop = !_this3._hlsRecoverFlop;
            _this3._hlsRecoverAttempts = _this3._hlsRecoverAttempts + 1;
            control.recoverMediaError();
          }
          if (fatal && type.toLowerCase() === 'networkerror') {
            control.startLoad();
          }
        });
        control.on(browser.getHLSClientEventEnum().MANIFEST_PARSED, function () {
          // console.log(data.levels[0].details.fragments)
          try {
            element.pause();
          } catch (e) {
            log_debug(red5pro_source_handler_rtc_seekable_NAME, "Could not pause seekable live stream: ".concat(e.message));
          }
          _this3.isSeekable = true;
          _this3.trigger(new SubscriberEvent(RTCSubscriberEventTypes.LIVE_SEEK_ENABLED, undefined, {
            hlsElement: element,
            hlsControl: control
          }));
        });
        control.on(browser.getHLSClientEventEnum().FRAG_LOADING, function (event, data) {
          var _data$frag$stats = data.frag.stats,
            loaded = _data$frag$stats.loaded,
            total = _data$frag$stats.total;
          _this3.trigger(new SubscriberEvent(RTCSubscriberEventTypes.LIVE_SEEK_LOADING, undefined, {
            hlsElement: element,
            hlsControl: control,
            progress: loaded / total * 100
          }));
          if (!_this3.isHLSPlaybackActive && !_this3._isFragLoading) return;
          _this3._isFragLoading = loaded / total >= 1;
        });
        // control.on(environment.getHLSClientEventEnum().FRAG_LOAD_PROGRESS, (event, data) => {
        //   console.log('LiveSeek', data)
        // })
        control.on(browser.getHLSClientEventEnum().FRAG_LOADED, function (event, data) {
          _this3._isFragLoading = false;
          var _data$frag = data.frag,
            endDTS = _data$frag.endDTS,
            loader = _data$frag.loader;
          if (!_this3.isHLSPlaybackActive) {
            if (!endDTS) return;
          }
          var offset = MAX_TS;
          var totalDuration = 0;
          if (loader && loader.stats && loader.stats.segments) {
            var segments = loader.stats.segments;
            for (var i = 0; i < segments.length; i++) {
              totalDuration += segments[i].duration;
            }
            offset = totalDuration / segments.length;
            _this3._averageSegmentDuration = offset;
          }
          //        controls.setPlaybackDuration(endDTS + offset)
          log_debug(red5pro_source_handler_rtc_seekable_NAME, "fragload, [HLS:videoelement:duration] ".concat(endDTS, " + ").concat(offset));
          _this3.trigger(new SubscriberEvent(RTCSubscriberEventTypes.LIVE_SEEK_LOADED, undefined, {
            hlsElement: element,
            hlsControl: control
          }));
        });
        control.on(browser.getHLSClientEventEnum().FRAG_PARSED, function (event, data) {
          _this3._isFragLoading = false;
          var _data$frag2 = data.frag,
            endDTS = _data$frag2.endDTS,
            loader = _data$frag2.loader;
          if (!_this3.isHLSPlaybackActive) {
            if (!endDTS) return;
          }
          var offset = MAX_TS;
          var totalDuration = 0;
          if (loader && loader.stats && loader.stats.segments) {
            var segments = loader.stats.segments;
            for (var i = 0; i < segments.length; i++) {
              totalDuration += segments[i].duration;
            }
            offset = totalDuration / segments.length;
            _this3._averageSegmentDuration = offset;
          }
          //        controls.setPlaybackDuration(endDTS + offset)
          log_debug(red5pro_source_handler_rtc_seekable_NAME, "fragparsed, [HLS:videoelement:duration] ".concat(endDTS, " + ").concat(offset));
          _this3.trigger(new SubscriberEvent(RTCSubscriberEventTypes.LIVE_SEEK_LOADED, undefined, {
            hlsElement: element,
            hlsControl: control
          }));
        });
        // control.on(environment.getHLSClientEventEnum().BUFFER_APPENDING, (event, data) => {
        //   debug(NAME, `buffer, [HLS:videoelement:buffer_appending]`)
        // })
        // control.on(environment.getHLSClientEventEnum().BUFFER_APPENDED, (event, data) => {
        //   debug(NAME, `buffer, [HLS:videoelement:buffer_appended]`)
        //   const { frag: duration } = data
        //   const { maxStartPTS, endPTS } = duration
        //   this._averageSegmentDuration = (duration + this._averageSegmentDuration) / 2
        // })
      }

      element.ondurationchange = this._onHLSDurationChange.bind(this);
      element.ontimeupdate = this._onHLSTimeUpdate.bind(this);
      element.onplay = this._onHLSPlay.bind(this);
      element.onpause = this._onHLSPause.bind(this);
    }
  }, {
    key: "_removeSeekableHandlers",
    value: function _removeSeekableHandlers(element) {
      element.ondurationchange = undefined;
      element.ontimeupdate = undefined;
      element.onplay = undefined;
      element.onpause = undefined;
    }
  }, {
    key: "_onRTCEnded",
    value: function _onRTCEnded() {
      log_debug(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:event] ended');
      // Note: If scrubbed, we are playing HLS VOD at a specific fragment and not live playback.
      if (this.isHLSPlaybackActive) {
        return;
      }
      var controls = this.getControls();
      if (controls) {
        controls.setState(PlaybackState.IDLE);
      }
      this.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
        code: PlaybackState.IDLE,
        state: PlaybackStateReadable[PlaybackState.IDLE]
      }));
    }
  }, {
    key: "_onRTCDurationChange",
    value: function _onRTCDurationChange(event) {
      var element = event.target;
      log_debug(red5pro_source_handler_rtc_seekable_NAME, 'video, [videoelement:event] durationchange (' + element.duration + ')');
      if (!this.isSeekable && this.getControls()) {
        this.getControls().setPlaybackDuration(element.duration);
      }
    }
  }, {
    key: "_onRTCTimeUpdate",
    value: function _onRTCTimeUpdate(event) {
      var element = event.target;
      var controls = this.getControls();
      if (this.isSeekable) {
        if (!this._isHLSPlaybackActive) {
          var hlsDuration = this.hlsElement.duration;
          var offset = element.currentTime - this._lastDurationUpdate;
          var time = isNaN(hlsDuration) || hlsDuration === 0 ? element.currentTime : hlsDuration + this._averageSegmentDuration + offset;
          if (controls) {
            controls.setSeekTime(time, time);
          }
          this.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_TIME_UPDATE, undefined, {
            time: time,
            duration: time,
            action: 'rtc time update (1)'
          }));
        }
      } else if (!this.isSeekable) {
        if (controls) {
          this.getControls().setSeekTime(element.currentTime, undefined);
        }
        this.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_TIME_UPDATE, undefined, {
          time: element.currentTime,
          duration: element.duration,
          action: 'rtc time update (2)'
        }));
      }
    }
  }, {
    key: "_onRTCPlay",
    value: function _onRTCPlay() {
      log_debug(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:event] play');
      var controls = this.getControls();
      if (controls) {
        controls.setState(PlaybackState.PLAYING);
      }
      this.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
        code: PlaybackState.PLAYING,
        state: PlaybackStateReadable[PlaybackState.PLAYING]
      }));
    }
  }, {
    key: "_onRTCPause",
    value: function _onRTCPause() {
      log_debug(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:event] pause');
      var controls = this.getControls();
      if (controls) {
        controls.setState(PlaybackState.PAUSED);
      }
      this.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
        code: PlaybackState.PAUSED,
        state: PlaybackStateReadable[PlaybackState.PAUSED]
      }));
    }
  }, {
    key: "_onHLSDurationChange",
    value: function _onHLSDurationChange(event) {
      var element = event.target;
      var hlsDuration = element.duration;
      if (isNaN(this._wallOffset)) {
        // May need + _averageSegmentDuration?
        this._wallOffset = hlsDuration - this.media.currentTime;
      }
      this._lastDurationUpdate = this.media.currentTime;
      var duration = hlsDuration + this._averageSegmentDuration;
      log_debug(red5pro_source_handler_rtc_seekable_NAME, "[HLS:videoelement:duration] ".concat(hlsDuration, ", ").concat(this._averageSegmentDuration));
      var controls = this.getControls();
      if (controls) {
        controls.setPlaybackDuration(duration);
      }
      if (this._isHLSPlaybackActive) {
        this.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_TIME_UPDATE, undefined, {
          time: element.currentTime,
          duration: duration,
          action: 'hls time update'
        }));
      } else {
        this.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_TIME_UPDATE, undefined, {
          time: duration,
          duration: duration,
          action: 'hls time update'
        }));
      }
    }
  }, {
    key: "_onHLSTimeUpdate",
    value: function _onHLSTimeUpdate(event) {
      var element = event.target;
      var controls = this.getControls();
      if (controls) {
        controls.setSeekTime(element.currentTime, controls.getPlaybackDuration());
      }
      if (element.currentTime >= element.duration) {
        this._showHLSLivePlayback(false, this.hlsElement, this.media, this.holder);
      } else if (!isNaN(element.duration) && this._isHLSPlaybackActive) {
        this.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_TIME_UPDATE, undefined, {
          time: element.currentTime,
          duration: element.duration + this._averageSegmentDuration,
          action: 'hls time update'
        }));
      }
    }
  }, {
    key: "_onHLSPlay",
    value: function _onHLSPlay() {
      log_debug(red5pro_source_handler_rtc_seekable_NAME, '[HLS:videoelement:event] play');
      var controls = this.getControls();
      if (controls) {
        controls.setState(PlaybackState.PLAYING);
      }
      this.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
        code: PlaybackState.PLAYING,
        state: PlaybackStateReadable[PlaybackState.PLAYING]
      }));
    }
  }, {
    key: "_onHLSPause",
    value: function _onHLSPause() {
      log_debug(red5pro_source_handler_rtc_seekable_NAME, '[HLS:videoelement:event] pause');
      var controls = this.getControls();
      if (controls) {
        controls.setState(PlaybackState.PAUSED);
      }
      this.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
        code: PlaybackState.PAUSED,
        state: PlaybackStateReadable[PlaybackState.PAUSED]
      }));
    }

    /**
     * Event handler for change in fullscreen state.
     *
     * @param {Boolean} isFullScreen
     *
     * @private
     */
  }, {
    key: "_handleFullScreenChange",
    value: function _handleFullScreenChange(isFullScreen) {
      if (isFullScreen) {
        if (this.holder) {
          this.holder.classList.add('red5pro-media-container-full-screen');
        }
        if (this.hlsElement) {
          this.hlsElement.classList.add('red5pro-media-container-full-screen');
        }
        this.media.classList.add('red5pro-media-container-full-screen');
      } else {
        if (this.holder) {
          this.holder.classList.remove('red5pro-media-container-full-screen');
        }
        if (this.hlsElement) {
          this.hlsElement.classList.remove('red5pro-media-container-full-screen');
        }
        this.media.classList.remove('red5pro-media-container-full-screen');
      }
      this.trigger(new SubscriberEvent(SubscriberEventTypes.FULL_SCREEN_STATE_CHANGE, undefined, isFullScreen));
    }

    /**
     * Request to setup the presentation of a playback stream using WebRTC.
     *
     * @param {Object} options
     *        The initialization configuration map.
     *
     * @returns {Promise}
     */
  }, {
    key: "addSource",
    value: function addSource(options) {
      log_debug(red5pro_source_handler_rtc_seekable_NAME, '[addsource]');
      // Forcing custom controls on Seekable implementation.
      this.media.controls = true;
      this.media.classList.add('red5pro-media');
      var usePlaybackControls = browser.hasAttributeDefined(this.media, 'controls') && browser.hasClassDefined(this.media, 'red5pro-media');
      if (usePlaybackControls) {
        this.media.classList.add('red5pro-media');
        this.holder = this._determineHolder(this.media);
      }
      var deferred = new DeferredPromise();
      var hasDefinedControls = options.controls;
      var isMuted = browser.hasAttributeDefined(this.media, 'muted');
      if (hasDefinedControls || this._usePlaybackControls) {
        if (hasDefinedControls) {
          this._controls = options.controls;
        } else {
          this._controls = new PlaybackControlsImpl(this, this.holder);
        }
        this.media.controls = false;
        this._controls.setAsVOD(this.isSeekable);
        this._controls.setMutedState(isMuted);
      } else {
        this.media.controls = false;
      }
      this._addPlaybackHandlers(this._playbackNotificationCenter);
      deferred.resolve();
      return deferred.promise;
    }

    /**
     * Request to connect to stream.
     */
  }, {
    key: "connect",
    value: function connect() {
      log_debug(red5pro_source_handler_rtc_seekable_NAME, '[connect]');
    }
  }, {
    key: "attemptAutoplay",
    value: function attemptAutoplay() {
      var _this4 = this;
      var muteOnAutoplay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      this.play()["catch"](function (e) {
        if (muteOnAutoplay) {
          _this4.mute();
          _this4.play().then(function () {
            _this4.trigger(new SubscriberEvent(SubscriberEventTypes.AUTO_PLAYBACK_MUTED, undefined, {
              element: _this4.media
            }));
          })["catch"](function (err) {
            _this4.trigger(new SubscriberEvent(SubscriberEventTypes.AUTO_PLAYBACK_FAILURE, undefined, {
              error: err.message ? err.message : err,
              element: _this4.media
            }));
          });
        } else {
          _this4.trigger(new SubscriberEvent(SubscriberEventTypes.AUTO_PLAYBACK_FAILURE, undefined, {
            error: e.message ? e.message : e,
            element: _this4.media
          }));
        }
      });
    }

    // eslint-disable-next-line no-unused-vars
  }, {
    key: "enableLiveSeek",
    value: function enableLiveSeek(hlsURL, subscriberId) {
      var hlsElement = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      var hasNativeSupport = arguments.length > 3 ? arguments[3] : undefined;
      var controls = this.getControls();
      if (controls) {
        controls.setSeekTime(1, 1);
      }
      this.subscriberId = subscriberId;
      this.hlsElement = hlsElement || this._generateHLSLivePlayback(this.holder, this.media, this.subscriberId);
      this._showHLSLivePlayback(this.isHLSPlaybackActive, this.hlsElement, this.media, this.holder);
      // Enforce HLS.JS on Safari as well.
      /*
      if (hasNativeSupport) {
        this._addSeekableHandlers(this.hlsElement, null)
        this.hlsElement.controls = true
        let src = document.createElement('source')
        src.src = hlsURL
        this.hlsElement.appendChild(src)
        this.isSeekable = true
      } else {
      */
      var opt = this.hlsOptions;
      var hls = this._hlsjsRef ? new this._hlsjsRef(opt) : browser.createHLSClient(opt);
      this._addSeekableHandlers(this.hlsElement, hls);
      hls.attachMedia(this.hlsElement);
      hls.on(browser.getHLSClientEventEnum().MEDIA_ATTACHED, function () {
        hls.loadSource(hlsURL);
      });
      this.hls = hls;
      // TODO: Remove these global references.
      browser.setGlobal('r5pro_media_element', this.media);
      browser.setGlobal('r5pro_hls_element', this.hlsElement);
      browser.setGlobal('r5pro_hls_control', this.hls);
      /*
      }
      */
    }
  }, {
    key: "switchLiveSeek",
    value: function switchLiveSeek(hlsURL) {
      if (this.hls) {
        this.hls.detachMedia();
        this.hls = undefined;
      }
      this.enableLiveSeek(hlsURL, this.subscriberId, this.hlsElement);
      this.seekTo(1.0);
      // this.play(true)
      try {
        this.media.play();
      } catch (e) {
        log_warn(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:action] play (FAULT) - ' + e.message);
      }
    }
  }, {
    key: "play",
    value: function play() {
      var fromControls = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      log_debug(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:action] play');
      var deferred = new DeferredPromise();
      try {
        var maybePromise;
        if (fromControls && this.hlsElement && this.hlsElement.paused) {
          maybePromise = this.hlsElement.play();
        } else {
          maybePromise = this.media.play();
        }
        if (maybePromise) {
          maybePromise.then(function () {
            log_debug(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:action] play (START)');
            deferred.resolve();
          })["catch"](deferred.reject);
        } else {
          log_debug(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:action] play (START)');
          deferred.resolve();
        }
      } catch (e) {
        log_error(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:action] play (FAULT) - ' + e.message);
        deferred.reject(e);
      }
      return deferred.promise;
    }
  }, {
    key: "pause",
    value: function pause() {
      var fromControls = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var fromActionSeek = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      log_debug(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:action] pause');
      try {
        if (fromControls && fromActionSeek && this.hlsElement) {
          this.hlsElement.pause();
          this.media.pause();
        } else if (fromControls && !this.hlsElement.paused && this.hlsElement) {
          this.hlsElement.pause();
        } else {
          this.media.pause();
        }
      } catch (e) {
        log_warn(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:action] pause (CATCH::FAULT) - ' + e.message);
      }
    }
  }, {
    key: "resume",
    value: function resume() {
      var fromControls = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      log_debug(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:action] resume');
      try {
        var maybePromise = this.isHLSPlaybackActive && this.hlsElement ? this.hlsElement.play() : this.media.play();
        if (fromControls && this.isHLSPlaybackActive) {
          this.media.play()["catch"](function (err) {
            return log_warn(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:action] play (CATCH::FAULT) ' + (err.message ? err.message : err));
          });
        }
        if (maybePromise) {
          maybePromise.then(function () {
            return log_debug(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:action] play (START)');
          })["catch"](function (err) {
            return log_warn(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:action] play (CATCH::FAULT) ' + (err.message ? err.message : err));
          });
        }
      } catch (e) {
        log_warn(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:action] resume (CATCH::FAULT) - ' + e.message);
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      log_debug(red5pro_source_handler_rtc_seekable_NAME, '[videoelement:action] stop');
      try {
        if (this.hlsElement) {
          this.hlsElement.stop();
        }
        this.media.stop();
      } catch (e) {
        // ok.
      }
    }
  }, {
    key: "mute",
    value: function mute() {
      if (this.hlsElement) {
        this.hlsElement.muted = this.isHLSPlaybackActive;
      }
      this.media.muted = true;
      var controls = this.getControls();
      if (controls) {
        controls.setMutedState(true);
      }
    }
  }, {
    key: "unmute",
    value: function unmute() {
      if (this.hlsElement) {
        this.hlsElement.muted = !this.isHLSPlaybackActive;
        this.media.muted = this.isHLSPlaybackActive;
      } else {
        this.media.muted = false;
      }
      var controls = this.getControls();
      if (controls) {
        controls.setMutedState(false);
      }
    }
  }, {
    key: "setVolume",
    value: function setVolume(value) {
      this.unmute();
      if (this.hlsElement && this.isHLSPlaybackActive) {
        this.hlsElement.volume = value;
      } else {
        this.media.volume = value;
      }
    }
  }, {
    key: "seekTo",
    value: function seekTo(percentage) {
      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      if (this.isSeekable) {
        if (this._controls) {
          this._controls.setSeekTime(percentage, duration);
        }
        this.trigger(new SubscriberEvent(SubscriberEventTypes.SEEK_CHANGE, undefined, {
          seek: percentage,
          duration: duration
        }));
        if (this.hlsElement && percentage < 1.0) {
          try {
            this.hlsElement.classList.remove('hidden');
            this.hlsElement.currentTime = this.hlsElement.duration * percentage;
            this._isFragLoading = true;
            this._showHLSLivePlayback(true, this.hlsElement, this.media, this.holder);
            if (!this.media.paused) {
              log_debug(red5pro_source_handler_rtc_seekable_NAME, '[hlsvod:action] play (START) - (seekTo)');
              this.play(true);
            }
          } catch (e) {
            log_warn(red5pro_source_handler_rtc_seekable_NAME, '[hlsvod:action] play (CATCH::FAULT) - ' + e.message);
          }
        } else if (this.hlsElement && percentage >= 1.0) {
          this._isFragLoading = false;
          this._showHLSLivePlayback(false, this.hlsElement, this.media, this.holder);
        }
      } else {
        this.media.currentTime = duration ? percentage * duration : percentage;
      }
    }
  }, {
    key: "toggleFullScreen",
    value: function toggleFullScreen() {
      try {
        if (this.holder) {
          browser.toggleFullScreen(this.holder);
        }
      } catch (e) {
        throw e;
        // nada.
      }
    }

    /**
     * Notification of current stream being in an unpublished state.
     * The stream enters an unpublished state when the broadcaster stop the stream and the subscriber is still connected.
     */
  }, {
    key: "unpublish",
    value: function unpublish() {
      // TODO: Will we ever cycle back to this on playout?
      //        Or just allow users to scrub back even if the broadcast is finished?
      if (!this._pendingUnpublish && this.isHLSPlaybackActive) {
        this._pendingUnpublish = true;
        return;
      }
      try {
        this.stop();
        this.media.onended.call(this.media);
      } catch (e) {
        // nada.
      } finally {
        this._pendingUnpublish = false;
      }
    }

    /**
     * Request to disconnect playback.
     */
  }, {
    key: "disconnect",
    value: function disconnect() {
      this._cleanUp();
    }

    /**
     * Responder to change in orientation received through metadata.
     *
     * @param {Number} orientation
     *        The orientation value.
     *
     * @private
     */
  }, {
    key: "handleOrientationChange",
    value: function handleOrientationChange(orientation) {
      if (this._controls && orientation % 180 !== 0) {
        if (this.holder) {
          this.holder.classList.add('red5pro-media-background');
        }
        this.media.classList.remove('red5pro-media-background');
      }
    }

    /*
     * || SHARED OBJECT INTEGRATION NOT AVAILABLE FOR HLS PLAYBACK ||
     */
    // eslint-disable-next-line no-unused-vars
  }, {
    key: "addSharedObjectResponseHandler",
    value: function addSharedObjectResponseHandler(handler) {}

    // eslint-disable-next-line no-unused-vars
  }, {
    key: "removeSharedObjectResponseHandler",
    value: function removeSharedObjectResponseHandler(handler) {}

    // eslint-disable-next-line no-unused-vars
  }, {
    key: "sendToSharedObject",
    value: function sendToSharedObject(name, callName, message) {}

    // eslint-disable-next-line no-unused-vars
  }, {
    key: "sendPropertyToSharedObject",
    value: function sendPropertyToSharedObject(name, key, value) {}

    // eslint-disable-next-line no-unused-vars
  }, {
    key: "getRemoteSharedObject",
    value: function getRemoteSharedObject(sharedObjectName) {}

    // eslint-disable-next-line no-unused-vars
  }, {
    key: "connectToSharedObject",
    value: function connectToSharedObject(sharedObjectName) {}

    // eslint-disable-next-line no-unused-vars
  }, {
    key: "closeSharedObject",
    value: function closeSharedObject(sharedObjectName) {}

    /**
     * Returns playback controls if available.
     *
     * @returns {PlaybackControls}
     */
  }, {
    key: "getControls",
    value: function getControls() {
      return this._controls;
    }

    /**
     * Returns the subscriber type associated with this controller.
     *
     * @returns {String}
     */
  }, {
    key: "getType",
    value: function getType() {
      return this.playerType;
    }

    /**
     * Returns flag of video being recognized as VOD (Video On Demand).
     *
     * @returns {Boolean}
     */
  }, {
    key: "isVOD",
    get: function get() {
      return false;
    }

    /**
     * Sets flag of video being considered as VOD (Video On Demand).
     *
     * @param {Boolean} value
     */,
    set: function set(value) {
      // swallow
    }
  }, {
    key: "isSeekable",
    get: function get() {
      return this._isSeekable;
    },
    set: function set(value) {
      this._isSeekable = value;
      if (this._controls) {
        this._controls.setAsVOD(value);
      }
    }

    /**
     * Returns flag of current playback state being "scrubbed" (if liveSeek is enabled and not at head time).
     *
     * Setter is private internal.
     *
     * @return Boolean
     */
  }, {
    key: "isHLSPlaybackActive",
    get: function get() {
      return this._isHLSPlaybackActive;
    }
  }]);
  return RTCSeekableSourceHandler;
}(PlaybackController);
/* harmony default export */ var red5pro_source_handler_rtc_seekable = (red5pro_source_handler_rtc_seekable_RTCSeekableSourceHandler);
// CONCATENATED MODULE: ./src/js/helper/message-transport.js
function message_transport_typeof(obj) { "@babel/helpers - typeof"; return message_transport_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, message_transport_typeof(obj); }
function message_transport_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function message_transport_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, message_transport_toPropertyKey(descriptor.key), descriptor); } }
function message_transport_createClass(Constructor, protoProps, staticProps) { if (protoProps) message_transport_defineProperties(Constructor.prototype, protoProps); if (staticProps) message_transport_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function message_transport_toPropertyKey(arg) { var key = message_transport_toPrimitive(arg, "string"); return message_transport_typeof(key) === "symbol" ? key : String(key); }
function message_transport_toPrimitive(input, hint) { if (message_transport_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (message_transport_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function message_transport_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) message_transport_setPrototypeOf(subClass, superClass); }
function message_transport_setPrototypeOf(o, p) { message_transport_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return message_transport_setPrototypeOf(o, p); }
function message_transport_createSuper(Derived) { var hasNativeReflectConstruct = message_transport_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = message_transport_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = message_transport_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return message_transport_possibleConstructorReturn(this, result); }; }
function message_transport_possibleConstructorReturn(self, call) { if (call && (message_transport_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return message_transport_assertThisInitialized(self); }
function message_transport_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function message_transport_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function message_transport_getPrototypeOf(o) { message_transport_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return message_transport_getPrototypeOf(o); }



var message_transport_NAME = 'MessageTransport';

/**
 * Base class for MessageTransport implementations.
 */
var message_transport_MessageTransport = /*#__PURE__*/function (_EventEmitter) {
  message_transport_inherits(MessageTransport, _EventEmitter);
  var _super = message_transport_createSuper(MessageTransport);
  function MessageTransport(name) {
    var _this;
    message_transport_classCallCheck(this, MessageTransport);
    _this = _super.call(this);
    _this._name = name || message_transport_NAME;
    _this._responseHandlers = [];
    _this._asyncTickets = [];
    return _this;
  }

  /**
   * Request to parse JSON from message received over WebSocket.
   *
   * @param {Object} message
   *        String or Object.
   */
  message_transport_createClass(MessageTransport, [{
    key: "getJsonFromSocketMessage",
    value: function getJsonFromSocketMessage(message) {
      try {
        return typeof message.data === 'string' ? JSON.parse(message.data) : message.data;
      } catch (e) {
        log_warn(this._name, 'Could not parse message as JSON. Message= ' + message.data + '. Error= ' + e.message);
      }
      return null;
    }

    /**
     * Adds a response handler to be invoked with `respond()` to message and return a boolean of whether the handler handled the message.
     *
     * @param {Object} handler
     *        Handler object that has the message `respond(message)` on its API.
     */
  }, {
    key: "addResponseHandler",
    value: function addResponseHandler(handler) {
      this._responseHandlers.push(handler);
    }

    /**
     * Responds to messages coming over the WebSocket connection.
     *
     * @param {Object} message
     */
  }, {
    key: "respond",
    value: function respond(message) {
      // eslint-disable-line no-unused-vars
      log_warn(this._name, 'respond() should be overriden.');
    }

    /**
     * Posts request over message layer.
     *
     * @param {Object}
     *        Request object to be turned into JSON string for transport.
     */
  }, {
    key: "post",
    value: function post(request) {
      // eslint-disable-line no-unused-vars
      log_warn(this._name, 'post() should be overriden.');
    }

    /**
     * Request to post data over message layer and receive a call back asynchronously from the server.
     *
     * @param {Object} sendRequest
     */
  }, {
    key: "postAsync",
    value: function postAsync(sendRequest) {
      var p = new DeferredPromise();
      var id = Math.floor(Math.random() * 0x10000).toString(16);
      sendRequest.id = id;
      sendRequest.async = true;
      this._asyncTickets.push({
        id: id,
        promise: p
      });
      this.post(sendRequest);
      return p.promise;
    }

    /**
     * Adds a SharedObject response handler. Handlers are requested to respond to a message in `handleMessageResponse`.
     *
     * @param {Object} handler
     */
  }, {
    key: "addSharedObjectResponseHandler",
    value: function addSharedObjectResponseHandler(handler) {
      this._responseHandlers.push(handler);
    }

    /**
     * Removes a SharedObject response handler.
     *
     * @param {Object} handler
     */
  }, {
    key: "removeSharedObjectResponseHandler",
    value: function removeSharedObjectResponseHandler(handler) {
      var i = this._responseHandlers.length;
      var rHandler;
      while (--i > -1) {
        rHandler = this._responseHandlers[i];
        if (rHandler === handler) {
          this._responseHandlers.splice(i, 1);
          return;
        }
      }
    }

    /**
     * Traverses list of response handlers and returns flag of it being handled within the chain.
     *
     * @param {Object} message
     * @return {Boolean}
     */
  }, {
    key: "handleMessageResponse",
    value: function handleMessageResponse(message) {
      var i, handler;
      var length = this._responseHandlers.length;
      for (i = 0; i < length; i++) {
        handler = this._responseHandlers[i];
        if (handler.respond(message)) {
          return true;
        }
      }
      return false;
    }

    /**
     * Request to get SharedObject from server over WebSocket.
     *
     * @param {String} name
     */
  }, {
    key: "getRemoteSharedObject",
    value: function getRemoteSharedObject(name) {
      this.post({
        sharedObjectGetRemote: {
          name: name
        }
      });
    }

    /**
     * Request to connect to SharedObject from server over WebSocket.
     *
     * @param {String} name
     */
  }, {
    key: "connectToSharedObject",
    value: function connectToSharedObject(name) {
      this.post({
        sharedObjectConnect: {
          name: name
        }
      });
    }

    /**
     * Request to send method call to SharedObject over WebSocket.
     *
     * @param {String} name
     * @param {String} methodName
     * @param {Object} data
     */
  }, {
    key: "sendToSharedObject",
    value: function sendToSharedObject(name, methodName, data) {
      this.post({
        sharedObjectSend: {
          name: name,
          method: methodName,
          message: data
        }
      });
    }

    /**
     * Request to update property on SharedObject over WebSocket.
     *
     * @param {String} name
     * @param {String} key
     * @param {String} value
     */
  }, {
    key: "sendPropertyToSharedObject",
    value: function sendPropertyToSharedObject(name, key, value) {
      this.post({
        sharedObjectSetProperty: {
          name: name,
          key: key,
          value: value
        }
      });
    }

    /**
     * Request to close the SharedObject connection over WebSocket.
     *
     * @param {String} name
     */
  }, {
    key: "closeSharedObject",
    value: function closeSharedObject(name) {
      this.post({
        sharedObjectClose: {
          name: name
        }
      });
    }
  }]);
  return MessageTransport;
}(event_emitter);

// CONCATENATED MODULE: ./src/js/helper/socket-helper.js


function socket_helper_typeof(obj) { "@babel/helpers - typeof"; return socket_helper_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, socket_helper_typeof(obj); }
function socket_helper_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function socket_helper_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, socket_helper_toPropertyKey(descriptor.key), descriptor); } }
function socket_helper_createClass(Constructor, protoProps, staticProps) { if (protoProps) socket_helper_defineProperties(Constructor.prototype, protoProps); if (staticProps) socket_helper_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function socket_helper_toPropertyKey(arg) { var key = socket_helper_toPrimitive(arg, "string"); return socket_helper_typeof(key) === "symbol" ? key : String(key); }
function socket_helper_toPrimitive(input, hint) { if (socket_helper_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (socket_helper_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function socket_helper_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) socket_helper_setPrototypeOf(subClass, superClass); }
function socket_helper_setPrototypeOf(o, p) { socket_helper_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return socket_helper_setPrototypeOf(o, p); }
function socket_helper_createSuper(Derived) { var hasNativeReflectConstruct = socket_helper_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = socket_helper_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = socket_helper_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return socket_helper_possibleConstructorReturn(this, result); }; }
function socket_helper_possibleConstructorReturn(self, call) { if (call && (socket_helper_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return socket_helper_assertThisInitialized(self); }
function socket_helper_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function socket_helper_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function socket_helper_getPrototypeOf(o) { socket_helper_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return socket_helper_getPrototypeOf(o); }





var socket_helper_NAME = 'R5ProSocketProxy';

/**
 * Base Proxy for communication with WebSocket.
 *
 * @private
 */
var socket_helper_SocketHelper = /*#__PURE__*/function (_MessageTransport) {
  socket_helper_inherits(SocketHelper, _MessageTransport);
  var _super = socket_helper_createSuper(SocketHelper);
  function SocketHelper(responder, name) {
    var _this;
    socket_helper_classCallCheck(this, SocketHelper);
    _this = _super.call(this, name || socket_helper_NAME);
    _this._responder = responder;
    _this._pendingPostRequests = [];
    _this._websocket = undefined;
    _this._connectionPromise = undefined;
    _this._responseHandlers = [];
    _this._isTerminated = false;
    _this._retryCount = 0;
    _this._retryLimit = 1;
    _this._readyCheckCount = 0;
    _this._readyCheckLimit = 10;
    _this._openState = 0;
    _this._onclose = _this.tearDown.bind(socket_helper_assertThisInitialized(_this));
    _this._onopenTimeout = 0;
    return _this;
  }
  socket_helper_createClass(SocketHelper, [{
    key: "_resetOnopenTimeout",
    value: function _resetOnopenTimeout(ws, promise) {
      var _this2 = this;
      // const forceReconnect = environment.getIsMoz() || environment.getIsEdge()
      var timeout = setTimeout(function () {
        clearTimeout(timeout);
        if (ws.readyState === 1) {
          info(_this2._name, '[websocketopen]');
          _this2._openState = 1;
          while (_this2._pendingPostRequests.length > 0) {
            _this2.post(_this2._pendingPostRequests.shift());
          }
          if (_this2._responder && _this2._responder.onSocketOpen) {
            _this2._responder.onSocketOpen();
          }
          _this2.trigger(new MessageTransportStateEvent(MessageTransportStateEventTypes.OPEN, _this2._name, {
            socket: _this2
          }));
        } else if (ws.readyState === 0) {
          if (++_this2._readyCheckCount > _this2._readyCheckLimit) {
            log_warn(_this2._name, "WebSocket connection issue. We have waited for ".concat(_this2._readyCheckCount - 1, " samples, without any connection."));
            // If Firefox/Edge, try a second connection attempt or fail.
            /*
            if (forceReconnect && ++this._retryCount < this._retryLimit) {
              warn(this._name, `WebSocket attempting retry...`)
              this._removeSocketHandlers(ws)
              this._onopenTimeout = setTimeout(() => {
                clearTimeout(this._onopenTimeout)
                this.setUp(ws.url, promise)
              }, 2000)
            } else {
              promise.reject({type: 'Timeout'})
            }
            */
            _this2.clearRetry();
            promise.reject({
              type: 'Timeout'
            });
            _this2.tearDown();
          } else {
            info(_this2._name, "WebSocket connection is still opening, will let it continue (".concat(_this2._readyCheckCount, ")..."));
            _this2._onopenTimeout = _this2._resetOnopenTimeout(ws, promise);
          }
        } else {
          info(_this2._name, "WebSocket connection attempts have ended with state (".concat(ws.readyState, ")."));
        }
      }, 500);
      return timeout;
    }

    /**
     * Removes event handlers from WebSocket.
     *
     * @param {WebSocket} ws
     *
     * @private
     */
  }, {
    key: "_removeSocketHandlers",
    value: function _removeSocketHandlers(ws) {
      if (ws) {
        ws.onopen = undefined;
        ws.onmessage = undefined;
        ws.onerror = undefined;
        ws.onclose = undefined;
      }
    }

    /**
     * Assigns event handler to WebSocket.
     *
     * @param {WebSocket} ws
     * @param {Promise}
     *        The `Promise` to reject on error in connection to WebSocket.
     *
     * @private
     */
  }, {
    key: "_addSocketHandlers",
    value: function _addSocketHandlers(ws, promise) {
      var _this3 = this;
      /*
       * Removing this in favor of checking readyState for verification of open.
       *
      ws.onopen = () => {
        info(this._name, '[websocketopen]')
        while (this._pendingPostRequests.length > 0) {
          this.post(this._pendingPostRequests.shift())
        }
      }
      */

      this._openState = 0;
      this._readyCheckCount = 0;
      clearTimeout(this._onopenTimeout);
      this._onopenTimeout = this._resetOnopenTimeout(ws, promise);
      ws.onerror = function (error) {
        log_warn(_this3._name, "[websocketerror]: Error from WebSocket. ".concat(error.type, "."));
        _this3.clearRetry();
        promise.reject(error);
        _this3.trigger(new MessageTransportStateEvent(MessageTransportStateEventTypes.ERROR, _this3._name, {
          socket: _this3,
          error: error
        }));
      };
      ws.onmessage = function (message) {
        _this3.respond(message);
      };
      ws.onclose = function (event) {
        if (event.code > 1000) {
          log_warn(_this3._name, "[websocketclose]: ".concat(event.code));
        } else {
          log_debug(_this3._name, "[websocketclose]: ".concat(event.code));
        }
        if (_this3._responder && _this3._responder.onSocketClose) {
          _this3._responder.onSocketClose(event);
        }
        _this3.clearRetry();
        _this3._removeSocketHandlers(ws || _this3._websocket);
        _this3._openState = 0;
        _this3.trigger(new MessageTransportStateEvent(MessageTransportStateEventTypes.CLOSE, _this3._name, {
          socket: _this3,
          event: event
        }));
      };
    }

    /**
     * Handler for unexpected error through WebSocket.
     *
     * @param {Object} error
     *
     * @private
     */
  }, {
    key: "_onUnexpectedSocketError",
    value: function _onUnexpectedSocketError(error) {
      if (this._responder && this._responder.onSocketClose) {
        this._responder.onSocketClose(error);
      }
      this.trigger(new MessageTransportStateEvent(MessageTransportStateEventTypes.CLOSE, this._name, {
        socket: this
      }));
      log_warn(this._name, "[websocketerror]: Possible Unexpected Error from WebSocket. ".concat(error.type, ", ").concat(error.detail));
      this.clearRetry();
      this._removeSocketHandlers(this._websocket);
    }

    /**
     * Clears the retry count to allow for single publisher to retry again after an unpublish.
     *
     * @private
     */
  }, {
    key: "clearRetry",
    value: function clearRetry() {
      this._retryCount = 0;
      this._readyCheckCount = 0;
      clearTimeout(this._onopenTimeout);
    }

    /**
     * Request to setup WebSocket connection for communication.
     *
     * @param {String} url
     *        Endpoint URL of the socket to connect to.
     * @param {Promise} setupPromise
     *        The `Promise` to resolve or reject on success of setup WebSocket connection.
     */
  }, {
    key: "setUp",
    value: function setUp(url, setupPromise) {
      var _this4 = this;
      var forceReconnect = browser.getIsMoz() || browser.getIsEdge();
      log_debug(this._name, "[websocket:setup] ".concat(url, "."));
      this.tearDown();
      this._isTerminated = false;
      this._connectionPromise = setupPromise;
      browser.addCloseHandler(this._onclose);
      this._websocket = websocket_create(url);
      this._addSocketHandlers(this._websocket, this._connectionPromise);
      if (forceReconnect && this._retryCount++ < this._retryLimit) {
        log_debug(this._name, 'We have determined it is Firefox and are setting up a retry limit.');
        var timeout = setTimeout(function () {
          if (_this4._websocket && _this4._websocket.readyState === 0) {
            log_debug(_this4._name, "[websocket:FF-timeout]");
            log_debug(_this4._name, "Our connection on Firefox to the wss endpoint has timed out. Let's try that again.");
            _this4._removeSocketHandlers(_this4._websocket);
            _this4.setUp(url, setupPromise);
          }
          clearTimeout(timeout);
        }, 2000);
      }
    }

    /**
     * Request to setup WebSocket connection for communication.
     * USE WITH CAUTION. It is assumed you know what you are doing by providing a previously established WebSocket instance.
     *
     * @param {WebSocket} socket
     *        Previously established WebSocket to use for communication and monitoring.
     * @param {Promise} setupPromise
     *        The `Promise` to resolve or reject on success of setup WebSocket connection.
     */
  }, {
    key: "setUpWithSocket",
    value: function setUpWithSocket(socket, setupPromise) {
      log_debug(this._name, "[websocket:setupWithSocket] ".concat(socket.url, "."));
      this.tearDown();
      this._isTerminated = false;
      this._connectionPromise = setupPromise;
      browser.addCloseHandler(this._onclose);
      this._websocket = socket;
      this._addSocketHandlers(this._websocket, this._connectionPromise);
    }

    /**
     * Severs (chops) the connection to the server through a POST request.
     */
  }, {
    key: "sever",
    value: function sever(request) {
      if (this._websocket) {
        log_debug(this._name, '[websocket:sever]');
        if (request) {
          this.post(request);
        }
        this._removeSocketHandlers(this._websocket);
        this.tearDown();
      }
    }

    /**
     * Request to tear down any WebSocket connection.
     */
  }, {
    key: "tearDown",
    value: function tearDown() {
      this._pendingPostRequests.length = 0;
      if (typeof this._websocket !== 'undefined' && !this._isTerminated) {
        log_debug(this._name, '[teardown] >>');
        log_debug(this._name, "[WebSocket(".concat(this._websocket.url, ")] close() >>"));
        //      this._removeSocketHandlers(this._websocket)
        try {
          this._websocket.close();
        } catch (e) {
          log_warn(this._name, "Attempt to close WebSocket failed: ".concat(e.message, "."));
          this._removeSocketHandlers(this._websocket);
        } finally {
          if (this._websocket) {
            log_debug(this._name, "<< [WebSocket(".concat(this._websocket.url, ")] close()"));
          }
        }
        log_debug(this._name, '<< [teardown]');
      }
      this._websocket = undefined;
      this._isTerminated = true;
      this._openState = 0;
      while (this._responseHandlers.length > 0) {
        this._responseHandlers.shift();
      }
      browser.removeCloseHandler(this._onclose);
    }

    /**
     * Request to post notification of end of candidates in WebRTC scenario.
     */
  }, {
    key: "postEndOfCandidates",
    value: function postEndOfCandidates(streamName) {
      this.post({
        handleCandidate: streamName,
        data: {
          candidate: {
            type: 'candidate',
            candidate: ''
          }
        }
      });
    }

    /**
     * Request to post data over WebSocket connection.
     * Queues messages if WebSocket connection is still being established.
     *
     * @param {Object} sendRequest
     */
  }, {
    key: "post",
    value: function post(sendRequest) {
      if (this._websocket !== undefined && this._openState === 1 /* WebSocket.OPEN */) {
        try {
          log_debug(this._name, '[websocket-post]: ' + JSON.stringify(sendRequest, null, 2));
          this._websocket.send(JSON.stringify(sendRequest));
          return true;
        } catch (e) {
          log_debug(this._name, "Could not send request: ".concat(sendRequest, ". ").concat(e));
          return false;
        }
      } else if (this._websocket !== undefined && (this._websocket.readyState === 2 || this._websocket.readyState === 3)) {
        /* WebSocket.(CLOSING | CLOSED) */return false;
      } else if (this._isTerminated) {
        return false;
      } else {
        this._pendingPostRequests.push(sendRequest);
        return true;
      }
    }

    /**
     * Responds to messages coming over the WebSocket connection.
     *
     * @param {Object} message
     */
  }, {
    key: "respond",
    value: function respond(message) {
      // eslint-disable-line no-unused-vars
      var handled = this.handleMessageResponse(message);
      if (!handled && message.data) {
        var json = this.getJsonFromSocketMessage(message);
        if (json === null) {
          log_warn(this._name, 'Determined websocket response not in correct format. Aborting message handle.');
          return true;
        }
        log_debug(this._name, '[websocket-response]: ' + JSON.stringify(json, null, 2));
        if (json.isAvailable !== undefined) {
          if (typeof json.isAvailable === 'boolean' && json.isAvailable) {
            if (this._responder) {
              this._responder.onStreamAvailable(json);
            }
            return true;
          } else {
            if (this._responder) {
              this._responder.onStreamUnavailable(json);
            }
            return true;
          }
        } else if (json.async && json.id) {
          var ticket = this._asyncTickets.find(function (el) {
            return el.id === json.id;
          });
          var promise = ticket.promise;
          if (promise && json.data) {
            promise.resolve(json.data);
          } else if (promise && json.error) {
            promise.reject(json.error);
          }
        } else if (json.data !== undefined) {
          var data = json.data;
          if (data.message !== undefined) {
            if (data.type === 'error' && this._responder) {
              this._responder.onSocketMessageError(data.message, data.detail);
              return true;
            }
          } else if (data.type === 'status') {
            if (data.code === 'NetConnection.Connect.Success') {
              this._websocket.onerror = this._onUnexpectedSocketError.bind(this);
              this._connectionPromise.resolve(this);
              return true;
            } else if (data.code === 'NetConnection.DataChannel.Available') {
              this._responder.onDataChannelAvailable(data.description);
              return true;
            } else if (data.code === 'NetConnection.Connect.Rejected') {
              this._connectionPromise.reject('NetConnection.Connect.Rejected');
              return true;
            }
          } else if (data.type === 'error') {
            if (data.code === 'NetConnection.Connect.Rejected') {
              this._connectionPromise.reject('NetConnection.Connect.Rejected');
              return true;
            } else if (data.code === 'NetConnection.Connect.Failed') {
              this._connectionPromise.reject('NetConnection.Connect.Failed');
              return true;
            }
          }
        }
      }
      return handled;
    }

    /**
     * Returns flag of socket being closed and temrinated.
     *
     * @returns {Boolean}
     */
  }, {
    key: "isTerminated",
    get: function get() {
      return this._isTerminated;
    }
  }]);
  return SocketHelper;
}(message_transport_MessageTransport);
/* harmony default export */ var socket_helper = (socket_helper_SocketHelper);
// CONCATENATED MODULE: ./src/js/helper/socket-helper-sub.js


function socket_helper_sub_typeof(obj) { "@babel/helpers - typeof"; return socket_helper_sub_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, socket_helper_sub_typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = socket_helper_sub_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function socket_helper_sub_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function socket_helper_sub_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, socket_helper_sub_toPropertyKey(descriptor.key), descriptor); } }
function socket_helper_sub_createClass(Constructor, protoProps, staticProps) { if (protoProps) socket_helper_sub_defineProperties(Constructor.prototype, protoProps); if (staticProps) socket_helper_sub_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function socket_helper_sub_toPropertyKey(arg) { var key = socket_helper_sub_toPrimitive(arg, "string"); return socket_helper_sub_typeof(key) === "symbol" ? key : String(key); }
function socket_helper_sub_toPrimitive(input, hint) { if (socket_helper_sub_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (socket_helper_sub_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = socket_helper_sub_getPrototypeOf(object); if (object === null) break; } return object; }
function socket_helper_sub_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) socket_helper_sub_setPrototypeOf(subClass, superClass); }
function socket_helper_sub_setPrototypeOf(o, p) { socket_helper_sub_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return socket_helper_sub_setPrototypeOf(o, p); }
function socket_helper_sub_createSuper(Derived) { var hasNativeReflectConstruct = socket_helper_sub_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = socket_helper_sub_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = socket_helper_sub_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return socket_helper_sub_possibleConstructorReturn(this, result); }; }
function socket_helper_sub_possibleConstructorReturn(self, call) { if (call && (socket_helper_sub_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return socket_helper_sub_assertThisInitialized(self); }
function socket_helper_sub_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function socket_helper_sub_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function socket_helper_sub_getPrototypeOf(o) { socket_helper_sub_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return socket_helper_sub_getPrototypeOf(o); }


 // eslint-disable-line no-unused-vars

var socket_helper_sub_NAME = 'R5ProSubscriptionSocket';

/**
 * Subscriber-based extension of `SocketHelper`.
 *
 * @extends {SocketHelper}
 *
 * @private
 */
var socket_helper_sub_SubscriptionSocketHelper = /*#__PURE__*/function (_SocketHelper) {
  socket_helper_sub_inherits(SubscriptionSocketHelper, _SocketHelper);
  var _super = socket_helper_sub_createSuper(SubscriptionSocketHelper);
  function SubscriptionSocketHelper(responder) {
    socket_helper_sub_classCallCheck(this, SubscriptionSocketHelper);
    return _super.call(this, responder, socket_helper_sub_NAME);
  }

  /**
   * Override to respond to messages coming over WebSocket.
   */
  socket_helper_sub_createClass(SubscriptionSocketHelper, [{
    key: "respond",
    value: function respond(message) {
      if (message.data) {
        var json = this.getJsonFromSocketMessage(message);
        if (!_get(socket_helper_sub_getPrototypeOf(SubscriptionSocketHelper.prototype), "respond", this).call(this, message)) {
          var data = json.data;
          if (data !== undefined) {
            if (json.data.sdp !== undefined) {
              if (json.data.sdp.type === 'offer') {
                this._responder.onSDPOffer(json.data);
                return true;
              }
            }
            if (json.data.candidate !== undefined) {
              if (isObjectEmpty(json.data.candidate)) {
                this._responder.onEmptyCandidate();
                return true;
              } else {
                this._responder.onAddIceCandidate(json.data.candidate);
                return true;
              }
            }
            if (json.data.type === 'status') {
              if (json.data.code === 'NetConnection.ICE.TricleCompleted' || json.data.code === 'NetConnection.ICE.TrickleCompleted') {
                this._responder.onSocketIceCandidateEnd();
                return true;
              } else if (json.data.code === 'NetStream.Play.UnpublishNotify') {
                this._responder.onUnpublish();
                return true;
              } else if (json.data.code === 'NetConnection.Connect.Closed') {
                this._responder.onConnectionClosed();
                return true;
              } else {
                this._responder.onSubscriberStatus(json.data);
                return true;
              }
            }
            if (json.data.hasOwnProperty('status')) {
              if (json.data.status === 'NetStream.Play.UnpublishNotify') {
                this._responder.onUnpublish();
                return true;
              }
            }
            if (data.type === 'result') {
              var _message = data.message;
              if (_message === 'Stream switch: Success') {
                try {
                  this._responder.onStreamSwitchComplete();
                  return true;
                } catch (e) {
                  // not implemented.
                }
              }
            }
            if (json.type !== undefined) {
              if (json.type === 'metadata') {
                // It is a `send` API invocation.
                if (json.method !== undefined) {
                  this._responder.onSendReceived(json.method, json.data);
                  return true;
                } else {
                  this._responder.onMetaData(json.data);
                  return true;
                }
              }
            } else if (json.send !== undefined) {
              var send = json.send,
                senderName = json.senderName,
                dcLabel = json.dcLabel;
              var _data = send.data,
                method = send.method;
              _data = _objectSpread(_objectSpread({}, _data), {}, {
                senderName: senderName,
                dcLabel: dcLabel
              });
              this._responder.onSendReceived(method, _data);
              return true;
            }
          } else if (json.type !== undefined) {
            if (json.type === 'metadata') {
              this._responder.onMetaData(json.metadata);
              return true;
            }
          }
          this._responder.onSocketMessage(this, message);
        }
      } else {
        log_warn(socket_helper_sub_NAME, '[ws.onmessage] - No Message Data.');
      }
    }
  }]);
  return SubscriptionSocketHelper;
}(socket_helper);
/* harmony default export */ var socket_helper_sub = (socket_helper_sub_SubscriptionSocketHelper);
// CONCATENATED MODULE: ./src/js/helper/webrtc-helper.js
function webrtc_helper_typeof(obj) { "@babel/helpers - typeof"; return webrtc_helper_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, webrtc_helper_typeof(obj); }
function webrtc_helper_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function webrtc_helper_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? webrtc_helper_ownKeys(Object(source), !0).forEach(function (key) { webrtc_helper_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : webrtc_helper_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function webrtc_helper_defineProperty(obj, key, value) { key = webrtc_helper_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function webrtc_helper_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function webrtc_helper_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, webrtc_helper_toPropertyKey(descriptor.key), descriptor); } }
function webrtc_helper_createClass(Constructor, protoProps, staticProps) { if (protoProps) webrtc_helper_defineProperties(Constructor.prototype, protoProps); if (staticProps) webrtc_helper_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function webrtc_helper_toPropertyKey(arg) { var key = webrtc_helper_toPrimitive(arg, "string"); return webrtc_helper_typeof(key) === "symbol" ? key : String(key); }
function webrtc_helper_toPrimitive(input, hint) { if (webrtc_helper_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (webrtc_helper_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function webrtc_helper_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) webrtc_helper_setPrototypeOf(subClass, superClass); }
function webrtc_helper_setPrototypeOf(o, p) { webrtc_helper_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return webrtc_helper_setPrototypeOf(o, p); }
function webrtc_helper_createSuper(Derived) { var hasNativeReflectConstruct = webrtc_helper_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = webrtc_helper_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = webrtc_helper_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return webrtc_helper_possibleConstructorReturn(this, result); }; }
function webrtc_helper_possibleConstructorReturn(self, call) { if (call && (webrtc_helper_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return webrtc_helper_assertThisInitialized(self); }
function webrtc_helper_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function webrtc_helper_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function webrtc_helper_getPrototypeOf(o) { webrtc_helper_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return webrtc_helper_getPrototypeOf(o); }





var webrtc_helper_NAME = 'R5ProWebRTCPeer';
var webrtc_helper_WebRTCPeerHelper = /*#__PURE__*/function (_MessageTransport) {
  webrtc_helper_inherits(WebRTCPeerHelper, _MessageTransport);
  var _super = webrtc_helper_createSuper(WebRTCPeerHelper);
  function WebRTCPeerHelper(responder, name) {
    var _this;
    webrtc_helper_classCallCheck(this, WebRTCPeerHelper);
    _this = _super.call(this, name || webrtc_helper_NAME);
    _this._responder = responder;
    _this._dataChannel = undefined;
    _this._peerConnection = undefined;
    _this._onDataChannelMessage = _this._onDataChannelMessage.bind(webrtc_helper_assertThisInitialized(_this));
    return _this;
  }

  /**
   * Remove handlers assigned to the optional data channel on the connection.
   *
   * @param {RTCDataChannel} dataChannel
   */
  webrtc_helper_createClass(WebRTCPeerHelper, [{
    key: "_removeDataChannelHandlers",
    value: function _removeDataChannelHandlers(dataChannel) {
      dataChannel.onopen = undefined;
      dataChannel.onerror = undefined;
      dataChannel.onclose = undefined;
      dataChannel.onmessage = undefined;
    }

    /**
     * Assigns event handlers to the optional data channel on the connection.
     *
     * @param {RTCDataChannel} dataChannel
     */
  }, {
    key: "_addDataChannelHandlers",
    value: function _addDataChannelHandlers(dataChannel) {
      var _this2 = this;
      dataChannel.onerror = function (event) {
        _this2._responder.onDataChannelError(dataChannel, event.error.message);
      };
      dataChannel.onmessage = this._onDataChannelMessage;
      dataChannel.onopen = function () {
        _this2._responder.onDataChannelOpen(dataChannel);
      };
      dataChannel.onclose = function (event) {
        _this2._responder.onDataChannelClose(dataChannel);
        _this2.trigger(new MessageTransportStateEvent(MessageTransportStateEventTypes.CLOSE, _this2._name, {
          socket: _this2,
          event: event
        }));
      };
    }

    /**
     * Removes handlers assigned to the peer connection instance.
     *
     * @param {RTCPeerConnection} connection
     */
    // eslint-disable-next-line no-unused-vars
  }, {
    key: "_removeConnectionHandlers",
    value: function _removeConnectionHandlers(connection) {
      log_warn(this._name, '_removeConnectionHandlers is abstract.');
    }

    /**
     * Assigns handlers to events on the peer connection instance.
     *
     * @param {RTCPeerConnection} connection
     * @param {Promise} promise
     *        The `Promise` to resolve or reject on success of connection.
     */
    // eslint-disable-next-line no-unused-vars
  }, {
    key: "_addConnectionHandlers",
    value: function _addConnectionHandlers(connection, promise) {
      log_warn(this._name, '_addConnectionHandlers is abstract.');
    }

    /**
     * Message event listener on RTCDataChannel
     *
     * @param {Event} event
     *
     * @private
     */
  }, {
    key: "_onDataChannelMessage",
    value: function _onDataChannelMessage(event) {
      var message = event;
      if (this.handleMessageResponse(message)) {
        return true;
      }
      var json = this.getJsonFromSocketMessage(message);
      if (json === null) {
        log_warn(this._name, 'Determined websocket response not in correct format. Aborting message handle.');
        return true;
      }
      log_debug(this._name, '[datachannel-response]: ' + JSON.stringify(json, null, 2));
      var data = json.data,
        method = json.method,
        send = json.send,
        type = json.type,
        id = json.id;
      if (data && data.message && data.type === 'error') {
        this._responder.onDataChannelError(this._dataChannel, data.message);
        return true;
      }
      if (data && data.code && data.type === 'error') {
        this._responder.onDataChannelError(this._dataChannel, data.code);
        return true;
      } else if (method) {
        this._responder.onSendReceived(method, data);
        return true;
      } else if (send) {
        var senderName = json.senderName,
          dcLabel = json.dcLabel;
        var senderData = send.data,
          senderMethod = send.method;
        senderData = webrtc_helper_objectSpread(webrtc_helper_objectSpread({}, senderData), {}, {
          senderName: senderName,
          dcLabel: dcLabel
        });
        this._responder.onSendReceived(senderMethod, senderData);
      } else if (type === 'metadata') {
        this._responder.onMetaData(data);
        return true;
      } else if (data && data.type === 'status') {
        if (data.code === 'NetConnection.Connect.Closed') {
          this._responder.onConnectionClosed();
          return true;
        }
        log_debug(webrtc_helper_NAME, "[datachannel.message] status :: ".concat(data.code));
      } else if (json.async && id) {
        var ticket = this._asyncTickets.find(function (el) {
          return el.id === id;
        });
        var promise = ticket.promise;
        if (promise && json.data) {
          promise.resolve(json.data);
          return true;
        } else if (promise && json.error) {
          promise.reject(json.error);
          return true;
        }
      }
      return false;
    }

    /**
     * Deprecated.
     * Request to setup the proxied Peer Connection instance.
     * Use either `setUp` or `setUpWithPeerConfiguration`.
     *
     * @param {Array} iceServers
     *        List of ICE servers to use in the connection.
     * @param {Promise} setUpPromise
     *        The `Promise` to resolve or reject on in success in setting up the Peer Connection.
     * @param {String} rtcpMuxPolicy
     *        The type of mux policy to use.
     * @return {Promise}
     *
     * @note Marked for deprecation after 5.4.0 release.
     */
  }, {
    key: "setUp",
    value: function setUp(iceServers) {
      var setUpPromise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var rtcpMuxPolicy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      this.tearDown();
      var p = setUpPromise || new DeferredPromise();
      try {
        var peerConfig = {
          iceServers: iceServers,
          iceCandidatePoolSize: 2,
          bundlePolicy: 'max-bundle'
        };
        if (typeof rtcpMuxPolicy !== 'undefined') {
          peerConfig.rtcpMuxPolicy = rtcpMuxPolicy;
        }
        log_debug(webrtc_helper_NAME, "[peerconnection:setup]: ".concat(JSON.stringify(peerConfig, null, 2)));
        var peer = new RTCPeerConnection(peerConfig, {
          optional: [{
            RtpDataChannels: false
          }, {
            googCpuOveruseDetection: true
          }]
        });
        this._addConnectionHandlers(peer);
        this._peerConnection = peer;
        p.resolve(peer);
      } catch (e) {
        log_warn(webrtc_helper_NAME, "Could not establish a PeerConnection. ".concat(e.message));
        p.reject(e.message);
      }
      return p.hasOwnProperty('promise') ? p.promise : p;
    }

    /**
     * Request to setup the proxied Peer Connection instance with defined RTCConfiguration.
     * Use either `setUp` or `setUpWithPeerConfiguration`.
     * https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/RTCPeerConnection#RTCConfiguration_dictionary
     *
     * @param {RTCConfiguration} configuration
     *        A custom RTCConfiguration.
     * @param {Object} dataChannelConfiguration
     *        An object detailing optional data channel configuration options.
     * @param {Promise} setUpPromise
     *        The `Promise` to resolve or reject on in success in setting up the Peer Connection.
     * @return {Promise}
     */
  }, {
    key: "setUpWithPeerConfiguration",
    value: function setUpWithPeerConfiguration(configuration) {
      var dataChannelConfiguration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var setUpPromise = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      this.tearDown();
      var p = setUpPromise || new DeferredPromise();
      try {
        log_debug(webrtc_helper_NAME, "[peerconnection:setUpWithPeerConfiguration]: ".concat(JSON.stringify(configuration, null, 2)));
        var peer = new RTCPeerConnection(configuration);
        if (dataChannelConfiguration) {
          this._dataChannel = peer.createDataChannel(dataChannelConfiguration.name, {
            ordered: true
          });
          this._addDataChannelHandlers(this._dataChannel);
        }
        this._addConnectionHandlers(peer);
        this._peerConnection = peer;
        p.resolve(peer);
      } catch (e) {
        log_warn(webrtc_helper_NAME, "Could not establish a PeerConnection. ".concat(e.message));
        p.reject(e.message);
      }
      return p.hasOwnProperty('promise') ? p.promise : p;
    }

    /**
     * Request to tear down proxied Peer Connection instance.
     */
  }, {
    key: "tearDown",
    value: function tearDown() {
      if (this._dataChannel) {
        this._removeDataChannelHandlers(this._dataChannel);
        try {
          this._dataChannel.close();
        } catch (e) {
          log_warn(webrtc_helper_NAME, "[datachannel.close] error: ".concat(e.message));
        } finally {
          this._dataChannel = undefined;
        }
      }
      if (this._peerConnection) {
        log_debug(webrtc_helper_NAME, '[teardown]');
        this._removeConnectionHandlers(this._peerConnection);
        try {
          this._peerConnection.close();
        } catch (e) {
          log_warn(webrtc_helper_NAME, "[peerconnection.close] error: ".concat(e.message));
        } finally {
          this._peerConnection = undefined;
        }
      }
    }

    /**
     * Request to set local description on the Peer Connection.
     *
     * @param {Object} sessionDescription
     * @return {Promise}
     */
  }, {
    key: "setLocalDescription",
    value: function setLocalDescription(sessionDescription) {
      log_debug(webrtc_helper_NAME, '[setlocaldescription]');
      return this._peerConnection.setLocalDescription(sessionDescription);
    }

    /**
     * Request to set remote description.
     *
     * @param {Object} sdp
     *        The Session Description tot set on the Peer Connection.
     * @return {Promise}
     */
  }, {
    key: "setRemoteDescription",
    value: function setRemoteDescription(sdp) {
      log_debug(webrtc_helper_NAME, '[setremotedescription]');
      return this._peerConnection.setRemoteDescription(new RTCSessionDescription(sdp));
    }

    /**
     * Request to add ICE candidate to Peer Connection.
     *
     * @param {Object} candidate
     * @return {Promise}
     */
  }, {
    key: "addIceCandidate",
    value: function addIceCandidate(candidate) {
      log_debug(webrtc_helper_NAME, '[addcandidate]');
      return this._peerConnection.addIceCandidate(candidate);
    }

    /**
     * Posts request over optional RTCDataChannel.
     *
     * @param {Object}
     *        Request object to be turned into JSON string for transport.
     */
  }, {
    key: "post",
    value: function post(request) {
      if (this._dataChannel) {
        var message = typeof request === 'string' ? request : JSON.stringify(request, null, 2);
        log_debug(webrtc_helper_NAME, "[datachannel.send] message: ".concat(message));
        try {
          this._dataChannel.send(message);
          return true;
        } catch (err) {
          log_error(webrtc_helper_NAME, err.hasOwnProperty('message') ? err.message : err);
        }
      }
      return false;
    }

    /**
     * Accessor for the proxied RTCPeerConnection instance.
     *
     * @return {RTCPeerConnection}
     */
  }, {
    key: "connection",
    get: function get() {
      return this._peerConnection;
    }

    /**
     * Accessor for the optional underlying RTCDataChannel instance.
     *
     * @return {RTCDataChannel}
     */
  }, {
    key: "dataChannel",
    get: function get() {
      return this._dataChannel;
    }
  }]);
  return WebRTCPeerHelper;
}(message_transport_MessageTransport);
/* harmony default export */ var webrtc_helper = (webrtc_helper_WebRTCPeerHelper);
// CONCATENATED MODULE: ./src/js/helper/webrtc-helper-sub.js


function webrtc_helper_sub_typeof(obj) { "@babel/helpers - typeof"; return webrtc_helper_sub_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, webrtc_helper_sub_typeof(obj); }
function webrtc_helper_sub_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function webrtc_helper_sub_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, webrtc_helper_sub_toPropertyKey(descriptor.key), descriptor); } }
function webrtc_helper_sub_createClass(Constructor, protoProps, staticProps) { if (protoProps) webrtc_helper_sub_defineProperties(Constructor.prototype, protoProps); if (staticProps) webrtc_helper_sub_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function webrtc_helper_sub_toPropertyKey(arg) { var key = webrtc_helper_sub_toPrimitive(arg, "string"); return webrtc_helper_sub_typeof(key) === "symbol" ? key : String(key); }
function webrtc_helper_sub_toPrimitive(input, hint) { if (webrtc_helper_sub_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (webrtc_helper_sub_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function webrtc_helper_sub_get() { if (typeof Reflect !== "undefined" && Reflect.get) { webrtc_helper_sub_get = Reflect.get.bind(); } else { webrtc_helper_sub_get = function _get(target, property, receiver) { var base = webrtc_helper_sub_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return webrtc_helper_sub_get.apply(this, arguments); }
function webrtc_helper_sub_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = webrtc_helper_sub_getPrototypeOf(object); if (object === null) break; } return object; }
function webrtc_helper_sub_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) webrtc_helper_sub_setPrototypeOf(subClass, superClass); }
function webrtc_helper_sub_setPrototypeOf(o, p) { webrtc_helper_sub_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return webrtc_helper_sub_setPrototypeOf(o, p); }
function webrtc_helper_sub_createSuper(Derived) { var hasNativeReflectConstruct = webrtc_helper_sub_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = webrtc_helper_sub_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = webrtc_helper_sub_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return webrtc_helper_sub_possibleConstructorReturn(this, result); }; }
function webrtc_helper_sub_possibleConstructorReturn(self, call) { if (call && (webrtc_helper_sub_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return webrtc_helper_sub_assertThisInitialized(self); }
function webrtc_helper_sub_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function webrtc_helper_sub_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function webrtc_helper_sub_getPrototypeOf(o) { webrtc_helper_sub_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return webrtc_helper_sub_getPrototypeOf(o); }





var webrtc_helper_sub_NAME = 'R5ProSubscriptionPeer';

/**
 * Utility to check if candidate is empty, and considered the end of the trickle negotiation for a subscriber.
 *
 * @param {Object} candidate
 *
 * @private
 */
var isEmptyCandidate = function isEmptyCandidate(candidate) {
  return typeof candidate === 'undefined' || typeof candidate === 'string' && candidate.length === 0;
};

/**
 * Proxy to Peer Connection for Subscribers.
 *
 * @private
 */
var webrtc_helper_sub_SubscriptionPeerHelper = /*#__PURE__*/function (_WebRTCPeerHelper) {
  webrtc_helper_sub_inherits(SubscriptionPeerHelper, _WebRTCPeerHelper);
  var _super = webrtc_helper_sub_createSuper(SubscriptionPeerHelper);
  function SubscriptionPeerHelper(responder) {
    webrtc_helper_sub_classCallCheck(this, SubscriptionPeerHelper);
    return _super.call(this, responder, webrtc_helper_sub_NAME);
  }

  /**
   * Removes handlers assigned to the peer connection instance.
   *
   * @param {RTCPeerConnection} connection
   *
   * @private
   */
  webrtc_helper_sub_createClass(SubscriptionPeerHelper, [{
    key: "_removeConnectionHandlers",
    value: function _removeConnectionHandlers(connection) {
      connection.onconnectionstatechange = undefined;
      connection.oniceconnectionstatechange = undefined;
      connection.onicecandidate = undefined;
      //    connection.onaddstream = undefined
      connection.ontrack = undefined;
      connection.ondatachannel = undefined;
    }

    /**
     * Assigns handlers to events on the peer connection instance.
     *
     * @param {RTCPeerConnection} connection
     * @param {Promise} promise
     *        The `Promise` to resolve or reject on success of connection.
     *
     *  @private
     */
  }, {
    key: "_addConnectionHandlers",
    value: function _addConnectionHandlers(connection, promise) {
      var _this = this;
      var reconnectTimeout;
      var timeoutLimit = 5000;
      connection.onconnectionstatechange = function () {
        log_debug(webrtc_helper_sub_NAME, "[peer.onconnectionstatechange] - State: ".concat(connection.connectionState));
        if (connection.connectionState === 'connected') {
          log_debug(webrtc_helper_sub_NAME, '[peerconnection:open]');
          if (promise) {
            promise.resolve(_this);
          } else {
            _this._responder.onPeerConnectionOpen();
          }
        } else if (connection.connectionState === 'failed' || connection.connectionState === 'disconnected') {
          log_warn(webrtc_helper_sub_NAME, '[peerconnection:error]');
          if (promise) {
            promise.reject();
          }
        }
      };
      connection.onicecandidate = function (event) {
        log_debug(webrtc_helper_sub_NAME, "[peer.onicecandidate] - Peer Candidate: ".concat(event.candidate));
        if (event.candidate) {
          _this._responder.onIceCandidate(event.candidate);
        } else if (event.candidate === null && _this._pendingMediaStream) {
          // null means they have finished sending candidates back and forth?
          _this._responder.onIceCandidateTrickleEnd(_this._pendingMediaStream);
          _this._pendingMediaStream = undefined;
        }
      };

      /*
      connection.onaddstream = (event) => {
        debug(NAME, `(onaddstream) Peer Add Stream: ${event.stream}`)
        if (event.stream && this._pendingMediaStream === undefined) {
          this._pendingMediaStream = event.stream
          this._responder.onAnswerMediaStream(event.stream)
        }
      }
      */

      // Picked up by Firefox, all others TCe `onaddstream`, but adapter.js will call both, so we limit.
      connection.ontrack = function (event) {
        log_debug(webrtc_helper_sub_NAME, "(ontrack) Peer Add Stream: ".concat(event.streams));
        if (event.streams && event.streams.length > 0 && _this._pendingMediaStream === undefined) {
          _this._pendingMediaStream = event.streams[0];
          _this._responder.onAnswerMediaStream(event.streams[0]);
        }
      };
      connection.oniceconnectionstatechange = function (event) {
        var state = connection.iceConnectionState;
        log_debug(webrtc_helper_sub_NAME, "[peer.oniceconnectionstatechange] - State: ".concat(state));
        if (state === 'connected' && browser.getIsEdge()) {
          // Support for ORTC order of candidates.
          // Typically this will be invoked from a `onicegatheringstatechange` event on the Connection.
          // Edge doesn't notify on that event.
          log_debug(webrtc_helper_sub_NAME, '[edge/ortc:notify complete]');
          _this._responder.onPeerGatheringComplete();
          // Trick for edge to receive null candidate and start playback.
          // TODO: Fix me?
          connection.onicecandidate({
            candidate: null
          });
        } else if (state === 'failed') {
          if (reconnectTimeout) {
            clearTimeout(reconnectTimeout);
          }
          _this._responder.onPeerConnectionFail();
          _this._responder.onPeerConnectionClose(event);
        } else if (state === 'disconnected') {
          // may receive a disconnect temporarily that will then return to a connection.
          reconnectTimeout = setTimeout(function () {
            log_debug(webrtc_helper_sub_NAME, "[peer.oniceconnectionstatechange] - Reconnect timeout reached. Closing PeerConnection.");
            clearTimeout(reconnectTimeout);
            _this._responder.onPeerConnectionClose(event);
          }, timeoutLimit);
        } else {
          if (reconnectTimeout) {
            log_debug(webrtc_helper_sub_NAME, "[peer.oniceconnectionstatechange] - Clearing timeout for reconnect.");
            clearTimeout(reconnectTimeout);
          }
        }
      };
      connection.onicegatheringstatechange = function () {
        var state = connection.iceGatheringState;
        log_debug(webrtc_helper_sub_NAME, "[peer.onicegatheringstatechange] - State: ".concat(state));
        if (state === 'complete') {
          _this._responder.onPeerGatheringComplete();
        }
      };
      connection.onremovestream = function () {
        log_debug(webrtc_helper_sub_NAME, "[peer.onremovestream]");
      };
    }

    /**
     * Message event listener on RTCDataChannel
     *
     * @param {Event} event
     *
     * @private
     */
  }, {
    key: "_onDataChannelMessage",
    value: function _onDataChannelMessage(event) {
      var message = event;
      if (webrtc_helper_sub_get(webrtc_helper_sub_getPrototypeOf(SubscriptionPeerHelper.prototype), "_onDataChannelMessage", this).call(this, event)) {
        return true;
      }
      var json = this.getJsonFromSocketMessage(message);
      if (json === null) {
        log_warn(this._name, 'Determined websocket response not in correct format. Aborting message handle.');
        return true;
      }
      log_debug(this._name, '[datachannel-response]: ' + JSON.stringify(json, null, 2));
      var data = json.data;
      if (data && data.type === 'status') {
        if (data.code === 'NetStream.Play.UnpublishNotify') {
          this._responder.onUnpublish();
          this._responder.onConnectionClosed();
          return true;
        }
        log_debug(webrtc_helper_sub_NAME, "[datachannel.message] status :: ".concat(data.code));
        this._responder.onSubscriberStatus(data);
        return true;
      } else if (data && data.status && data.status === 'NetStream.Play.UnpublishNotify') {
        this._responder.onUnpublish();
        this._responder.onConnectionClosed();
        return true;
      } else if (data.type === 'result') {
        var _message = data.message;
        if (_message === 'Stream switch: Success') {
          try {
            this._responder.onStreamSwitchComplete();
            return true;
          } catch (e) {
            // not implemented.
          }
        }
      }
      this._responder.onDataChannelMessage(this._dataChannel, message);
      return false;
    }

    /**
     * Request to create answer on Peer Connection.
     *
     * @param {Object} sdp
     *        The Session Description to set as remote description.
     * @return {Promise}
     */
  }, {
    key: "createAnswer",
    value: function createAnswer(sdp) {
      var _this2 = this;
      log_debug(webrtc_helper_sub_NAME, '[createanswer]');
      var deferred = new DeferredPromise();
      this._peerConnection.setRemoteDescription(sdp).then(this._responder.onSDPSuccess)["catch"](function (err) {
        _this2._responder.onSDPError(err);
      });
      // here the answer sdp has to be munged or stereo from the offer wont be enabled in chrome
      this._peerConnection.createAnswer().then(function (sessionDescription) {
        sessionDescription.sdp = forceStereoOnLocalAnswer(sessionDescription.sdp);
        _this2._peerConnection.setLocalDescription(sessionDescription).then(_this2._responder.onSDPSuccess)["catch"](function (err) {
          _this2._responder.onSDPError(err);
        });
        deferred.resolve(sessionDescription);
      })["catch"](deferred.reject);
      return deferred.promise;
    }

    /**
     * Request to add ICE candidate to Peer Connection.
     *
     * @param {Object} candidate
     * @return {Promise}
     */
  }, {
    key: "addIceCandidate",
    value: function addIceCandidate(candidate) {
      log_debug(webrtc_helper_sub_NAME, 'checking if empty...');
      if (isEmptyCandidate(candidate)) {
        log_debug(webrtc_helper_sub_NAME, '[addicecandidate]:: empty');
      } else if (candidate !== null) {
        log_debug(webrtc_helper_sub_NAME, '[addicecandidate] :: non-empty');
        var iceCandidate = new RTCIceCandidate({
          sdpMLineIndex: candidate.sdpMLineIndex,
          candidate: candidate.candidate
        });
        this._peerConnection.addIceCandidate(iceCandidate).then(function () {
          // nada
        })["catch"](function (err) {
          log_error(webrtc_helper_sub_NAME, "Error in add of ICE Candidiate + ".concat(err));
        });
      } else {
        log_debug(webrtc_helper_sub_NAME, '[addicecandidate] :: null');
        this._peerConnection.addIceCandidate(candidate).then(function () {
          // nada
        })["catch"](function (err) {
          log_error(webrtc_helper_sub_NAME, "Error in add of ICE Candidiate + ".concat(err));
        });
      }
    }
  }]);
  return SubscriptionPeerHelper;
}(webrtc_helper);
/* harmony default export */ var webrtc_helper_sub = (webrtc_helper_sub_SubscriptionPeerHelper);
// CONCATENATED MODULE: ./src/js/view/playback.js


function playback_typeof(obj) { "@babel/helpers - typeof"; return playback_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, playback_typeof(obj); }
function playback_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function playback_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, playback_toPropertyKey(descriptor.key), descriptor); } }
function playback_createClass(Constructor, protoProps, staticProps) { if (protoProps) playback_defineProperties(Constructor.prototype, protoProps); if (staticProps) playback_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function playback_toPropertyKey(arg) { var key = playback_toPrimitive(arg, "string"); return playback_typeof(key) === "symbol" ? key : String(key); }
function playback_toPrimitive(input, hint) { if (playback_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (playback_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var playback_NAME = 'R5ProPlaybackView';
var playbackId = 'red5pro-subscriber';

/**
 * Bridge between DOM Element view and Subscriber implementation.
 * Still used, but internalized as of 4.0.0. Up for deprecation, up for discussion.
 *
 * @private
 */
var playback_PlaybackView = /*#__PURE__*/function () {
  /**
   * @param {String} elementId
   *        The element `id` to use for playback display.
   *
   * @private
   */
  function PlaybackView() {
    var elementId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : playbackId;
    playback_classCallCheck(this, PlaybackView);
    try {
      // Target video/audio element.
      this._targetElement = browser.resolveElement(elementId);
    } catch (e) {
      log_error(playback_NAME, "Could not instantiate a new instance of Red5ProSubscriber. Reason: ".concat(e.message));
      throw e;
    }
  }

  /**
   * Associates Subscriber instance with this view manager.
   *
   * @param {Object} subscriber
   *        The Subscriber instance.
   *
   * @private
   */
  playback_createClass(PlaybackView, [{
    key: "attachSubscriber",
    value: function attachSubscriber(subscriber) {
      log_debug(playback_NAME, '[attachsubscriber]');
      subscriber.setView(this, browser.getElementId(this._targetElement));
    }

    /**
     * Assign the `MediaStream` object to the view.
     *
     * @param {MediaStream} mediaStream
     *
     * @private
     */
  }, {
    key: "attachStream",
    value: function attachStream(mediaStream) {
      var autoplay = this.isAutoplay;
      log_debug(playback_NAME, '[attachstream]');
      browser.setVideoSource(this._targetElement, mediaStream, autoplay);
    }

    /**
     * Removes the `MediaStream` object from the view.
     *
     * @private
     */
  }, {
    key: "detachStream",
    value: function detachStream() {
      log_debug(playback_NAME, '[detachstream]');
      browser.setVideoSource(this._targetElement, null, this.isAutoplay);
    }

    /**
     * Returns recognized `autoplay` attribute on the DOM element.
     *
     * @private
     */
  }, {
    key: "isAutoplay",
    get: function get() {
      return browser.hasAttributeDefined(this._targetElement, 'autoplay');
    }

    /**
     * Returns the DOM element.
     *
     * @private
     */
  }, {
    key: "view",
    get: function get() {
      return this._targetElement;
    }
  }]);
  return PlaybackView;
}();
/* harmony default export */ var playback = (playback_PlaybackView);
// CONCATENATED MODULE: ./src/js/util/url-endpoint.js


/**
 * Recent changes have moved the WebSocket port of the server to 5080 or 443.
 * Our previous recommendation was to use 8081 or 8083.
 *
 * This is for backward compatibility and should be upgraded to DEPRECATION.
 *
 * @private
 */
var getBackgroundCompatWebSocketPort = function getBackgroundCompatWebSocketPort(port) {
  switch (port) {
    case 8083:
    case '8083':
      console.warn('The default WebSocket port on the server has changed from 8083 to 443 for secure connections.'); // eslint-disable-line no-console
      return 443;
    case 8081:
    case '8081':
      console.warn('The default WebSocket port on the server has changed from 8081 to 5080 or 80 for secure connections.'); // eslint-disable-line no-console
      return 5080;
  }
  return port;
};

/**
 * Encode the value of each key and return a new object.
 *
 * @param {Object} valueObject
 *        The object whose values should be encoded.
 * @return {Object}
 *
 * @private
 */
var encodeKeyValues = function encodeKeyValues(valueObject) {
  var encoded = {};
  Object.keys(valueObject).forEach(function (key, index) {
    // eslint-disable-line no-unused-vars
    encoded[key] = encodeURIComponent(valueObject[key]);
  });
  return encoded;
};

/**
 * Construct endpoint to use for WebSocket connection based on configuration object and optional params to append to query.
 *
 * @param {Object} options
 *        The configuration options provided in `init()` of WebRTC based publisher or subscriber.
 * @param {Object} params
 *        The optional params to append to the endpoint. Used by server in connection parse.
 * @private
 */
var rtcSocketEndpointFromOptions = function rtcSocketEndpointFromOptions(options) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  var protocol = options.wsprotocol || options.protocol;
  var port = getBackgroundCompatWebSocketPort(options.wsport || options.port);
  var appEndpoint = options.context ? [options.app, options.context].join('/') : options.app;
  var endpoint = "".concat(protocol, "://").concat(options.host, ":").concat(port, "/").concat(appEndpoint, "/");
  if (typeof options.connectionParams !== 'undefined') {
    var encodedParams = encodeKeyValues(options.connectionParams);
    params = Object.assign(params, encodedParams);
  }
  if (typeof params !== 'undefined') {
    var kv = [];
    Object.keys(params).forEach(function (key, index) {
      // eslint-disable-line no-unused-vars
      kv.push([key, params[key]].join('='));
    });
    if (kv.length > 0) {
      endpoint += '?' + kv.join('&');
    }
  }
  return endpoint;
};

/**
 * Construct endpoint to use for WebSocket connection based on configuration object and optional params to append to query.
 * This allows for such things as authentication prior to request of playback of HLS file.
 * Requires a `socketParams` attribute in the init configuration that describe the WebSocket endpoint to make the request on.
 *
 * @param {Object} options
 *        The configuration options provided in `init()` of HLS based subscriber.
 * @param {Object} params
 *        The optional params to append to the endpoint. Used by server in connection parse.
 *
 * @example
 *  var subscriber = new HLSubscriber()
 *  subscriber.init({
 *    protocol: 'https',
 *    host: 'mycompany.org',
 *    app: 'live',
 *    streamName: 'mystream',
 *    socketParams: {
 *      protocol: 'wss',
 *      host: 'mycompany.org',
 *      app: 'live'
 *    },
 *    connectionParams: {
 *      user: 'foo',
 *      password: 'bar'
 *    }
 *  })
 * @private
 */
var hlsSocketEndpointFromOptions = function hlsSocketEndpointFromOptions(options) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  var socketParams = options.socketParams,
    connectionParams = options.connectionParams;
  var protocol = socketParams.protocol;
  var port = getBackgroundCompatWebSocketPort(socketParams.port || (protocol === 'wss' ? 443 : 5080));
  var endpoint = "".concat(protocol, "://").concat(socketParams.host, ":").concat(port, "/").concat(socketParams.app, "/");
  if (connectionParams) {
    var encodedParams = encodeKeyValues(options.connectionParams);
    params = Object.assign(params, encodedParams);
  }
  if (params) {
    var kv = [];
    Object.keys(params).forEach(function (key, index) {
      // eslint-disable-line no-unused-vars
      kv.push([key, params[key]].join('='));
    });
    if (kv.length > 0) {
      endpoint += '?' + kv.join('&');
    }
  }
  return endpoint;
};

/**
 * Util to return the endpoint for an HLS video file.
 *
 * @param {Object} options
 *        The initialization object.
 * @return {String}
 *
 * @private
 */
var optionsToHlsURL = function optionsToHlsURL(options) {
  var host = options.host,
    hlsprotocol = options.hlsprotocol,
    protocol = options.protocol,
    hlsport = options.hlsport,
    port = options.port,
    context = options.context,
    app = options.app,
    streamName = options.streamName,
    connectionParams = options.connectionParams,
    apiVersion = options.apiVersion;
  var theHost = host;
  var theProtocol = hlsprotocol || (protocol === 'ws' ? 'http' : 'https');
  var thePort = hlsport || (port === 5080 ? 5080 : 443);
  var appEndpoint = context ? [app, context].join('/') : app;
  var theVersion = apiVersion || '4.0';
  if (connectionParams && app === 'streammanager') {
    // https://streammanager.red5pro.cloud/streammanager/api/4.0/file/{app_name}/{stream_name}
    return "".concat(theProtocol, "://").concat(theHost, ":").concat(thePort, "/streammanager/api/").concat(theVersion, "/file/").concat(connectionParams.app, "/").concat(streamName, ".m3u8");
  }
  return "".concat(theProtocol, "://").concat(theHost, ":").concat(thePort, "/").concat(appEndpoint, "/").concat(streamName, ".m3u8");
};
var optionsFromWhipWhepUrl = function optionsFromWhipWhepUrl(url) {
  // http://10.0.0.35:5080/live/whip/endpoint/stream1
  var host, protocol, port, app, streamName;
  var pattern = new URL(url);
  var paths = pattern.pathname.split('/').filter(function (p) {
    return p.length > 0;
  });
  protocol = pattern.protocol;
  host = pattern.hostname;
  port = pattern.port.length > 0 ? pattern.port : 443;
  app = paths[0];
  streamName = paths[paths.length - 1];
  return {
    protocol: protocol,
    port: port,
    app: app,
    host: host,
    streamName: streamName
  };
};

/**
 * Util to return the full URL endpoint for an HLS video file used in live seek playback.
 *
 * @param {Object} options
 *        The initialization object.
 * @param {string} baseURL
 *        The optional base URL.
 * @param {string} fullURL
 *        The optional full path URL.
 * @return {String}
 *
 * @private
 */
var optionsToLiveSeekURL = function optionsToLiveSeekURL(options, baseURL, fullURL) {
  var host = options.host,
    hlsprotocol = options.hlsprotocol,
    protocol = options.protocol,
    hlsport = options.hlsport,
    port = options.port,
    context = options.context,
    app = options.app,
    streamName = options.streamName;
  var theHost = host;
  var theProtocol = hlsprotocol || (protocol === 'ws' ? 'http' : 'https');
  var thePort = hlsport || (port === 5080 ? 5080 : 443);
  var appEndpoint = context ? [app, context].join('/') : app;
  // If provided full path, return untouched.
  if (fullURL) {
    return fullURL;
  }
  // If provided in config, use to construct url.
  if (baseURL) {
    var endIndex = baseURL.length - 1;
    var base = baseURL.charAt(endIndex) === '/' ? baseURL.substr(0, endIndex) : baseURL;
    return "".concat(base, "/").concat(appEndpoint, "/").concat(streamName, ".m3u8");
  }
  // Else default to being on host...
  return "".concat(theProtocol, "://").concat(theHost, ":").concat(thePort, "/").concat(appEndpoint, "/").concat(streamName, ".m3u8");
};
// CONCATENATED MODULE: ./src/js/enum/playback.js
/**
 * Enumeration of Playback Types.
 */
var PlaybackTypes = Object.freeze({
  RTC: 'rtc',
  RTMP: 'rtmp',
  HLS: 'hls'
});

/**
 * Enumeration of Audio Encoder types to request for Playback
 */
var PlaybackAudioEncoder = Object.freeze({
  OPUS: 'Opus',
  PCMU: 'PCMU',
  PCMA: 'PCMA',
  SPEEX: 'Speex',
  NONE: 'NONE'
});

/**
 * Enumeration of Video Encoder types to request for Playback.
 */
var PlaybackVideoEncoder = Object.freeze({
  VP8: 'VP8',
  H264: 'H264',
  NONE: 'NONE'
});
// CONCATENATED MODULE: ./src/js/enum/webrtc.js
/**
 * Enumeration of Support ICE Transport types.
 */
var IceTransportTypes = Object.freeze({
  UDP: 'udp',
  TCP: 'tcp'
});

/**
 * Enumeration of Transform Frame types used during utilization of Insertable Streams.
 * 
 * BUFFER: Will pass an ArrayBuffer of data to the transform function specified.
 * PACKET: Will pass either a VideoFrame or AudioData to the transform function specified.
 */
var TransformFrameTypes = Object.freeze({
  ENCODED_FRAME: 'EncodedFrame',
  PACKET: 'Packet'
});

/**
 * Enumeration of default encode operation types that are passed to Web Worker process messaging
 * when utilizing transforms for Insertable Streams.
 */
var EncodeWorkerOperations = Object.freeze({
  VIDEO: 'encodeVideo',
  AUDIO: 'encodeAudio'
});

/**
 * Enumeration of default decode operation types that are passed to Web Worker process messaging
 * when utilizing transforms for Insertable Streams.
 */
var DecodeWorkerOperations = Object.freeze({
  VIDEO: 'decodeVideo',
  AUDIO: 'decodeAudio'
});
// CONCATENATED MODULE: ./src/js/util/media-transform-pipeline.js
function media_transform_pipeline_typeof(obj) { "@babel/helpers - typeof"; return media_transform_pipeline_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, media_transform_pipeline_typeof(obj); }
function media_transform_pipeline_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ media_transform_pipeline_regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == media_transform_pipeline_typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function media_transform_pipeline_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function media_transform_pipeline_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { media_transform_pipeline_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { media_transform_pipeline_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }



var media_transform_pipeline_debug = function debug(message) {
  log_debug('MediaTransformPipeline', message);
};
var PipeVideoSender = /*#__PURE__*/function () {
  var _ref = media_transform_pipeline_asyncToGenerator( /*#__PURE__*/media_transform_pipeline_regeneratorRuntime().mark(function _callee(options, sender, mediaStream) {
    var video, worker, workerOperationType, transformFrameType, pipeOptions, frameType, operationType;
    return media_transform_pipeline_regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          video = options.video, worker = options.worker, workerOperationType = options.workerOperationType, transformFrameType = options.transformFrameType, pipeOptions = options.pipeOptions;
          frameType = transformFrameType || TransformFrameTypes.BUFFER;
          operationType = workerOperationType || EncodeWorkerOperations.VIDEO;
          if (!video) {
            _context.next = 12;
            break;
          }
          media_transform_pipeline_debug('[track.insertablestream]::video');
          if (!(frameType === TransformFrameTypes.PACKET)) {
            _context.next = 9;
            break;
          }
          return _context.abrupt("return", pipeGeneratorTransform(mediaStream.getVideoTracks()[0], video, pipeOptions));
        case 9:
          return _context.abrupt("return", pipeSenderTransform(sender, video, pipeOptions));
        case 10:
          _context.next = 19;
          break;
        case 12:
          if (!(worker && worker.video)) {
            _context.next = 19;
            break;
          }
          media_transform_pipeline_debug('[track.insertablestream]::worker(encode video)');
          if (!(frameType === TransformFrameTypes.PACKET)) {
            _context.next = 18;
            break;
          }
          return _context.abrupt("return", pipeGeneratorWorker(operationType, mediaStream.getVideoTracks()[0], worker.video, pipeOptions));
        case 18:
          return _context.abrupt("return", pipeSenderWorker(operationType, sender, worker.video, pipeOptions));
        case 19:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function PipeVideoSender(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
var PipeVideoReceiver = /*#__PURE__*/function () {
  var _ref2 = media_transform_pipeline_asyncToGenerator( /*#__PURE__*/media_transform_pipeline_regeneratorRuntime().mark(function _callee2(options, receiver, track) {
    var video, worker, workerOperationType, transformFrameType, pipeOptions, frameType, operationType;
    return media_transform_pipeline_regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          video = options.video, worker = options.worker, workerOperationType = options.workerOperationType, transformFrameType = options.transformFrameType, pipeOptions = options.pipeOptions;
          frameType = transformFrameType || TransformFrameTypes.BUFFER;
          operationType = workerOperationType || DecodeWorkerOperations.VIDEO;
          if (!video) {
            _context2.next = 12;
            break;
          }
          media_transform_pipeline_debug('[track.insertablestream]::video');
          if (!(frameType === TransformFrameTypes.PACKET)) {
            _context2.next = 9;
            break;
          }
          return _context2.abrupt("return", pipeGeneratorTransform(track, video, pipeOptions));
        case 9:
          return _context2.abrupt("return", pipeReceiverTransform(receiver, video, pipeOptions));
        case 10:
          _context2.next = 19;
          break;
        case 12:
          if (!(worker && worker.video)) {
            _context2.next = 19;
            break;
          }
          media_transform_pipeline_debug('[track.insertablestream]::worker(decode video)');
          if (!(frameType === TransformFrameTypes.PACKET)) {
            _context2.next = 18;
            break;
          }
          return _context2.abrupt("return", pipeGeneratorWorker(operationType, track, worker.video, pipeOptions));
        case 18:
          return _context2.abrupt("return", pipeReceiverWorker(operationType, receiver, worker.video, pipeOptions));
        case 19:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function PipeVideoReceiver(_x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();
var PipeAudioSender = /*#__PURE__*/function () {
  var _ref3 = media_transform_pipeline_asyncToGenerator( /*#__PURE__*/media_transform_pipeline_regeneratorRuntime().mark(function _callee3(options, sender, mediaStream) {
    var audio, worker, workerOperationType, transformFrameType, pipeOptions, frameType, operationType;
    return media_transform_pipeline_regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          audio = options.audio, worker = options.worker, workerOperationType = options.workerOperationType, transformFrameType = options.transformFrameType, pipeOptions = options.pipeOptions;
          frameType = transformFrameType || TransformFrameTypes.BUFFER;
          operationType = workerOperationType || EncodeWorkerOperations.AUDIO;
          if (!audio) {
            _context3.next = 12;
            break;
          }
          media_transform_pipeline_debug('[track.insertablestream]::audio');
          if (!(frameType === TransformFrameTypes.PACKET && supportsMediaGenerator)) {
            _context3.next = 9;
            break;
          }
          return _context3.abrupt("return", pipeGeneratorTransform(mediaStream.getAudioTracks()[0], audio, pipeOptions));
        case 9:
          return _context3.abrupt("return", pipeSenderTransform(sender, audio, pipeOptions));
        case 10:
          _context3.next = 19;
          break;
        case 12:
          if (!(worker && worker.audio)) {
            _context3.next = 19;
            break;
          }
          media_transform_pipeline_debug('[track.insertablestream]::worker(encode audio)');
          if (!(frameType === TransformFrameTypes.PACKET && supportsMediaGenerator)) {
            _context3.next = 18;
            break;
          }
          return _context3.abrupt("return", pipeGeneratorWorker(operationType, mediaStream.getAudioTracks()[0], worker.audio, pipeOptions));
        case 18:
          return _context3.abrupt("return", pipeSenderWorker(operationType, sender, worker.audio, pipeOptions));
        case 19:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function PipeAudioSender(_x7, _x8, _x9) {
    return _ref3.apply(this, arguments);
  };
}();
var PipeAudioReceiver = /*#__PURE__*/function () {
  var _ref4 = media_transform_pipeline_asyncToGenerator( /*#__PURE__*/media_transform_pipeline_regeneratorRuntime().mark(function _callee4(options, receiver, track) {
    var audio, worker, workerOperationType, transformFrameType, pipeOptions, frameType, operationType;
    return media_transform_pipeline_regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          audio = options.audio, worker = options.worker, workerOperationType = options.workerOperationType, transformFrameType = options.transformFrameType, pipeOptions = options.pipeOptions;
          frameType = transformFrameType || TransformFrameTypes.BUFFER;
          operationType = workerOperationType || DecodeWorkerOperations.AUDIO;
          if (!audio) {
            _context4.next = 12;
            break;
          }
          media_transform_pipeline_debug('[track.insertablestream]::audio');
          if (!(frameType === TransformFrameTypes.PACKET)) {
            _context4.next = 9;
            break;
          }
          return _context4.abrupt("return", pipeGeneratorTransform(track, audio, pipeOptions));
        case 9:
          return _context4.abrupt("return", pipeReceiverTransform(receiver, audio, pipeOptions));
        case 10:
          _context4.next = 19;
          break;
        case 12:
          if (!(worker && worker.audio)) {
            _context4.next = 19;
            break;
          }
          media_transform_pipeline_debug('[track.insertablestream]::worker(decode audio)');
          if (!(frameType === TransformFrameTypes.PACKET)) {
            _context4.next = 18;
            break;
          }
          return _context4.abrupt("return", pipeGeneratorWorker(operationType, track, worker.audio, pipeOptions));
        case 18:
          return _context4.abrupt("return", pipeReceiverWorker(operationType, receiver, worker.audio, pipeOptions));
        case 19:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return function PipeAudioReceiver(_x10, _x11, _x12) {
    return _ref4.apply(this, arguments);
  };
}();
// CONCATENATED MODULE: ./src/js/subscriber/red5pro-rtc.js


function red5pro_rtc_typeof(obj) { "@babel/helpers - typeof"; return red5pro_rtc_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, red5pro_rtc_typeof(obj); }
function red5pro_rtc_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function red5pro_rtc_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? red5pro_rtc_ownKeys(Object(source), !0).forEach(function (key) { red5pro_rtc_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : red5pro_rtc_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function red5pro_rtc_defineProperty(obj, key, value) { key = red5pro_rtc_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function red5pro_rtc_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ red5pro_rtc_regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == red5pro_rtc_typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function red5pro_rtc_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function red5pro_rtc_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { red5pro_rtc_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { red5pro_rtc_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function red5pro_rtc_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function red5pro_rtc_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, red5pro_rtc_toPropertyKey(descriptor.key), descriptor); } }
function red5pro_rtc_createClass(Constructor, protoProps, staticProps) { if (protoProps) red5pro_rtc_defineProperties(Constructor.prototype, protoProps); if (staticProps) red5pro_rtc_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function red5pro_rtc_toPropertyKey(arg) { var key = red5pro_rtc_toPrimitive(arg, "string"); return red5pro_rtc_typeof(key) === "symbol" ? key : String(key); }
function red5pro_rtc_toPrimitive(input, hint) { if (red5pro_rtc_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (red5pro_rtc_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function red5pro_rtc_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) red5pro_rtc_setPrototypeOf(subClass, superClass); }
function red5pro_rtc_setPrototypeOf(o, p) { red5pro_rtc_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return red5pro_rtc_setPrototypeOf(o, p); }
function red5pro_rtc_createSuper(Derived) { var hasNativeReflectConstruct = red5pro_rtc_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = red5pro_rtc_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = red5pro_rtc_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return red5pro_rtc_possibleConstructorReturn(this, result); }; }
function red5pro_rtc_possibleConstructorReturn(self, call) { if (call && (red5pro_rtc_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return red5pro_rtc_assertThisInitialized(self); }
function red5pro_rtc_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function red5pro_rtc_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function red5pro_rtc_getPrototypeOf(o) { red5pro_rtc_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return red5pro_rtc_getPrototypeOf(o); }





















var subStartRegex = /(.*) starting/i;
var red5pro_rtc_NAME = 'RTCSubscriber';

/**
 * Simple generation of unique subscriber id.
 *
 * @return {String}
 *
 * @private
 */
var generateSubscriptionId = function generateSubscriptionId() {
  var id = Math.floor(Math.random() * 0x10000).toString(16);
  return "subscriber-".concat(id);
};

// Default to secure settings.
var defaultOptions = {
  protocol: 'wss',
  port: 443,
  app: 'live',
  autoLayoutOrientation: true,
  mediaElementId: 'red5pro-subscriber',
  rtcConfiguration: {
    iceServers: [{
      urls: 'stun:stun2.l.google.com:19302'
    }],
    iceCandidatePoolSize: 2,
    bundlePolicy: 'max-bundle'
  },
  // Favored over iceServers.
  iceServers: undefined,
  // Deprecated. Preserved for backward-compatibility.
  iceTransport: IceTransportTypes.UDP,
  muteOnAutoplayRestriction: true,
  maintainConnectionOnSubscribeErrors: false,
  signalingSocketOnly: true,
  dataChannelConfiguration: undefined,
  socketSwitchDelay: 1000,
  bypassAvailable: false,
  maintainStreamVariant: false,
  buffer: 0,
  liveSeek: {
    enabled: false,
    baseURL: undefined,
    fullURL: undefined,
    hlsjsRef: undefined,
    hlsElement: undefined,
    usePlaybackControlsUI: true,
    options: {
      debug: false,
      backBufferLength: 0
    }
  }
};

/**
 * Main entry for WebRTC-based Subscriber.
 *
 * @extends EventEmitter
 * @extends SubscriberPlaybackController
 */
var red5pro_rtc_RTCSubscriber = /*#__PURE__*/function (_PlaybackController) {
  red5pro_rtc_inherits(RTCSubscriber, _PlaybackController);
  var _super = red5pro_rtc_createSuper(RTCSubscriber);
  function RTCSubscriber() {
    var _this;
    red5pro_rtc_classCallCheck(this, RTCSubscriber);
    _this = _super.call(this);
    _this._view = undefined;
    _this._options = undefined;
    _this._peerHelper = undefined;
    _this._socketHelper = undefined;
    _this._messageTransport = undefined;
    _this._connectionClosed = true;
    _this._sourceHandler = undefined;
    _this._mediaStream = undefined;
    _this._mediaTransform = undefined;
    _this._viewResolver = new DeferredPromise();
    _this._availabilityResolver = new DeferredPromise();
    _this._subscriptionResolver = new DeferredPromise();
    _this._orientation = 0;
    _this._streamingMode = 'Video/Audio';
    _this._switchChannelRequest = undefined;
    _this._requestedStreamSwitch = undefined;
    return _this;
  }
  red5pro_rtc_createClass(RTCSubscriber, [{
    key: "_getViewResolverPromise",
    value: function _getViewResolverPromise() {
      return this._viewResolver.promise;
    }
  }, {
    key: "_getAvailabilityResolverPromise",
    value: function _getAvailabilityResolverPromise() {
      return this._availabilityResolver.promise;
    }
  }, {
    key: "_getSubscriptionResolverPromise",
    value: function _getSubscriptionResolverPromise() {
      return this._subscriptionResolver.promise;
    }

    /**
     * Gloms the Playback Controls API onto this instance to provide ease in 3se.
     *
     * @param {Object} handler
     *        The method request handler to bind and forward calls on.
     *
     * @private
     */
  }, {
    key: "_glomSourceHandlerAPI",
    value: function _glomSourceHandlerAPI(handler) {
      var _this2 = this;
      this.play = handler.play.bind(handler);
      this.pause = handler.pause.bind(handler);
      this.resume = handler.resume.bind(handler);
      this.stop = handler.stop.bind(handler);
      this.mute = handler.mute.bind(handler);
      this.unmute = handler.unmute.bind(handler);
      this.setVolume = handler.setVolume.bind(handler);
      this.seekTo = handler.seekTo.bind(handler);
      this.toggleFullScreen = handler.toggleFullScreen.bind(handler);
      handler.on('*', function (event) {
        _this2.trigger(new SubscriberEvent(event.type, _this2, event.data));
      });
    }

    /**
     * Still in use, but hold-over of previous 3.x SDK versions designed to pair views and subscribers. In 4.0.0 it has been internalized.
     * API deprecated.
     *
     * @private
     */
  }, {
    key: "_setViewIfNotExist",
    value: function _setViewIfNotExist(currentView) {
      var mediaElementId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      if (typeof currentView === 'undefined' && mediaElementId !== undefined) {
        var view = new playback(mediaElementId);
        view.attachSubscriber(this);
      }
    }

    /**
     * Attempt to initialize the subscription handler for WebRTC.
     *
     * @param {Object} options
     *        The initialization configuration.
     * @param {Object} handler
     *        The handler instance that will manage view interaction and events.
     *
     * @private
     */
  }, {
    key: "_initHandler",
    value: function _initHandler(options, handler) {
      if (options && handler) {
        handler.on('*', this._boundBubbleSubscriberEvents);
        handler.addSource(options);
      }
    }

    /**
     * Request available stream by name on server through WebSocket request.
     *
     * @param {String} streamName
     *        The name of the stream to look up.
     * @private
     */
  }, {
    key: "_requestAvailability",
    value: function _requestAvailability(streamName) {
      log_debug(red5pro_rtc_NAME, '[requestavailability]');
      // message on socket returns -> onStream(Un)Available
      this._socketHelper.post({
        isAvailable: streamName
      });
    }

    /**
     * Request offer over WebSocket.
     *
     * @param {String} streamName
     *        The name of the stream to subscribe to.
     * @param {String} subscriptionId
     *        The unique id of this subscriber.
     * @param {String} transport
     *        The transport type to use.
     * @param {Boolean} useDataChannel
     *        Whether to use data channel for signalling.
     * @param {Boolean} maintainVariant
     *        Whether to notify the server to keep the specified stream name when transcoding, and not switch to variants on network conditions.
     * @param {String} vEncoding
     *        Optional encoding type for video. Defaults to server selection.
     * @param {String} aEncoding
     *        Optional encoding type for audio. Defaults to server selection.
     *
     * @private
     */
  }, {
    key: "_requestOffer",
    value: function _requestOffer(streamName, subscriptionId, transport, useDataChannel, maintainVariant) {
      var vEncoding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;
      var aEncoding = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : undefined;
      log_debug(red5pro_rtc_NAME, '[requestoffer]');
      var offer = {
        requestOffer: streamName,
        requestId: subscriptionId,
        transport: transport,
        datachannel: useDataChannel,
        doNotSwitch: maintainVariant
      };
      if (typeof vEncoding !== 'undefined' && vEncoding !== PlaybackVideoEncoder.NONE) {
        offer.videoEncoding = vEncoding;
      } else if (browser.getIsEdge()) {
        // Force VP8 on Edge if not specified in the init config.
        // offer.videoEncoding = PlaybackVideoEncoder.VP8
      }
      if (typeof aEncoding !== 'undefined' && aEncoding !== PlaybackAudioEncoder.NONE) {
        offer.audioEncoding = aEncoding;
      }
      this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.OFFER_START, this));
      // message on socket returns -> onSDPOffer
      this._socketHelper.post(offer);
      return true;
    }

    /**
     * Creates and sends an answer based on provided SDP.
     *
     * @param {Object} sdp
     *        The SDP object to use in creating an SDP answer to send back.
     *
     * @private
     */
  }, {
    key: "_requestAnswer",
    value: function _requestAnswer(sdp) {
      var _this3 = this;
      log_debug(red5pro_rtc_NAME, '[requestanswer]');
      // invokes -> sendAnswer
      this._peerHelper.createAnswer(sdp).then(function (sessionDescription) {
        log_debug(red5pro_rtc_NAME, '[onanswercreated]');
        log_debug(red5pro_rtc_NAME, '[> sendanswer]');
        _this3._sendAnswer(_this3._options.streamName, _this3._options.subscriptionId, sessionDescription);
      })["catch"](function (error) {
        _this3.onSDPError(error);
      });
    }

    /**
     * Posts SDP answer to server over WebSocket.
     *
     * @param {String} streamName
     *        The target stream name.
     * @param {String} subscriptionId
     *        The unique id of this subscriber.
     * @param {Object} sdp
     *        The SDP to send as an answer.
     *
     * @private
     */
  }, {
    key: "_sendAnswer",
    value: function _sendAnswer(streamName, subscriptionId, sdp) {
      log_debug(red5pro_rtc_NAME, "[sendanswer]: streamname(".concat(streamName, "), subscriptionid(").concat(subscriptionId, ")"));
      this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.ANSWER_START, this, sdp));
      // message on socket response -> onAddIceCandidate
      // message on peer response -> onaddstream
      this._socketHelper.post({
        handleAnswer: streamName,
        requestId: subscriptionId,
        data: {
          sdp: sdp
        }
      });
    }

    /**
     * Sends a candidate to the server over WebSocket.
     *
     * @param {Object} candidate
     *        The peer candidate description.
     *
     * @private
     */
  }, {
    key: "_sendCandidate",
    value: function _sendCandidate(candidate) {
      log_debug(red5pro_rtc_NAME, '[sendcandidate]');
      this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.CANDIDATE_START, this, candidate));
      // message on peer response -> onicecandidate
      this._socketHelper.post({
        handleCandidate: this._options.streamName,
        requestId: this._options.subscriptionId,
        data: {
          candidate: candidate
        }
      });
    }

    /**
     * Assign any event handlers to the RTCPeerConnection once it has been established.
     * @param {RTCPeerConnection} connection
     *
     * @private
     */
  }, {
    key: "_setUpConnectionHandlers",
    value: function _setUpConnectionHandlers(connection) {
      var _this4 = this;
      connection.addEventListener('track', function (event) {
        log_debug(red5pro_rtc_NAME, '[peerconnection.ontrack]');
        var streams = event.streams,
          track = event.track,
          receiver = event.receiver,
          transceiver = event.transceiver;
        var kind = track.kind;
        receiver.playoutDelayHint = receiver.jitterBufferDelayHint = _this4._options.buffer;
        _this4.trigger(new SubscriberEvent(RTCSubscriberEventTypes.TRACK_ADDED, _this4, {
          streams: streams,
          track: track,
          receiver: receiver,
          transceiver: transceiver
        }));
      });
    }

    /**
     * Assigns pipeline for optional transform streams.
     *
     * @param {Object} transformOptions
     * @param {RTCPeerConnection} connection
     */
  }, {
    key: "_setUpMediaTransform",
    value: function () {
      var _setUpMediaTransform2 = red5pro_rtc_asyncToGenerator( /*#__PURE__*/red5pro_rtc_regeneratorRuntime().mark(function _callee(transformOptions, connection) {
        var videoReceiver, audioReceiver, audio, video, worker, payload, _payload;
        return red5pro_rtc_regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              videoReceiver = connection.getReceivers().find(function (r) {
                return r.track && r.track.kind === 'video';
              });
              audioReceiver = connection.getReceivers().find(function (r) {
                return r.track && r.track.kind === 'audio';
              });
              audio = transformOptions.audio, video = transformOptions.video, worker = transformOptions.worker; // Video
              if (!(videoReceiver && (video || worker))) {
                _context.next = 14;
                break;
              }
              _context.prev = 5;
              _context.next = 8;
              return PipeVideoReceiver(transformOptions, videoReceiver, videoReceiver.track);
            case 8:
              payload = _context.sent;
              _context.next = 14;
              break;
            case 11:
              _context.prev = 11;
              _context.t0 = _context["catch"](5);
              this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.TRANSFORM_ERROR, this, {
                type: 'video',
                error: _context.t0
              }));
            case 14:
              if (!(audioReceiver && (audio || worker))) {
                _context.next = 24;
                break;
              }
              _context.prev = 15;
              _context.next = 18;
              return PipeAudioReceiver(transformOptions, audioReceiver, audioReceiver.track);
            case 18:
              _payload = _context.sent;
              _context.next = 24;
              break;
            case 21:
              _context.prev = 21;
              _context.t1 = _context["catch"](15);
              this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.TRANSFORM_ERROR, this, {
                type: 'audio',
                error: _context.t1
              }));
            case 24:
              return _context.abrupt("return", true);
            case 27:
              _context.prev = 27;
              _context.t2 = _context["catch"](0);
              this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.TRANSFORM_ERROR, this, {
                error: _context.t2
              }));
              return _context.abrupt("return", false);
            case 31:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[0, 27], [5, 11], [15, 21]]);
      }));
      function _setUpMediaTransform(_x, _x2) {
        return _setUpMediaTransform2.apply(this, arguments);
      }
      return _setUpMediaTransform;
    }()
    /**
     * Setup and connect to begin a subscription.
     * This is invoked once the availability of the stream is recognized on the server and notified on this instance.
     *
     * @param {RTCConfiguration} rtcConfiguration
     *        A custom RTCConfiguration
     * @param {Object} dataChannelConfiguration
     *        Optional configuration for data channel communicaton.
     * @param {Array} iceServers
     *        The ICE server list to use in trickle.
     * @note For backward compatibility, keeping arguments as optional, with at least one being fulfilled. The `configuration` param will be favored after 5.4.0, `iceServers` is up for deprecation.
     *
     * @private
     */
  }, {
    key: "_connect",
    value: function _connect(configuration) {
      var _this5 = this;
      var dataChannelConfiguration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var iceServers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      log_debug(red5pro_rtc_NAME, '[connect]');
      if (iceServers && configuration) {
        log_warn('The iceServers configuration property is considered deprecated. Please use the rtcConfiguration configuration property upon which you can assign iceServers. Reference: https://www.red5pro.com/docs/streaming/migrationguide.html');
        configuration.iceServers = iceServers;
      }
      this._options.iceServers = configuration ? configuration.iceServers : iceServers;
      var p;
      if (configuration !== undefined) {
        p = this._peerHelper.setUpWithPeerConfiguration(configuration, dataChannelConfiguration, undefined);
      } else {
        p = this._peerHelper.setUp(this._options.iceServers, undefined, this._options.rtcpMuxPolicy);
      }
      p.then(function (connection) {
        _this5._setUpConnectionHandlers(connection);
        _this5.trigger(new SubscriberEvent(RTCSubscriberEventTypes.PEER_CONNECTION_AVAILABLE, _this5, connection));
        return _this5._requestOffer(_this5._options.streamName, _this5._options.subscriptionId, _this5._options.iceTransport, _this5._options.signalingSocketOnly, _this5._options.maintainStreamVariant, _this5._options.videoEncoding, _this5._options.audioEncoding);
      })["catch"](function (e) {
        log_warn(red5pro_rtc_NAME, 'Could not establish RTCPeerConnection.');
        _this5.trigger(new SubscriberEvent(SubscriberEventTypes.CONNECT_FAILURE, _this5));
      });
      //  TODO: Normalize returns to either all be chainable or not be chainable
      return this;
    }

    /**
     * Disconnect and teardown after close of subscription.
     *
     * @private
     */
  }, {
    key: "_disconnect",
    value: function _disconnect() {
      if (this._socketHelper) {
        log_debug(red5pro_rtc_NAME, '[disconnect:socket]');
        this._socketHelper.tearDown();
      }
      if (this._peerHelper) {
        log_debug(red5pro_rtc_NAME, '[disconnect:peer]');
        this._peerHelper.tearDown();
      }
      if (this._view) {
        this._view.detachStream();
      }
      this._socketHelper = undefined;
      this._peerHelper = undefined;
      this._messageTransport = undefined;
      if (this._sourceHandler) {
        log_debug(red5pro_rtc_NAME, '[disconnect:source]');
        this._sourceHandler.disconnect();
        this._sourceHandler = undefined;
      }
      this._connectionClosed = true;
    }

    /**
     * Internally manages metadata for the stream.
     * @param {MediaStream} stream
     *
     * @private
     */
  }, {
    key: "_manageStreamMeta",
    value: function _manageStreamMeta(stream) {
      var meta;
      var tracks = stream.getTracks();
      var audioTrack = tracks.find(function (track) {
        return track.kind === 'audio';
      });
      var videoTrack = tracks.find(function (track) {
        return track.kind === 'video';
      });
      if (videoTrack) {
        if (!videoTrack.muted) {
          meta = 'Video';
        }
      }
      if (audioTrack) {
        if (!audioTrack.muted) {
          meta = meta ? "".concat(meta, "/Audio") : 'Audio';
        }
      }
      if (!meta) {
        meta = 'Empty';
      }
      this.onMetaData({
        streamingMode: meta,
        method: 'onMetaData'
      });
    }

    /**
     * Inspect and add event handlers to media stream.
     * @param {MediaStream} stream
     *
     * @private
     */
  }, {
    key: "_addStreamHandlers",
    value: function _addStreamHandlers(stream) {
      var _this6 = this;
      var tracks = stream.getTracks();
      var audioTrack = tracks.find(function (track) {
        return track.kind === 'audio';
      });
      var videoTrack = tracks.find(function (track) {
        return track.kind === 'video';
      });
      if (videoTrack) {
        videoTrack.addEventListener('mute', function () {
          _this6._manageStreamMeta(stream);
        });
        videoTrack.addEventListener('unmute', function () {
          _this6._manageStreamMeta(stream);
        });
      }
      if (audioTrack) {
        audioTrack.addEventListener('mute', function () {
          _this6._manageStreamMeta(stream);
        });
        audioTrack.addEventListener('unmute', function () {
          _this6._manageStreamMeta(stream);
        });
      }
      this._manageStreamMeta(stream);
    }

    /**
     * Request to kick off autoplay if setting is flagged.
     *
     * @param {Object} options
     *        The initialization object.
     * @param {Element} view
     *        The target element view that will playback the stream.
     *
     * @private
     */
  }, {
    key: "_playIfAutoplaySet",
    value: function _playIfAutoplaySet(options, view) {
      if (options && view) {
        options.autoplay = browser.hasAttributeDefined(view.view, 'autoplay');
        if (options.autoplay) {
          this._sourceHandler.attemptAutoplay(options.muteOnAutoplayRestriction);
        }
      }
    }

    /**
     * Request to enabled scrubbable/seekeable playback with HLS.
     *
     * @private
     */
  }, {
    key: "_startSeekable",
    value: function _startSeekable(options) {
      var liveSeek = options.liveSeek,
        subscriptionId = options.subscriptionId;
      if (!liveSeek) return;
      var enabled = liveSeek.enabled,
        baseURL = liveSeek.baseURL,
        fullURL = liveSeek.fullURL,
        hlsjsRef = liveSeek.hlsjsRef,
        hlsElement = liveSeek.hlsElement;
      if (enabled) {
        try {
          if (browser.supportsHLS() || browser.supportsNonNativeHLS(hlsjsRef)) {
            var url = optionsToLiveSeekURL(options, baseURL, fullURL);
            this._sourceHandler.enableLiveSeek(url, subscriptionId, hlsElement, browser.supportsHLS());
          } else {
            throw new Error();
          }
        } catch (e) {
          log_error(red5pro_rtc_NAME, "Could not utilize the 'LiveSeek' request. This feature requires either native HLS playback or hls.js as a depenency.");
        }
      }
    }

    /**
     * Request to begin subscription on server over WebSocket.
     *
     * @private
     */
  }, {
    key: "_sendSubscribe",
    value: function _sendSubscribe() {
      log_debug(red5pro_rtc_NAME, '[sendsubscribe]');
      this._socketHelper.post({
        subscribe: this._options.streamName,
        requestId: this._options.subscriptionId
      });
    }

    /**
     * Request to initialize the WebRTC-based Subscriber based on configuration.
     * The returned `Promise` will either resolve with a reference to this instance or reject with an error `String` in failure.
     *
     * @param {Object} options
     *        The initialization configuration map.
     * @param {Object} mediaTransform
     *        The defined transforms to pipe decoding through. InsertableStreams API.
     *            {
     *              video: (function|null),
     *              audio: (function|null),
     *              worker: { video: (Worker|null), audio: (Worker|null) },
     *              transformFrameType: (TransformFrameTypes), pipeOptions: (object),
     *            }
     *        If you have transform functions that can run on the main thread, provide them in `video` and/or `audio`.
     *        If you have transform functions that should be run in a separate thread, utilize the `worker` option providing a `WebWorker`.
     *        By default, the transform function will be supplied an RTCEncodedVideoFrame or RTCEncodedAudioFrame. If you would prefer to receive either a VideoFrame or AudioData instead, use the transfromFrameType of TransformFrameTypes.PACKET.
     *        You can provide some options that will be sent when defining pipe as `pipeOptions`. Read more here: https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/pipeThrough
     *        The `WebWorker` - if utilized - needs to confirm to a specific API that will be called from the SDK.
     *
     * @return {Promise}
     */
  }, {
    key: "init",
    value: function init(options) {
      var _this7 = this;
      var mediaTransform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var deferred = new DeferredPromise();
      if (!webrtc_isSupported() || !websocket_isSupported()) {
        deferred.reject('Cannot create WebRTC playback instance. Your environment does not support WebRTC and/or WebSockets.');
      } else {
        this._disconnect();
        this._options = Object.assign({}, defaultOptions, options);
        this._options.subscriptionId = this._options.subscriptionId || generateSubscriptionId();
        this._mediaTransform = mediaTransform;
        if (!!this._mediaTransform && !supportsInsertableStreams()) {
          this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.UNSUPPORTED_FEATURE, this, {
            feature: 'Insertable Streams',
            message: 'You provided Media Transforms for track processing, but your current browser does not support the Insertable Streams API.'
          }));
          this._mediaTransform = undefined;
        }
        this._peerHelper = new webrtc_helper_sub(this);
        this._socketHelper = new socket_helper_sub(this);
        this._messageTransport = this._messageTransport || this._socketHelper;
        var socketPromise = new DeferredPromise();
        var socketurl = rtcSocketEndpointFromOptions(this._options, {
          id: this._options.subscriptionId
        });
        socketPromise.promise.then(function () {
          deferred.resolve(_this7);
          _this7._connectionClosed = false;
          _this7.trigger(new SubscriberEvent(SubscriberEventTypes.CONNECT_SUCCESS, _this7));
        })["catch"](function (error) {
          deferred.reject(error);
          _this7.trigger(new SubscriberEvent(SubscriberEventTypes.CONNECT_FAILURE, _this7, error));
        });
        this._socketHelper.setUp(socketurl, socketPromise);
      }
      return deferred.promise;
    }

    /**
     * Still in use for assigning document element view management to this instance.
     * API deprecated in 4.0.0.
     *
     * @private
     */
  }, {
    key: "setView",
    value: function setView(view) {
      this._view = view;
      this._viewResolver.resolve(this._view);
      return this;
    }

    /**
     * Request to begin subscribing to a stream.
     *
     * @return {Promise}
     *          The returned `Promise` will resolve or reject on successful start of playback.
     *        There are several processes that occur in order to establish a WebRTC subscription that involve - but are not limited to - ICE communication and assigning of local and remote SDPs on peer connections.
     */
  }, {
    key: "subscribe",
    value: function subscribe() {
      var _this8 = this;
      var _this$_options = this._options,
        streamName = _this$_options.streamName,
        mediaElementId = _this$_options.mediaElementId,
        rtcConfiguration = _this$_options.rtcConfiguration,
        liveSeek = _this$_options.liveSeek;
      var _this$_options2 = this._options,
        signalingSocketOnly = _this$_options2.signalingSocketOnly,
        dataChannelConfiguration = _this$_options2.dataChannelConfiguration;
      // Set default data channel configuration if not defined and severing socket on signal end.
      // TODO: Set this as more "private" with `red5pro-<streamname>`
      var dataChannelAllowed = signalingSocketOnly && webrtc_supportsDataChannel();
      if (dataChannelAllowed && !dataChannelConfiguration) {
        dataChannelConfiguration = {
          name: "red5pro"
        };
      }
      this._options.signalingSocketOnly = dataChannelAllowed;
      this._getViewResolverPromise().then(function (view) {
        if (liveSeek && liveSeek.enabled) {
          var hlsjsRef = liveSeek.hlsjsRef,
            usePlaybackControlsUI = liveSeek.usePlaybackControlsUI,
            options = liveSeek.options;
          if (browser.supportsHLS() || browser.supportsNonNativeHLS(hlsjsRef)) {
            _this8._sourceHandler = new red5pro_source_handler_rtc_seekable(view.view, _this8.getType(), options, usePlaybackControlsUI);
          } else {
            log_error(red5pro_rtc_NAME, "Could not utilize the 'LiveSeek' request. This feature requires either native HLS playback or hls.js as a depenency.");
            _this8._sourceHandler = new red5pro_source_handler_rtc(view.view, _this8.getType());
          }
        } else {
          _this8._sourceHandler = new red5pro_source_handler_rtc(view.view, _this8.getType());
        }
        _this8._glomSourceHandlerAPI(_this8._sourceHandler);
        _this8._initHandler(_this8._options, _this8._sourceHandler);
      })["catch"](function () {
        // passed up through overarching promise.
      });
      this._getAvailabilityResolverPromise().then(function () {
        var configuration = rtcConfiguration;
        // If not currently defined:
        if (typeof rtcConfiguration.encodedInsertableStreams === 'undefined') {
          configuration = Object.assign(rtcConfiguration, {
            encodedInsertableStreams: !!_this8._mediaTransform
          });
        }
        _this8._connect(configuration, dataChannelConfiguration, _this8._options.iceServers);
      })["catch"](function () {
        // passed up through overarching promise.
      });
      this._setViewIfNotExist(this._view, mediaElementId);
      if (this._options.bypassAvailable) {
        this._availabilityResolver.resolve(this);
      } else {
        this._requestAvailability(streamName);
      }
      return this._getSubscriptionResolverPromise();
    }

    /**
     * Request to stop a subscription.
     * The returned `Promise` will either resolve or reject on successful stop of subscription.
     *
     * @return {Promise}
     */
  }, {
    key: "unsubscribe",
    value: function unsubscribe() {
      log_debug(red5pro_rtc_NAME, '[unsubscribe]');
      var deferred = new DeferredPromise();
      this.stop();
      this._disconnect();
      this._mediaStream = undefined;
      deferred.resolve(this);
      this.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_STOP, this));
      return deferred.promise;
    }

    /**
     * Request to apply media transforms to the receiver tracks on the current or future Peer Connection.
     * If you intend to call this at a later time than `init()` with transforms, you must provide an `rtcConfiguration` in the
     * init config that has `encodedInsertableStreams` set to `true`. e.g.,
     *
     * ```
     *  rtcConfiguration: {
     *    iceServers: [{urls: 'stun:stun2.l.google.com:19302'}],
     *    iceCandidatePoolSize: 2,
     *    bundlePolicy: 'max-bundle',
     *    encodedInsertableStreams: true
     *  }
     * ```
     *
     * @param {Object} mediaTransform
     *        The defined transforms to pipe decoding through. InsertableStreams API. { video: (function|null), audio: (function|null) }
     */
  }, {
    key: "transform",
    value: function transform(mediaTransform) {
      if (!!mediaTransform && !supportsInsertableStreams()) {
        this.trigger(new SubscriberEvent(SubscriberEventTypes.UNSUPPORTED_FEATURE, this, {
          feature: 'Insertable Streams',
          message: 'You provided Media Transforms for track processing, but your current browser does not support the Insertable Streams API.'
        }));
        return;
      } else if (this.getPeerConnection()) {
        this._setUpMediaTransform(mediaTransform, this.getPeerConnection());
      } else {
        this._mediaTransform = mediaTransform;
      }
    }

    /**
     * Event handler for stream being available on server.
     *
     * @private
     */
  }, {
    key: "onStreamAvailable",
    value: function onStreamAvailable(receipt) {
      log_debug(red5pro_rtc_NAME, '[onstreamavailable]: ' + JSON.stringify(receipt, null, 2));
      this._availabilityResolver.resolve(this);
    }

    /**
     * Event handler for stream being unavailable on server.
     *
     * @private
     */
  }, {
    key: "onStreamUnavailable",
    value: function onStreamUnavailable(receipt) {
      log_debug(red5pro_rtc_NAME, "Stream ".concat(this._options.streamName, " does not exist."));
      log_debug(red5pro_rtc_NAME, '[onstreamunavailable]: ' + JSON.stringify(receipt, null, 2));
      this.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_INVALID_NAME, this));
      this._availabilityResolver.reject("Stream ".concat(this._options.streamName, " does not exist."));
      this._subscriptionResolver.reject("Stream ".concat(this._options.streamName, " does not exist."));
      if (!this._options.maintainConnectionOnSubscribeErrors) {
        this._disconnect();
      } else {
        // Reset promise for possible retry.
        this._availabilityResolver = new DeferredPromise();
        this._subscriptionResolver = new DeferredPromise();
      }
    }

    /**
     * Event handler for success of SDP being added remotely and locally through the Peer Connection.
     *
     * @param {Object} receipt
     *
     * @private
     */
  }, {
    key: "onSDPSuccess",
    value: function onSDPSuccess(receipt) {
      log_debug(red5pro_rtc_NAME, '[onsdpsuccess]: ' + JSON.stringify(receipt, null, 2));
    }

    /**
     * Event handler for success in SDP offer.
     *
     * @param {Object} receipt
     *        The optional successful object.
     *
     * @private
     */
  }, {
    key: "onSDPOffer",
    value: function onSDPOffer(receipt) {
      log_debug(red5pro_rtc_NAME, '[onsdpoffer]: ' + JSON.stringify(receipt, null, 2));
      /*
      // Comment out in favor of `datachannel:true` in request offer.
      if (this._options.signalingSocketOnly) {
        const {
          sdp
        } = receipt
        const ufragregx = /a=ice-ufrag:(.*)/g
        const pwdregx = /a=ice-pwd:(.*)/g
        const fingerprintregx = /a=fingerprint:(.*)/g
        receipt.sdp.sdp = sdp.sdp.replace('a=group:BUNDLE audio video', 'a=group:BUNDLE audio video 2')
        // Below is remote.
        // receipt.sdp.sdp += `m=application 9 UDP/DTLS/SCTP 5000\r\nc=IN IP4 73.143.36.217\r\na=ice-ufrag:${ufragregx.exec(sdp.sdp)[1]}\r\na=ice-pwd:${pwdregx.exec(sdp.sdp)[1]}\r\na=fingerprint:${fingerprintregx.exec(sdp.sdp)[1]}\r\na=setup:passive\r\na=mid:2\r\na=sendrecv\r\na=sctpmap:5000 webrtc-datachannel 1024`
         // Below is local.
        receipt.sdp.sdp += `m=application 9 UDP/DTLS/SCTP webrtc-datachannel\r\nc=IN IP4 0.0.0.0\r\na=ice-ufrag:${ufragregx.exec(sdp.sdp)[1]}\r\na=ice-pwd:${pwdregx.exec(sdp.sdp)[1]}\r\na=ice-options:trickle\r\na=fingerprint:${fingerprintregx.exec(sdp.sdp)[1]}\r\na=setup:actpass\r\na=mid:2\r\na=sctp-port:5000\r\na=max-message-size:262144\r\n`
      }
      */
      var sessionDescription = new RTCSessionDescription(receipt.sdp);
      this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.OFFER_END, this));
      this._requestAnswer(sessionDescription);
    }

    /**
     * Event handler for all errors related to SDP through the Peer Connection.
     *
     * @param {Object} receipt
     *        The optional error object.
     *
     * @private
     */
  }, {
    key: "onSDPError",
    value: function onSDPError(receipt) {
      this.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_FAIL, this, receipt));
      this._subscriptionResolver.reject('Invalid SDP.');
      log_error(red5pro_rtc_NAME, '[onsdperror]');
      log_error(red5pro_rtc_NAME, receipt);
    }

    /**
     * Event handler for receipt of a `MediaStream`.
     *
     * @param {MediaStream} stream
     *        The stream returned on the Peer Connection.
     *
     * @private
     */
  }, {
    key: "onAnswerMediaStream",
    value: function onAnswerMediaStream() {
      var stream = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      // eslint-disable-line no-unused-vars
      this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.ANSWER_END, this));
    }

    /**
     * Event handler on receipt of ICE candidate.
     *
     * @param {Object} candidate
     *        The ICE candidate.
     *
     * @private
     */
  }, {
    key: "onIceCandidate",
    value: function onIceCandidate(candidate) {
      log_debug(red5pro_rtc_NAME, '[onicecandidate]');
      this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.CANDIDATE_END, this));
      this._sendCandidate(candidate);
    }

    /**
     * Event handler for end of ICE communication (trickle).
     *
     * @param {MediaStream} stream
     *        The `MediaStream` that has become available post-trickle.
     *
     * @private
     */
  }, {
    key: "onIceCandidateTrickleEnd",
    value: function onIceCandidateTrickleEnd(stream) {
      var _this9 = this;
      log_debug(red5pro_rtc_NAME, '[onicetrickleend]');
      this._getViewResolverPromise().then(function (view) {
        view.attachStream(stream);
        _this9._mediaStream = stream;
        _this9._setUpMediaTransform(_this9._mediaTransform, _this9.getPeerConnection());
        _this9.trigger(new SubscriberEvent(RTCSubscriberEventTypes.ON_ADD_STREAM, _this9, _this9._mediaStream));
      });
    }

    /**
     * Event handler to add ICE candidate to Peer Connection.
     *
     * @param {Object} candidate
     *
     * @private
     */
  }, {
    key: "onAddIceCandidate",
    value: function onAddIceCandidate(candidate) {
      log_debug(red5pro_rtc_NAME, '[onaddicecandidate]');
      this._peerHelper.addIceCandidate(candidate);
    }

    /**
     * Event handler for receipt of empty candidate during ICE negotiation.
     *
     * @private
     */
  }, {
    key: "onEmptyCandidate",
    value: function onEmptyCandidate() {
      log_debug(red5pro_rtc_NAME, '[icecandidatetrickle:empty]');
      this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.PEER_CANDIDATE_END));
    }

    /**
     * Event handler for completion of peer ice candidate gathering.
     *
     * @private
     */
  }, {
    key: "onPeerGatheringComplete",
    value: function onPeerGatheringComplete() {
      log_debug(red5pro_rtc_NAME, '[icecandidategathering:end]');
      if (this._socketHelper) {
        this._socketHelper.postEndOfCandidates(this._options.streamName);
      }
    }

    /**
     * Event handler for notification of end in ice candidates over the WebSocket.
     *
     * @private
     */
  }, {
    key: "onSocketIceCandidateEnd",
    value: function onSocketIceCandidateEnd() {
      log_debug(red5pro_rtc_NAME, '[onsocketicecandidateend]');
      this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.ICE_TRICKLE_COMPLETE, this));
      this._sendSubscribe();
    }

    /**
     * General event handler for all messages.
     *
     * @private
     */
  }, {
    key: "onSocketMessage",
    value: function onSocketMessage(socket, message) {
      this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.SOCKET_MESSAGE, this, {
        socket: socket,
        message: message
      }));
    }

    /**
     * General event handler for errors coming over the WebSocket.
     *
     * @param {String} message
     * @param {Object} detail
     *        Optional additional detail.
     *
     * @private
     */
  }, {
    key: "onSocketMessageError",
    value: function onSocketMessageError(message) {
      var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      log_error(red5pro_rtc_NAME, "Error in stream subscription: ".concat(message, ".\n[Optional detail]: ").concat(detail));
      this._subscriptionResolver.reject("Error in stream subscription: ".concat(message, "."));
      this.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_FAIL, this, message));
    }

    /**
     * Event handler for close on the WebSocket.
     *
     * @param {Event} closeEvent
     *
     * @private
     */
  }, {
    key: "onSocketClose",
    value: function onSocketClose(closeEvent) {
      log_debug(red5pro_rtc_NAME, '[onsocketclose]');
      if (this._peerHelper) {
        this._peerHelper.tearDown();
      }
      this.onConnectionClosed(closeEvent);
    }

    /**
     * Event handler for fail in Peer Connection.
     *
     * @private
     */
  }, {
    key: "onPeerConnectionFail",
    value: function onPeerConnectionFail() {
      log_debug(red5pro_rtc_NAME, '[onpeerconnectionfail]');
      this.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_FAIL, this, 'fail'));
      if (this._subscriptionResolver) {
        this._subscriptionResolver.reject('Peer Connection Failed.');
      }
    }

    /**
     * Event handler for close of Peer Connection.
     *
     * @param {Event} event
     *
     * @private
     */
  }, {
    key: "onPeerConnectionClose",
    value: function onPeerConnectionClose(event) {
      log_debug(red5pro_rtc_NAME, '[onpeerconnectionclose]');
      var liveSeek = this._options.liveSeek;
      if (this._socketHelper) {
        this._socketHelper.tearDown();
      }
      // RTCPeerConnection may have been closed by server when broadcast has unpublished.
      // However, since we have live scrubbing, allow the user to still playback and scrub video.
      if (!liveSeek) {
        this.onSocketClose(event);
      } else {
        var enabled = liveSeek.enabled;
        if (!enabled) {
          this.onSocketClose(event);
        }
      }
    }

    /**
     * Event handler for open of Peer Connection.
     *
     * @private
     */
  }, {
    key: "onPeerConnectionOpen",
    value: function onPeerConnectionOpen() {
      log_debug(red5pro_rtc_NAME, '[onpeerconnectionopen]');
      this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.PEER_CONNECTION_OPEN), this, this.getPeerConnection());
    }

    /**
     * Event handler for `Unpublish` of stream subscribed to. Occurs when a broadcaster stops their stream while this subscription stream is open.
     *
     * @private
     */
  }, {
    key: "onUnpublish",
    value: function onUnpublish() {
      log_debug(red5pro_rtc_NAME, '[onunpublish]');
      this.trigger(new SubscriberEvent(SubscriberEventTypes.PLAY_UNPUBLISH, this));
      var liveSeek = this._options.liveSeek;
      if (this._sourceHandler) {
        this._sourceHandler.unpublish();
      }
      // RTCPeerConnection may have been closed by server when broadcast has unpublished.
      // However, since we have live scrubbing, allow the user to still playback and scrub video.
      if (!liveSeek) {
        this.unsubscribe();
      } else {
        var enabled = liveSeek.enabled;
        if (!enabled) {
          this.unsubscribe();
        }
      }
    }

    /**
     * Event handler for connection on stream being closed.
     *
     * @private
     */
  }, {
    key: "onConnectionClosed",
    value: function onConnectionClosed() {
      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      var liveSeek = this._options.liveSeek;
      if (!this._connectionClosed) {
        log_debug(red5pro_rtc_NAME, '[onconnectionclosed]');
        // RTCPeerConnection may have been closed by server when broadcast has unpublished.
        // However, since we have live scrubbing, allow the user to still playback and scrub video.
        if (!liveSeek) {
          this._disconnect();
        } else {
          var enabled = liveSeek.enabled;
          if (!enabled) {
            this._disconnect();
          }
        }
        this.trigger(new SubscriberEvent(SubscriberEventTypes.CONNECTION_CLOSED, this, event));
      }
    }

    /**
     * Event handler for accepting data through the `send` API of a Publisher. This is the receiving end of the communication channel in which a Publisher can send data to all subscribers.
     *
     * @param {String} methodName
     *        The target method name associated with the communication.
     * @param {Object} data
     *        The data being sent.
     *
     * @private
     */
  }, {
    key: "onSendReceived",
    value: function onSendReceived(methodName, data) {
      if (methodName === 'onMetaData') {
        this.onMetaData(data);
      } else if (methodName === 'onPublisherNetworkCongestion') {
        this.onPublisherNetworkCongestion(data);
      } else if (methodName === 'onPublisherNetworkRecovery') {
        this.onPublisherNetworkRecovery(data);
      } else {
        // environment.invoke(methodName, data)
        this.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_SEND_INVOKE, this, {
          methodName: methodName,
          data: data
        }));
      }
    }

    /**
     * Event handler for status notifications of the subscription stream coming over the WebSocket.
     *
     * @param {Object} status
     *        The status object.
     *
     * @private
     */
  }, {
    key: "onSubscriberStatus",
    value: function onSubscriberStatus(status) {
      log_debug(red5pro_rtc_NAME, '[subscriberstatus] - ' + JSON.stringify(status, null, 2));
      var startResult = subStartRegex.exec(status.message);
      if (startResult && startResult[1] === this._options.streamName) {
        this._subscriptionResolver.resolve(this);
        this.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_START, this));
        this._playIfAutoplaySet(this._options, this._view);
        this._startSeekable(this._options, this._view);
      } else {
        this.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_STATUS, this, status));
      }
    }

    /**
     * Event listener for Data Channel being open on server to switch signaling.
     *
     * @private
     */
  }, {
    key: "onDataChannelAvailable",
    value: function onDataChannelAvailable(channelName) {
      var _this10 = this;
      log_debug(red5pro_rtc_NAME, '[ondatachannel::available]');
      this._switchChannelRequest = {
        switchChannel: channelName || 'red5pro'
      };
      if (this._options.signalingSocketOnly) {
        var t = setTimeout(function () {
          clearTimeout(t);
          if (_this10._socketHelper) {
            _this10._socketHelper.sever(_this10._switchChannelRequest);
          }
          _this10._messageTransport = _this10._peerHelper;
          _this10.trigger(new MessageTransportStateEvent(MessageTransportStateEventTypes.CHANGE, _this10, {
            controller: _this10,
            transport: _this10._messageTransport
          }));
        }, this._socketHelper ? this._options.socketSwitchDelay : 100);
      }
      this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.DATA_CHANNEL_AVAILABLE, this, {
        name: channelName,
        dataChannel: this.getDataChannel()
      }));
    }

    /**
     * Event handler for notifications of error on optional data channel.
     *
     * @param {RTCDataChannel} dataChannel
     * @param {String} error
     *
     * @private
     */
  }, {
    key: "onDataChannelError",
    value: function onDataChannelError(dataChannel, error) {
      this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.DATA_CHANNEL_ERROR, this, {
        dataChannel: dataChannel,
        error: error
      }));
    }

    /**
     * Event handler for notifications of message on optional data channel.
     *
     * @param {RTCDataChannel} dataChannel
     * @param {Object} message
     *
     * @private
     */
  }, {
    key: "onDataChannelMessage",
    value: function onDataChannelMessage(dataChannel, messageData) {
      this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.DATA_CHANNEL_MESSAGE, this, {
        dataChannel: dataChannel,
        message: messageData
      }));
    }

    /**
     * Event handler for open notification on optional data channel.
     *
     * @param {RTCDataChannel} dataChannel
     *
     * @private
     */
  }, {
    key: "onDataChannelOpen",
    value: function onDataChannelOpen(dataChannel) {
      this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.DATA_CHANNEL_OPEN, this, {
        dataChannel: dataChannel
      }));
    }

    /**
     * Event handler for close notification on optional data channel.
     *
     * @param {RTCDataChannel} dataChannel
     *
     * @private
     */
  }, {
    key: "onDataChannelClose",
    value: function onDataChannelClose(dataChannel) {
      this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.DATA_CHANNEL_CLOSE, this, {
        dataChannel: dataChannel
      }));
    }

    /**
     * Event handler for metadata being sent related to the subscription stream coming over the WebSocket.
     *
     * @param {Object} metadata
     *
     * @private
     */
  }, {
    key: "onMetaData",
    value: function onMetaData(metadata) {
      var orientation = metadata.orientation,
        streamingMode = metadata.streamingMode;
      var previousStreamingMode = this._streamingMode;
      if (typeof orientation !== 'undefined' && orientation !== this._orientation) {
        this._orientation = orientation;
        if (this._options.autoLayoutOrientation) {
          applyOrientation(this._view.view, parseInt(orientation, 10), metadataResolutionToObject(metadata.resolution));
          if (this._sourceHandler) {
            this._sourceHandler.handleOrientationChange(parseInt(orientation, 10));
          }
        }
        this.trigger(new SubscriberEvent(SubscriberEventTypes.ORIENTATION_CHANGE, this, {
          orientation: parseInt(orientation, 10),
          viewElement: this._view.view
        }));
      }
      if (typeof streamingMode !== 'undefined' && streamingMode !== previousStreamingMode) {
        this._streamingMode = streamingMode;
        this.trigger(new SubscriberEvent(SubscriberEventTypes.STREAMING_MODE_CHANGE, this, {
          streamingMode: streamingMode,
          previousStreamingMode: previousStreamingMode,
          viewElement: this._view.view
        }));
      }
      this.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_METADATA, this, metadata));
    }

    /**
     * Event handler for success on request to switch streams.
     */
  }, {
    key: "onStreamSwitchComplete",
    value: function onStreamSwitchComplete() {
      log_debug(red5pro_rtc_NAME, '[streamswitch::complete]');
      var liveSeek = this._options.liveSeek;
      var path = this._requestedStreamSwitch;
      if (liveSeek && liveSeek.enabled) {
        var baseURL = liveSeek.baseURL,
          fullURL = liveSeek.fullURL;
        var streamName = path.split('/').pop();
        var app = path.substr(0, path.lastIndexOf("/".concat(streamName)));
        var options = red5pro_rtc_objectSpread(red5pro_rtc_objectSpread({}, this._options), {}, {
          app: app,
          streamName: streamName
        });
        var url = optionsToLiveSeekURL(options, baseURL, fullURL);
        this._sourceHandler.switchLiveSeek(url);
      }
      this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.SUBSCRIBE_STREAM_SWITCH, this, {
        path: path
      }));
      this._requestedStreamSwitch = undefined;
    }

    /**
     * Event handler for network congestion metadata coming in from server related to publisher broadcast conditions.
     *
     * @param {Object} data
     *
     * @private
     */
  }, {
    key: "onPublisherNetworkCongestion",
    value: function onPublisherNetworkCongestion(data) {
      this.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_PUBLISHER_CONGESTION, this, data));
    }

    /**
     * Event handler for network recovery metadata coming in from server related to publisher broadcast conditions.
     *
     * @param {Object} data
     *
     * @private
     */
  }, {
    key: "onPublisherNetworkRecovery",
    value: function onPublisherNetworkRecovery(data) {
      this.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_PUBLISHER_RECOVERY, this, data));
    }

    /**
     * Request to invoke a method on the Application Adapter related to the `app` config setting.
     *
     * @param {String} methodName
     *        The name of the method to invoke on thw Application Adapter
     * @param {Array} args
     *        The ordered list of arguments to invoke on the method. Do not provide anything if the method takes no arguments.
     * @return {Promise}
     */
  }, {
    key: "callServer",
    value: function callServer(methodName, args) {
      var isSwitchStream = methodName === 'switchStreams';
      var _this$_options3 = this._options,
        app = _this$_options3.app,
        streamName = _this$_options3.streamName;
      if (isSwitchStream) {
        var path = args[0].path;
        this._requestedStreamSwitch = path;
        log_debug(red5pro_rtc_NAME, "[callServer:switch]:: ".concat(methodName, ", ").concat(app, "/").concat(streamName, " -> ").concat(path));
      }
      return this.getMessageTransport().postAsync({
        callAdapter: {
          method: methodName,
          arguments: args
        }
      });
    }

    /**
     * Sends an RPC log to the server which will be printed out in server logs.
     *
     * @param {String} level
     *        Valid values: TRACE, INFO, DEBUG, WARN or ERROR
     * @param {Object} message
     *        Either a String or a JSON-serializable Object. This param will be converted to a string to be sent to the server.
     */
  }, {
    key: "sendLog",
    value: function sendLog(level, message) {
      try {
        var theLevel = Object.keys(LEVELS).find(function (l) {
          return l.toLowerCase() === level.toLowerCase();
        }) ? level : LEVELS.DEBUG;
        var theMessage = typeof message === 'string' ? message : JSON.stringify(message);
        this.getMessageTransport().post({
          log: theLevel.toUpperCase(),
          message: theMessage
        });
      } catch (e) {
        var _message = e.message || e;
        log_error(red5pro_rtc_NAME, "Could not send log to server. Message parameter expected to be String or JSON-serializable object.");
        log_error(red5pro_rtc_NAME, _message);
      }
    }

    /**
     * Enters subscriber into standby mode - keeping connection open but not bothering to consume video or audio.
     */
  }, {
    key: "enableStandby",
    value: function enableStandby() {
      this.getMessageTransport().post({
        //      standby: true
        mute: {
          muteAudio: true,
          muteVideo: true
        }
      });
    }

    /**
     * Removes subscriber from standby mode - turning the audio and video back on and consumable after a mute request.
     */
  }, {
    key: "disableStandby",
    value: function disableStandby() {
      this.getMessageTransport().post({
        //      standby: false
        mute: {
          muteAudio: false,
          muteVideo: false
        }
      });
    }

    /**
     * Mutes audio being sent from the server to the subscriber. Audio packets will be held from the subscriber on the server-side.
     */
  }, {
    key: "muteAudio",
    value: function muteAudio() {
      this.getMessageTransport().post({
        mute: {
          muteAudio: true
        }
      });
    }

    /**
     * Unmutes audio being sent from the server to the subscriber. Audio packets will resume being sent to the subscriber.
     */
  }, {
    key: "unmuteAudio",
    value: function unmuteAudio() {
      this.getMessageTransport().post({
        mute: {
          muteAudio: false
        }
      });
    }

    /**
     * Mutes video being sent from the server to the subscriber. Video packets will be held from the subscriber on the server-side.
     */
  }, {
    key: "muteVideo",
    value: function muteVideo() {
      this.getMessageTransport().post({
        mute: {
          muteVideo: true
        }
      });
    }

    /**
     * Unmutes video being sent from the server to the subscriber. Video packets will resume being sent to the subscriber.
     */
  }, {
    key: "unmuteVideo",
    value: function unmuteVideo() {
      this.getMessageTransport().post({
        mute: {
          muteVideo: false
        }
      });
    }

    /**
     * Returns the Message Transport instance that posts requests to the server.
     *
     *  @return {Object}
     *          Either the socker proxy or the peer connection proxy
     *
     * @private
     */
  }, {
    key: "getMessageTransport",
    value: function getMessageTransport() {
      return this._messageTransport;
    }

    /**
     * Returns the current WebSocket connection helper if established.
     * Used in SharedObject communication.
     *
     * @return {PublisherSocketHelper}
     *
     * @private
     */
  }, {
    key: "getConnection",
    value: function getConnection() {
      return this._socketHelper;
    }

    /**
     * Returns the current RTCPeerConnection helper if established.
     *
     * @return {RTCPeerConnection}
     */
  }, {
    key: "getPeerConnection",
    value: function getPeerConnection() {
      return this._peerHelper ? this._peerHelper.connection : undefined;
    }

    /**
     * Returns the optional RTCDataChannel on the opened peer connection.
     *
     * @return {RTCDataChannel}
     */
  }, {
    key: "getDataChannel",
    value: function getDataChannel() {
      return this._peerHelper ? this._peerHelper.dataChannel : undefined;
    }

    /**
     * Returns the `MediaStream` instance if generated through `getUserMedia` and exists for broadcast.
     *
     * @return {MediaStream}
     */
  }, {
    key: "getMediaStream",
    value: function getMediaStream() {
      return this._mediaStream;
    }

    /**
     * Returns reference to playback controls if available.
     *
     * @return {PlaybackControls}
     */
  }, {
    key: "getControls",
    value: function getControls() {
      return this._sourceHandler ? this._sourceHandler.getControls() : undefined;
    }

    /**
     * Returns the target view Element.
     *
     * @return {Element}
     */
  }, {
    key: "getPlayer",
    value: function getPlayer() {
      return this._view.view;
    }

    /**
     * Returns the initialization configuration used in `init()`.
     *
     * @return {Object}
     */
  }, {
    key: "getOptions",
    value: function getOptions() {
      return this._options;
    }

    /**
     * Returns the type of implementation: `RTC`.
     *
     * @return {String}
     */
  }, {
    key: "getType",
    value: function getType() {
      return PlaybackTypes.RTC.toUpperCase();
    }
  }]);
  return RTCSubscriber;
}(PlaybackController);
/* harmony default export */ var red5pro_rtc = (red5pro_rtc_RTCSubscriber);
// CONCATENATED MODULE: ./src/js/env/embed.js





/**
 * Replaces a `video` element with a container for embedding a Flash object.
 *
 * @param {Element} targetElement
 * @param {Element} targetParent
 *
 * @private
 */
var embed_defineEmbedElement = function defineEmbedElement(targetElement, targetParent) {
  var dfd = new DeferredPromise();
  var elementId = targetElement.id;
  if (targetElement.nodeName.toLowerCase() === 'video') {
    var div = browser.createElement('div');
    div.id = elementId + '_rtmp';
    targetParent.appendChild(div);
    if (targetElement.parentElement) {
      targetElement.parentElement.removeChild(targetElement);
    }
    dfd.resolve(div.id);
  } else {
    dfd.resolve(elementId);
  }
  return dfd.promise;
};

/**
 * Request to embed a Flash object using SWFObject library.
 *
 * @param {String} idName
 * @param {Object} options
 *        Initialization configuration map.
 * @param {Object} flashvars
 *        The FlashVars to pass into the embedded object.
 * @param {Object} swfobject
 *        The loaded SWFObject library util.
 * @param {String} elementId
 *        The id of the Element to embed.
 * @return {Promise}
 *
 * @private
 */
var embed_embedSwfObject = function embedSwfObject(idName, options, flashvars, swfobject, elementId) {
  var dfd = new DeferredPromise();
  var params = {
    quality: 'high',
    wmode: 'opaque',
    bgcolor: options.backgroundColor || '#000',
    allowscriptaccess: 'always',
    allowfullscreen: 'true',
    allownetworking: 'all'
  };
  var attributes = {
    id: idName,
    name: idName,
    align: 'middle'
  };
  if (swfobject.hasFlashPlayerVersion(options.minFlashVersion)) {
    swfobject.embedSWF(options.swf, elementId, options.embedWidth || 640, options.embedHeight || 480, options.minFlashVersion, options.productInstallURL, flashvars, params, attributes, function (result) {
      if (result.success) {
        dfd.resolve();
      } else {
        dfd.reject('Flash Object embed failed.');
      }
    });
  } else {
    dfd.reject('Flash Player Version is not supported.');
  }
  return dfd.promise;
};
// CONCATENATED MODULE: ./src/js/helper/sharedobject-helper-rtmp.js


function sharedobject_helper_rtmp_typeof(obj) { "@babel/helpers - typeof"; return sharedobject_helper_rtmp_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, sharedobject_helper_rtmp_typeof(obj); }
function sharedobject_helper_rtmp_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function sharedobject_helper_rtmp_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, sharedobject_helper_rtmp_toPropertyKey(descriptor.key), descriptor); } }
function sharedobject_helper_rtmp_createClass(Constructor, protoProps, staticProps) { if (protoProps) sharedobject_helper_rtmp_defineProperties(Constructor.prototype, protoProps); if (staticProps) sharedobject_helper_rtmp_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function sharedobject_helper_rtmp_toPropertyKey(arg) { var key = sharedobject_helper_rtmp_toPrimitive(arg, "string"); return sharedobject_helper_rtmp_typeof(key) === "symbol" ? key : String(key); }
function sharedobject_helper_rtmp_toPrimitive(input, hint) { if (sharedobject_helper_rtmp_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (sharedobject_helper_rtmp_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var sharedobject_helper_rtmp_NAME = 'R5ProRTMPSharedObjectHandler';

/**
 * Flash-based SharedObject handler.
 *
 * @private
 */
var sharedobject_helper_rtmp_RTMPSharedObjectHandler = /*#__PURE__*/function () {
  function RTMPSharedObjectHandler() {
    sharedobject_helper_rtmp_classCallCheck(this, RTMPSharedObjectHandler);
    this._element = undefined;
    this._responseHandlers = [];
  }

  /**
   * Adds a response handler for SharedObject events.
   *
   * @param {Object} handler
   */
  sharedobject_helper_rtmp_createClass(RTMPSharedObjectHandler, [{
    key: "addResponseHandler",
    value: function addResponseHandler(handler) {
      this._responseHandlers.push(handler);
    }

    /**
     * Removes a response handler from SharedObject events.
     *
     * @param {Object} handler
     */
  }, {
    key: "removeResponseHandler",
    value: function removeResponseHandler(handler) {
      var i = this._responseHandlers.length;
      var rHandler;
      while (--i > -1) {
        rHandler = this._responseHandlers[i];
        if (rHandler === handler) {
          this._responseHandlers.splice(i, 1);
          return;
        }
      }
    }

    /**
     * Handles an event from a SharedObject.
     *
     * @param {Object} event
     */
  }, {
    key: "handleSharedObjectEvent",
    value: function handleSharedObjectEvent(event) {
      log_debug(sharedobject_helper_rtmp_NAME, '[sharedobject:event]');
      var i;
      var length = this._responseHandlers.length;
      var handler;
      for (i = 0; i < length; i++) {
        handler = this._responseHandlers[i];
        if (handler.respond(JSON.parse(event))) {
          break;
        }
      }
    }

    /**
     * Assigns a global response handler for SharedObject communication through Flash object over ExternalInterface.
     *
     * @param {String} name
     * @param {Element} el
     *        The object embed element.
     */
  }, {
    key: "assignSharedObjectResponder",
    value: function assignSharedObjectResponder(name, el) {
      var _handleSharedObjectEvent = this.handleSharedObjectEvent.bind(this);
      var elId = el.id.split('-').join('_');
      var handlerName = ['handleSharedObjectEvent', elId].join('_');
      log_debug(sharedobject_helper_rtmp_NAME, "[assign:sharedobject:responder] :: ".concat(elId));
      log_debug(sharedobject_helper_rtmp_NAME, "[sharedoject:responder] :: ".concat(handlerName));
      el.setSharedObjectResponder(name, handlerName);
      browser.setGlobal(handlerName, _handleSharedObjectEvent);
    }

    /**
     * Request to connect to SharedObject.
     */
  }, {
    key: "connect",
    value: function connect(swfId) {
      this._element = browser.getEmbedObject(swfId);
      if (!this._element) {
        log_warn("Could not locate embedded Flash object for id: ".concat(swfId));
      }
    }

    /**
     * Request to disconnect to SharedObject.
     */
  }, {
    key: "disconnect",
    value: function disconnect() {
      while (this._responseHandlers.length > 0) {
        this._responseHandlers.shift();
      }
    }

    /**
     * Attempt to send method update to SharedObject.
     *
     * @param {String} name
     * @param {String} callName
     * @param {Object} message
     *        String or Object that will be serialized to a JSON string.
     */
  }, {
    key: "sendToSharedObject",
    value: function sendToSharedObject(name, methodName, message) {
      log_debug(sharedobject_helper_rtmp_NAME, '[sendToSharedObject]');
      try {
        this._element.sharedObjectSend(name, methodName, typeof message === 'string' ? message : JSON.stringify(message));
      } catch (e) {
        log_warn('Could not send to shared object (' + name + '). Error: ' + e.message);
      }
    }

    /**
     * Attempt to update property on SharedObject.
     *
     * @param {String} name
     * @param {String} key
     * @param {Object} value
     */
  }, {
    key: "sendPropertyToSharedObject",
    value: function sendPropertyToSharedObject(name, key, value) {
      log_debug(sharedobject_helper_rtmp_NAME, '[sendPropertyToSharedObject]');
      try {
        this._element.sharedObjectSendProperty(name, key, value);
      } catch (e) {
        log_warn('Could not send to shared object (' + name + '). Error: ' + e.message);
      }
    }

    /**
     * Request to get remote ShareObject by name.
     *
     * @param {String} sharedObjectName
     */
  }, {
    key: "getRemoteSharedObject",
    value: function getRemoteSharedObject(sharedObjectName) {
      log_debug(sharedobject_helper_rtmp_NAME, '[getRemoteSharedObject]');
      try {
        this.assignSharedObjectResponder(sharedObjectName, this._element);
        this._element.getRemoteSharedObject(sharedObjectName);
      } catch (e) {
        log_warn('Could not get remote shared object (' + name + '). Error: ' + e.message);
      }
    }

    /**
     * Request to connect to SharedObject by name.
     *
     * @param {String} sharedObjectName
     */
  }, {
    key: "connectToSharedObject",
    value: function connectToSharedObject(sharedObjectName) {
      log_debug(sharedobject_helper_rtmp_NAME, '[connectToSharedObject]');
      try {
        this._element.connectToSharedObject(sharedObjectName);
      } catch (e) {
        log_warn('Could not connect to shared object (' + name + '). Error: ' + e.message);
      }
    }

    /**
     * Request to close SharedObject connection by name.
     *
     * @param {String} sharedObjectName
     */
  }, {
    key: "closeSharedObject",
    value: function closeSharedObject(sharedObjectName) {
      log_debug(sharedobject_helper_rtmp_NAME, '[disconnectToSharedObject]');
      try {
        this._element.disconnectFromSharedObject(sharedObjectName);
      } catch (e) {
        log_warn('Could not disconnect to shared object (' + name + '). Error: ' + e.message);
      }
    }
  }]);
  return RTMPSharedObjectHandler;
}();
/* harmony default export */ var sharedobject_helper_rtmp = (sharedobject_helper_rtmp_RTMPSharedObjectHandler);
// CONCATENATED MODULE: ./src/js/subscriber/red5pro-source-handler-rtmp.js


function red5pro_source_handler_rtmp_typeof(obj) { "@babel/helpers - typeof"; return red5pro_source_handler_rtmp_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, red5pro_source_handler_rtmp_typeof(obj); }
function red5pro_source_handler_rtmp_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function red5pro_source_handler_rtmp_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, red5pro_source_handler_rtmp_toPropertyKey(descriptor.key), descriptor); } }
function red5pro_source_handler_rtmp_createClass(Constructor, protoProps, staticProps) { if (protoProps) red5pro_source_handler_rtmp_defineProperties(Constructor.prototype, protoProps); if (staticProps) red5pro_source_handler_rtmp_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function red5pro_source_handler_rtmp_toPropertyKey(arg) { var key = red5pro_source_handler_rtmp_toPrimitive(arg, "string"); return red5pro_source_handler_rtmp_typeof(key) === "symbol" ? key : String(key); }
function red5pro_source_handler_rtmp_toPrimitive(input, hint) { if (red5pro_source_handler_rtmp_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (red5pro_source_handler_rtmp_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function red5pro_source_handler_rtmp_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) red5pro_source_handler_rtmp_setPrototypeOf(subClass, superClass); }
function red5pro_source_handler_rtmp_setPrototypeOf(o, p) { red5pro_source_handler_rtmp_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return red5pro_source_handler_rtmp_setPrototypeOf(o, p); }
function red5pro_source_handler_rtmp_createSuper(Derived) { var hasNativeReflectConstruct = red5pro_source_handler_rtmp_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = red5pro_source_handler_rtmp_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = red5pro_source_handler_rtmp_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return red5pro_source_handler_rtmp_possibleConstructorReturn(this, result); }; }
function red5pro_source_handler_rtmp_possibleConstructorReturn(self, call) { if (call && (red5pro_source_handler_rtmp_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return red5pro_source_handler_rtmp_assertThisInitialized(self); }
function red5pro_source_handler_rtmp_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function red5pro_source_handler_rtmp_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function red5pro_source_handler_rtmp_getPrototypeOf(o) { red5pro_source_handler_rtmp_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return red5pro_source_handler_rtmp_getPrototypeOf(o); }








var red5pro_source_handler_rtmp_NAME = 'RTMPSourceHandler';

/**
 * Simple util to convert value to Integer.
 * @private
 */
var red5pro_source_handler_rtmp_toInt = function toInt(value) {
  if (typeof value === 'string') {
    return parseInt(value, 10);
  } else {
    return Math.round(value);
  }
};

/**
 * Quick test if streamName has an extension which infers VOD.
 * @param {String} streamName
 * @return {Boolean}
 * @private
 */
var isVODStreamName = function isVODStreamName(streamName) {
  return /^.*\.(flv|mp4|mp3)/.test(streamName);
};

/**
 * Source Handler for Flash-based Subscribers, which serves as a Presentation Controller between view and subscriber.
 *
 * @extends EventEmitter
 * @extends SubscriberPlaybackController
 *
 * @private
 */
var red5pro_source_handler_rtmp_RTMPSourceHandler = /*#__PURE__*/function (_PlaybackController) {
  red5pro_source_handler_rtmp_inherits(RTMPSourceHandler, _PlaybackController);
  var _super = red5pro_source_handler_rtmp_createSuper(RTMPSourceHandler);
  function RTMPSourceHandler(notificationCenter, media, type) {
    var _this;
    var soResponder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
    red5pro_source_handler_rtmp_classCallCheck(this, RTMPSourceHandler);
    _this = _super.call(this);
    _this.media = media;
    _this.clone = _this.media.cloneNode(true);
    _this.parent = _this.media.parentNode;
    _this.holder = _this._determineHolder(_this.media);
    _this.playerType = type;
    _this._swfId = undefined;
    _this._controls = undefined;
    _this._soResponder = soResponder || new sharedobject_helper_rtmp();
    _this._playbackNotificationCenter = notificationCenter;
    browser.onFullScreenStateChange(_this._handleFullScreenChange.bind(red5pro_source_handler_rtmp_assertThisInitialized(_this)));
    return _this;
  }

  /**
   * Established DOM Element order for playback.
   *
   * @param {Element} media
   *        The target media element: e.g., `video` or `audio`.
   *
   * @private
   */
  red5pro_source_handler_rtmp_createClass(RTMPSourceHandler, [{
    key: "_determineHolder",
    value: function _determineHolder(media) {
      if (media.parentNode.classList.contains('red5pro-media-container')) {
        return media.parentNode;
      } else {
        var parent = media.parentNode;
        var div = browser.createElement('div');
        div.classList.add('red5pro-media-container');
        parent.insertBefore(div, media);
        parent.removeChild(media);
        div.appendChild(media);
        return div;
      }
    }

    /**
     * Clean up of DOM Element order upon stop of playback.
     *
     * @private
     */
  }, {
    key: "_cleanUp",
    value: function _cleanUp() {
      // Return to prior DOM manipulation.
      var el = this.getEmbeddedView();
      var elParent = el.parentNode;
      var mediaHolder = this.holder;
      if (elParent) {
        elParent.removeChild(el);
        // The object parent could be a wrapper child in the original parent element.
        if (elParent !== this.parent) {
          elParent.parentNode.removeChild(elParent);
          mediaHolder = this.parent;
        }
      } else {
        try {
          el.remove();
        } catch (e) {
          log_warn(red5pro_source_handler_rtmp_NAME, "Issue in DOM cleanup of flash object embed: ".concat(e.message));
        }
      }
      this.media = this.clone.cloneNode(true);
      mediaHolder.appendChild(this.media);
      if (this._controls) {
        this._controls.detach();
      }
    }

    /**
     * Assigns and handlers event notificiations coming from the media notifier (e.g., `video` or `audio` element).
     *
     * @param {Object} notifier
     *
     * @private
     */
  }, {
    key: "_addPlaybackHandlers",
    value: function _addPlaybackHandlers(notifier) {
      var controls = this.getControls();
      if (typeof controls === 'undefined') {
        return;
      }
      notifier.on(SubscriberEventTypes.SUBSCRIBE_START, function () {
        controls.setState(PlaybackState.PLAYING);
      });
      notifier.on(SubscriberEventTypes.SUBSCRIBE_STOP, function () {
        controls.setState(PlaybackState.IDLE);
      });
      notifier.on(SubscriberEventTypes.PLAY_UNPUBLISH, function () {
        controls.setState(PlaybackState.IDLE);
      });
      notifier.on(SubscriberEventTypes.SUBSCRIBE_METADATA, function (event) {
        if (event.data.duration) {
          controls.setPlaybackDuration(event.data.duration);
        }
      });
      notifier.on(SubscriberEventTypes.VOLUME_CHANGE, function (event) {
        controls.setVolume(event.data.volume);
      });
      notifier.on(SubscriberEventTypes.PLAYBACK_STATE_CHANGE, function (event) {
        if (event.data.code === PlaybackState.AVAILABLE) {
          controls.enable(true);
        }
        controls.setState(event.data.code);
      });
      notifier.on(SubscriberEventTypes.PLAYBACK_TIME_UPDATE, function (event) {
        controls.setSeekTime(event.data.time, event.data.duration);
      });
      notifier.on(SubscriberEventTypes.FULL_SCREEN_STATE_CHANGE, function (event) {
        controls.onFullScreenChange(event.data);
      });
    }

    /**
     * Event handler for change in fullscreen state.
     *
     * @param {Boolean} isFullScreen
     *
     * @private
     */
  }, {
    key: "_handleFullScreenChange",
    value: function _handleFullScreenChange(isFullScreen) {
      var swfobject = this.getEmbeddedView();
      if (isFullScreen) {
        this.holder.classList.add('red5pro-media-container-full-screen');
        swfobject.classList.add('red5pro-media-container-full-screen');
      } else {
        this.holder.classList.remove('red5pro-media-container-full-screen');
        swfobject.classList.remove('red5pro-media-container-full-screen');
      }
      this.trigger(new SubscriberEvent(SubscriberEventTypes.FULL_SCREEN_STATE_CHANGE, undefined, isFullScreen));
    }

    /**
     * Establishes event handler for recognizing complete on embed and initialization of Flash-based subscriber.
     *
     * @param {Promise} promise
     *        The target `Promise` object to resolve or reject upon completion.
     *
     * @private
     */
  }, {
    key: "_setUpInitCallback",
    value: function _setUpInitCallback(promise) {
      var self = this;
      browser.addSubscriptionAssignmentHandler(function (successId) {
        log_debug(red5pro_source_handler_rtmp_NAME, "Embed and init() complete for subscriber swf. successId(".concat(successId, ")."));
        promise.resolve(successId);
        self._tearDownInitCallback();
      });
    }

    /**
     * Tears down established handler for completion of Flash embed and init.
     *
     * @private
     */
  }, {
    key: "_tearDownInitCallback",
    value: function _tearDownInitCallback() {}

    /**
      * Request to setup the presentation of a playback stream using HLS.
      *
      * @param {String} url
      *        The endpoint URL for playback.
      * @param {Object} options
      *        The initialization configuration map.
      * @param {String} swfUrl
      *        The endpoint url to the SWF to embed. Defaults to relative link to red5pro-subscriber.swf of the SDK distribution.
      * @param {String} minFlashVersion
      *        The minimum Flash version for support of playback. Default: `10.0.0`.
      *
      * @returns {Promise}
      */
  }, {
    key: "addSource",
    value: function addSource(swfId, options) {
      var _this2 = this;
      var swfUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var minFlashVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      log_debug(red5pro_source_handler_rtmp_NAME, '[addsource]');
      this._swfId = swfId;
      this.holder = this._determineHolder(this.media);
      var soResponder = this._soResponder;
      var deferred = new DeferredPromise();
      var hasDefinedControls = options.controls;
      var isMuted = browser.hasAttributeDefined(this.media, 'muted');
      var usePlaybackControls = browser.hasAttributeDefined(this.media, 'controls') && browser.hasClassDefined(this.media, 'red5pro-media');
      options.swf = swfUrl || options.swf;
      options.minFlashVersion = minFlashVersion || options.minFlashVersion;
      this._setUpInitCallback(deferred);
      var classList = this.media.classList;
      embed_defineEmbedElement(this.media, this.holder).then(function (elementId) {
        var flashvars = {
          stream: options.streamName,
          app: options.context ? "".concat(options.app, "/").concat(options.context) : options.app,
          host: options.host,
          muted: browser.hasAttributeDefined(_this2.media, 'muted'),
          autoplay: browser.hasAttributeDefined(_this2.media, 'autoplay'),
          useAdaptiveBitrateController: options.useAdaptiveBitrateController
        };
        if (options.backgroundColor) {
          flashvars.backgroundColor = options.backgroundColor;
        }
        if (options.buffer && !isNaN(Number(options.buffer))) {
          flashvars.buffer = options.buffer;
        }
        if (options.width && !isNaN(options.width)) {
          flashvars.width = red5pro_source_handler_rtmp_toInt(options.width);
        }
        if (options.height && !isNaN(options.height)) {
          flashvars.height = red5pro_source_handler_rtmp_toInt(options.height);
        }
        if (options.embedWidth === '100%' || options.embedHeight === '100%') {
          flashvars.autosize = true;
        }
        _this2._swfId = swfId;
        if (typeof options.connectionParams !== 'undefined') {
          flashvars.connectionParams = encodeURIComponent(JSON.stringify(options.connectionParams));
        }
        if (typeof options.abrVariants !== 'undefined') {
          flashvars.abrVariants = encodeURIComponent(JSON.stringify(options.abrVariants));
        }
        if (typeof options.abrVariantUpgradeSettings !== 'undefined') {
          flashvars.abrVariantUpgradeSettings = encodeURIComponent(JSON.stringify(options.abrVariantUpgradeSettings));
        }
        return embed_embedSwfObject(swfId, options, flashvars, browser.getSwfObject(), elementId);
      }).then(function () {
        if (hasDefinedControls || usePlaybackControls) {
          if (hasDefinedControls) {
            _this2._controls = options.controls;
          } else {
            _this2._controls = new PlaybackControlsImpl(_this2, _this2.holder);
          }
          _this2.media.controls = false;
          _this2._controls.setAsVOD(isVODStreamName(options.streamName));
          _this2._controls.setMutedState(isMuted);
          var embedded = _this2.getEmbeddedView();
          var index = classList.length,
            clazz;
          while (--index > -1) {
            clazz = classList.item(index);
            embedded.classList.add(clazz);
          }
        }
        _this2._addPlaybackHandlers(_this2._playbackNotificationCenter);
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
          code: PlaybackState.AVAILABLE,
          state: PlaybackStateReadable[PlaybackState.AVAILABLE]
        }));
        return true;
      }).then(function () {
        soResponder.connect(swfId);
        return true;
      })["catch"](function (e) {
        return deferred.reject(e);
      });
      return deferred.promise;
    }

    /**
     * Request to connect to stream.
     */
  }, {
    key: "connect",
    value: function connect() {
      log_debug(red5pro_source_handler_rtmp_NAME, '[connect]');
      try {
        this.getEmbeddedView().connect();
      } catch (e) {
        throw e;
      }
    }
  }, {
    key: "play",
    value: function play() {
      try {
        this.getEmbeddedView().play();
      } catch (e) {
        throw e;
      }
    }
  }, {
    key: "pause",
    value: function pause() {
      try {
        this.getEmbeddedView().pause();
      } catch (e) {
        throw e;
      }
    }
  }, {
    key: "resume",
    value: function resume() {
      try {
        this.getEmbeddedView().resume();
      } catch (e) {
        throw e;
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      try {
        this.getEmbeddedView().stop();
      } catch (e) {
        throw e;
      }
    }
  }, {
    key: "mute",
    value: function mute() {
      try {
        this.getEmbeddedView().mute();
      } catch (e) {
        throw e;
      }
    }
  }, {
    key: "unmute",
    value: function unmute() {
      try {
        this.getEmbeddedView().unmute();
      } catch (e) {
        throw e;
      }
    }
  }, {
    key: "setVolume",
    value: function setVolume(value) {
      try {
        this.getEmbeddedView().setVolume(value);
      } catch (e) {
        throw e;
      }
    }
  }, {
    key: "seekTo",
    value: function seekTo(value) {
      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      try {
        this.getEmbeddedView().seekTo(value, duration);
      } catch (e) {
        throw e;
      }
    }
  }, {
    key: "toggleFullScreen",
    value: function toggleFullScreen() {
      try {
        browser.toggleFullScreen(this.holder);
      } catch (e) {
        throw e;
      }
    }

    /**
     * Notification of current stream being in an unpublished state.
     * The stream enters an unpublished state when the broadcaster stop the stream and the subscriber is still connected.
     */
  }, {
    key: "unpublish",
    value: function unpublish() {
      this.stop();
    }

    /**
     * Request to disconnect from the playback stream.
     */
  }, {
    key: "disconnect",
    value: function disconnect() {
      try {
        this.getEmbeddedView().disconnect();
        log_debug(red5pro_source_handler_rtmp_NAME, '[disconnect]');
      } catch (e) {
        // nada.
      }
      this._cleanUp();
      this._soResponder.disconnect();
    }

    /**
     * Assign response handler for SharedObject communication.
     *
     * @param {Object} handler
     *
     * @private
     */
  }, {
    key: "addSharedObjectResponseHandler",
    value: function addSharedObjectResponseHandler(handler) {
      this._soResponder.addResponseHandler(handler);
    }

    /**
     * Remove response handler from SharedObject communication.
     *
     * @param {Object} handler
     *
     * @private
     */
  }, {
    key: "removeSharedObjectResponseHandler",
    value: function removeSharedObjectResponseHandler(handler) {
      this._soResponder.removeResponseHandler(handler);
    }

    /**
     * Send message on SharedObject.
     *
     * @param {String} name
     *        The name of the SharedObject.
     * @param {String} callName
     *        The method name to invoke on the SharedObject.
     * @param {String} message
     *        The message to send along.
     *
     * @private
     */
  }, {
    key: "sendToSharedObject",
    value: function sendToSharedObject(name, callName, message) {
      this._soResponder.sendToSharedObject(name, callName, message);
    }

    /**
     * Send property update to SharedObject.
     *
     * @param {String} name
     *        The name of the SharedObject.
     * @param {String} key
     *        The property name to update.
     * @param {String} value
     *        The property value to set.
     *
     * @private
     */
  }, {
    key: "sendPropertyToSharedObject",
    value: function sendPropertyToSharedObject(name, key, value) {
      this._soResponder.sendPropertyToSharedObject(name, key, value);
    }

    /**
     * Request to get the remote SharedObject on the server by name.
     *
     * @param {String} sharedObjectName
     *
     * @private
     */
  }, {
    key: "getRemoteSharedObject",
    value: function getRemoteSharedObject(sharedObjectName) {
      this._soResponder.getRemoteSharedObject(sharedObjectName);
    }

    /**
     * Request to connect to SharedObject by name.
     *
     * @param {String} sharedObjectName
     *
     * @private
     */
  }, {
    key: "connectToSharedObject",
    value: function connectToSharedObject(sharedObjectName) {
      this._soResponder.connectToSharedObject(sharedObjectName);
    }

    /**
     * Request to close the SharedObject by name.
     *
     * @param {String} sharedObjectName
     *
     * @private
     */
  }, {
    key: "closeSharedObject",
    value: function closeSharedObject(sharedObjectName) {
      this._soResponder.closeSharedObject(sharedObjectName);
    }

    /*
     * Request to start the Adaptive Bitrate Controller to automatically downgrade and upgrade streams based on NetStatus and bandwidth.
     * The ABR is started automatically when providing the `useAdaptiveBitrateController` configuration property.
     *
     * NOTE: Adaptive Bitrate Controller API is only available when using Autoscale-Enabled Red5 Pro Server.
     */
  }, {
    key: "startABRController",
    value: function startABRController() {
      try {
        this.getEmbeddedView().startABRController();
      } catch (e) {
        log_debug(red5pro_source_handler_rtmp_NAME, "Could not start the Adaptive Bitrate Controller: ".concat(e.message));
      }
    }

    /*
     * Request to stop the Adaptive Bitrate Controller from automatically downgrading and upgrading streams based on NetStatus and bandwidth.
     *
     * NOTE: Adaptive Bitrate Controller API is only available when using Autoscale-Enabled Red5 Pro Server.
     */
  }, {
    key: "stopABRController",
    value: function stopABRController() {
      try {
        this.getEmbeddedView().stopABRController();
      } catch (e) {
        log_debug(red5pro_source_handler_rtmp_NAME, "Could not stop the Adaptive Bitrate Controller: ".concat(e.message));
      }
    }

    /**
     * Request to use the provide ABR Variants when performing Adaptive Bitrate Control.
     * Requires the `useAdaptiveBitrateController` intitialization configuration property to be `true`.
     * NOTE: Adaptive Bitrate Controller API is only available when using Autoscale-Enabled Red5 Pro Server.
     *
     * @param {Object} abrSettings
     *        TODO: Provide ABR Variant object schema expected.
     * @param {int} level
     *        The level to start out on for ABR.
     */
  }, {
    key: "setABRVariants",
    value: function setABRVariants(abrVariants, level) {
      try {
        var value = typeof abrVariants === 'string' ? encodeURIComponent(abrVariants) : encodeURIComponent(JSON.stringify(abrVariants));
        this.getEmbeddedView().setABRVariants(value, level || 1);
      } catch (e) {
        log_debug(red5pro_source_handler_rtmp_NAME, "Could not set ABR Variants: ".concat(e.message));
      }
    }

    /**
     * Request to set ABR level explicitly. The SDK attempts to properly choose the correct level based on bandwidth, but this API allows for the level to be set explicitly.
     *
     * NOTE: Adaptive Bitrate Controller API is only available when using Autoscale-Enabled Red5 Pro Server.
     *
     * @param {int} level
     *        The level to set the ABR based on the variants provided in `setABRVariants`.
     * @param {boolean} firm
     *        Flag to set level firmly, disabling the automatic switching of the Adaptive Bitrate Controller.
     */
  }, {
    key: "setABRLevel",
    value: function setABRLevel(level, firm) {
      try {
        this.getEmbeddedView().setABRLevel(level, !!firm);
      } catch (e) {
        log_debug(red5pro_source_handler_rtmp_NAME, "Could not set ABR level: ".concat(e.message));
      }
    }

    /**
     * Provides the upgrade settings to use by the Adaptive Bitrate Control in upgrading previously downgraded streams.
     *
     * NOTE: Adaptive Bitrate Controller API is only available when using Autoscale-Enabled Red5 Pro Server.
     *
     * @param {Object} abrVariantUpgrades
     *        A configuration object that defines the associated retry limits based on levels of the Provision Variants.
     * @example
     * {
     *  minimumDowngradePlaybackSpan: 2000,
     *  upgrade: [
     *    {
     *      level: 1,
     *      retryTimeout: 0
     *    },
     *    {
     *      level: 2,
     *      retryTimeout: 2000
     *    },
     *    {
     *      level: 3,
     *      retryTimeout: 4000
     *    }
     *  ]
     * }
     */
  }, {
    key: "setABRVariantUpgradeSettings",
    value: function setABRVariantUpgradeSettings(abrVariantUpgrades) {
      try {
        var value = typeof abrVariants === 'string' ? encodeURIComponent(abrVariantUpgrades) : encodeURIComponent(JSON.stringify(abrVariantUpgrades));
        this.getEmbeddedView().setABRVariantUpgradeSettings(value);
      } catch (e) {
        log_debug(red5pro_source_handler_rtmp_NAME, "Could not set ABR Variants: ".concat(e.message));
      }
    }

    /**
     * Returns the embedded Flash object if available.
     *
     * @returns {Element}
     */
  }, {
    key: "getEmbeddedView",
    value: function getEmbeddedView() {
      return browser.getEmbedObject(this._swfId);
    }

    /**
     * Returns playback controls if available.
     *
     * @returns {PlaybackControls}
     */
  }, {
    key: "getControls",
    value: function getControls() {
      return this._controls;
    }

    /**
     * Returns the subscriber type associated with this controller.
     *
     * @returns {String}
     */
  }, {
    key: "getType",
    value: function getType() {
      return this.playerType;
    }
  }]);
  return RTMPSourceHandler;
}(PlaybackController);
/* harmony default export */ var red5pro_source_handler_rtmp = (red5pro_source_handler_rtmp_RTMPSourceHandler);
// CONCATENATED MODULE: ./src/js/subscriber/red5pro-rtmp.js


function red5pro_rtmp_typeof(obj) { "@babel/helpers - typeof"; return red5pro_rtmp_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, red5pro_rtmp_typeof(obj); }
function red5pro_rtmp_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function red5pro_rtmp_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, red5pro_rtmp_toPropertyKey(descriptor.key), descriptor); } }
function red5pro_rtmp_createClass(Constructor, protoProps, staticProps) { if (protoProps) red5pro_rtmp_defineProperties(Constructor.prototype, protoProps); if (staticProps) red5pro_rtmp_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function red5pro_rtmp_toPropertyKey(arg) { var key = red5pro_rtmp_toPrimitive(arg, "string"); return red5pro_rtmp_typeof(key) === "symbol" ? key : String(key); }
function red5pro_rtmp_toPrimitive(input, hint) { if (red5pro_rtmp_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (red5pro_rtmp_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function red5pro_rtmp_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) red5pro_rtmp_setPrototypeOf(subClass, superClass); }
function red5pro_rtmp_setPrototypeOf(o, p) { red5pro_rtmp_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return red5pro_rtmp_setPrototypeOf(o, p); }
function red5pro_rtmp_createSuper(Derived) { var hasNativeReflectConstruct = red5pro_rtmp_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = red5pro_rtmp_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = red5pro_rtmp_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return red5pro_rtmp_possibleConstructorReturn(this, result); }; }
function red5pro_rtmp_possibleConstructorReturn(self, call) { if (call && (red5pro_rtmp_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return red5pro_rtmp_assertThisInitialized(self); }
function red5pro_rtmp_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function red5pro_rtmp_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function red5pro_rtmp_getPrototypeOf(o) { red5pro_rtmp_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return red5pro_rtmp_getPrototypeOf(o); }










var red5pro_rtmp_NAME = 'RTMPSubcriber';
var red5pro_rtmp_defaultOptions = {
  protocol: 'rtmp',
  port: 1935,
  width: 320,
  // media playback
  height: 240,
  // media playback
  embedWidth: '100%',
  // DOM display style
  embedHeight: '100%',
  // DOM display style
  minFlashVersion: '10.0.0',
  swf: 'lib/red5pro/red5pro-subscriber.swf',
  swfobjectURL: 'lib/swfobject/swfobject.js',
  productInstallURL: 'lib/swfobject/playerProductInstall.swf',
  mediaElementId: 'red5pro-subscriber',
  // with Autoscale enabled server only =>
  useAdaptiveBitrateController: false,
  abrVariants: undefined,
  abrVariantUpgradeSettings: {
    minimumDowngradePlaybackSpan: 10000,
    // Amount of time playback needs to exceed between playback and downgrade in order to be eligible for upgrade
    upgrade: [{
      level: 1,
      retryTimeout: 0
    }, {
      level: 2,
      retryTimeout: 10000 // If on level 2, in 10 seconds after playback, try and switch up.
    }, {
      level: 3,
      retryTimeout: 20000 // If on level 3, in 20 seconds after playback, try and switch up.
    }]
  }
};

/**
 * Main entry for Flash-based Subscriber over RTMP.
 *
 * @extends EventEmitter
 * @extends SubscriberPlaybackController
 */
var red5pro_rtmp_RTMPSubscriber = /*#__PURE__*/function (_PlaybackController) {
  red5pro_rtmp_inherits(RTMPSubscriber, _PlaybackController);
  var _super = red5pro_rtmp_createSuper(RTMPSubscriber);
  function RTMPSubscriber() {
    var _this;
    red5pro_rtmp_classCallCheck(this, RTMPSubscriber);
    _this = _super.call(this);
    _this._options = undefined;
    _this._view = undefined;
    _this._sourceHandler = undefined;
    _this._elementId = undefined;
    _this._embedPromise = undefined;
    _this._getEmbedPromise().then(function () {
      _this.onEmbedComplete();
    })["catch"](function (err) {
      return _this.onEmbedFailure(err);
    });
    _this._viewResolver = new DeferredPromise();
    _this._subscriptionResolver = new DeferredPromise();
    _this._orientation = 0;
    _this._streamingMode = 'Video/Audio';
    return _this;
  }
  red5pro_rtmp_createClass(RTMPSubscriber, [{
    key: "_getViewResolverPromise",
    value: function _getViewResolverPromise() {
      return this._viewResolver.promise;
    }
  }, {
    key: "_getSubscriptionResolverPromise",
    value: function _getSubscriptionResolverPromise() {
      return this._subscriptionResolver.promise;
    }
  }, {
    key: "_getEmbedPromise",
    value: function _getEmbedPromise() {
      this._embedPromise = Future.createIfNotExist(this._embedPromise);
      return this._embedPromise.promise;
    }

    /**
     * Gloms the Playback Controls API onto this instance to provide ease in use.
     *
     * @param {Object} handler
     *        The method request handler to bind and forward calls on.
     *
     * @private
     */
  }, {
    key: "_glomSourceHandlerAPI",
    value: function _glomSourceHandlerAPI(handler) {
      var _this2 = this;
      /*
       * || Note ||
       * play() is not glommed as it needs to be handled differently.
       */

      this.pause = handler.pause.bind(handler);
      this.resume = handler.resume.bind(handler);
      this.stop = handler.stop.bind(handler);
      this.mute = handler.mute.bind(handler);
      this.unmute = handler.unmute.bind(handler);
      this.setVolume = handler.setVolume.bind(handler);
      this.seekTo = handler.seekTo.bind(handler);
      this.toggleFullScreen = handler.toggleFullScreen.bind(handler);

      // Adaptive Bitrate Controller - Autoscale enabled only.
      this.setABRLevel = handler.setABRLevel.bind(handler);
      this.setABRVariants = handler.setABRVariants.bind(handler);
      this.stopABRController = handler.stopABRController.bind(handler);
      this.startABRController = handler.startABRController.bind(handler);
      this.setABRVariantUpgradeSettings = handler.setABRVariantUpgradeSettings.bind(handler);
      handler.on('*', function (event) {
        _this2.trigger(new SubscriberEvent(event.type, _this2, event.data));
      });
    }

    /**
     * Still in use, but hold-over of previous 3.x SDK versions designed to pair views and subscribers. In 4.0.0 it has been internalized.
     * API deprecated.
     *
     * @private
     */
  }, {
    key: "_setViewIfNotExist",
    value: function _setViewIfNotExist(currentView) {
      var mediaElementId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      if (typeof currentView === 'undefined' && mediaElementId !== undefined) {
        var view = new playback(mediaElementId);
        view.attachSubscriber(this);
      }
    }

    /**
     * Define global function handlers for ExternalInterface to invoke for API communication.
     *
     * @private
     */
  }, {
    key: "_establishExtIntHandlers",
    value: function _establishExtIntHandlers(id) {
      var _this3 = this;
      log_debug(red5pro_rtmp_NAME, "Subscriber ID provided to client: (".concat(id, ")."));
      var invokeFn = function invokeFn(label) {
        return ['subscriber', label, id.split('-').join('_')].join('_');
      };
      window[invokeFn('r5proConnectClosed')] = function () {
        return _this3.trigger(new SubscriberEvent(SubscriberEventTypes.CONNECTION_CLOSED, _this3));
      };
      window[invokeFn('r5proConnectSuccess')] = function () {
        return _this3.trigger(new SubscriberEvent(SubscriberEventTypes.CONNECT_SUCCESS, _this3));
      };
      window[invokeFn('r5proConnectFailure')] = function () {
        _this3.trigger(new SubscriberEvent(SubscriberEventTypes.CONNECT_FAILURE, _this3));
      };
      window[invokeFn('r5proSubscribeStop')] = function () {
        return _this3.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_STOP, _this3));
      };
      window[invokeFn('r5proSubscribeMetadata')] = function (metadata) {
        var _JSON$parse = JSON.parse(metadata),
          orientation = _JSON$parse.orientation,
          streamingMode = _JSON$parse.streamingMode;
        var orientationInt = parseInt(orientation, 10);
        var previousStreamingMode = _this3._streamingMode;
        if (_this3._orientation !== orientationInt) {
          _this3._orientation = orientationInt;
          _this3.trigger(new SubscriberEvent(SubscriberEventTypes.ORIENTATION_CHANGE, _this3, {
            orientation: orientationInt
          }));
        }
        if (previousStreamingMode !== streamingMode) {
          _this3._streamingMode = streamingMode;
          _this3.trigger(new SubscriberEvent(SubscriberEventTypes.STREAMING_MODE_CHANGE, _this3, {
            streamingMode: streamingMode,
            previousStreamingMode: previousStreamingMode
          }));
        }
        _this3.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_METADATA, _this3, JSON.parse(metadata)));
      };
      window[invokeFn('r5proSubscribeUnpublish')] = function () {
        _this3.onUnpublish();
      };
      window[invokeFn('r5proSubscribePublisherCongestion')] = function (data) {
        return _this3.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_PUBLISHER_CONGESTION, _this3, JSON.parse(data)));
      };
      window[invokeFn('r5proSubscribePublisherRecovery')] = function (data) {
        return _this3.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_PUBLISHER_RECOVERY, _this3, JSON.parse(data)));
      };
      window[invokeFn('r5proSubscribeSendInvoke')] = function (payload) {
        _this3.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_SEND_INVOKE, _this3, typeof payload === 'string' ? JSON.parse(payload) : payload));
      };
      window[invokeFn('r5proSubscribePlayRequest')] = function () {
        _this3.play();
      };
      window[invokeFn('r5proSubscribeStart')] = function () {
        _this3._subscriptionResolver.resolve(_this3);
        _this3.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_START, _this3));
      };
      window[invokeFn('r5proSubscribeInvalidName')] = function () {
        _this3._subscriptionResolver.reject('NetStream.Play.StreamNotFound', _this3);
        _this3.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_INVALID_NAME, _this3));
      };
      window[invokeFn('r5proSubscribeFail')] = function () {
        _this3._subscriptionResolver.reject('NetStream.Failed', _this3);
        _this3.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_FAIL, _this3));
      };
      window[invokeFn('r5proSubscribeVolumeChange')] = function (payload) {
        _this3.trigger(new SubscriberEvent(SubscriberEventTypes.VOLUME_CHANGE, _this3, {
          volume: JSON.parse(payload).volume
        }));
      };
      window[invokeFn('r5proSubscribePlaybackStalled')] = function () {
        log_debug(red5pro_rtmp_NAME, 'playback has stalled...');
      };
      window[invokeFn('r5proSubscribePlaybackTimeChange')] = function (payload) {
        var data = JSON.parse(payload);
        _this3.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_TIME_UPDATE, _this3, {
          time: data.value,
          duration: data.duration
        }));
      };
      window[invokeFn('r5proSubscribePlaybackStateChange')] = function (payload) {
        var code = JSON.parse(payload).code;
        _this3.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_STATE_CHANGE, _this3, {
          code: code,
          state: PlaybackStateReadable[code]
        }));
      };
      window[invokeFn('r5proSubscribeABRLevelChange')] = function (payload) {
        var data = JSON.parse(payload);
        var level = data.level,
          stream = data.stream;
        var settings = JSON.parse(decodeURIComponent(stream));
        _this3.trigger(new SubscriberEvent(RTMPSubscriberEventTypes.ABR_LEVEL_CHANGE, _this3, {
          level: level,
          stream: settings
        }));
      };
    }

    /**
     * Request to initialize the HLS-based Subscriber based on configuration.
     * The returned `Promise` will either resolve with a reference to this instance or reject with an error `String` in failure.
     *
     * @param {Object} options
     *        The initialization configuration map.
     * @return {Promise}
     */
  }, {
    key: "init",
    value: function init(options) {
      var _this4 = this;
      var deferred = new DeferredPromise();
      var version = options.minFlashVersion || red5pro_rtmp_defaultOptions.minFlashVersion;
      if (!browser.supportsFlashVersion(version)) {
        log_warn(red5pro_rtmp_NAME, "Could not resolve RTMPSubscriber instance. Requires minimum Flash Player install of ".concat(version, "."));
        deferred.reject("Could not resolve RTMPSubscriber instance. Requires minimum Flash Player install of ".concat(version, "."));
      } else {
        this._options = Object.assign({}, red5pro_rtmp_defaultOptions, options);
        var establishSourceHandler = function establishSourceHandler() {
          _this4._getViewResolverPromise().then(function (view) {
            _this4._sourceHandler = new red5pro_source_handler_rtmp(_this4, view.view, _this4.getType());
            _this4._glomSourceHandlerAPI(_this4._sourceHandler);
            if (_this4._options) {
              var dfd = _this4._embedPromise;
              _this4._sourceHandler.addSource(_this4._elementId, _this4._options).then(function (subscriberId) {
                _this4._establishExtIntHandlers(subscriberId);
                dfd.resolve(_this4);
              })["catch"](function (err) {
                return dfd.reject(err);
              });
            }
          });
        };
        try {
          browser.injectScript(this._options.swfobjectURL).then(function () {
            var embedDfd = _this4._embedPromise;
            log_debug(red5pro_rtmp_NAME, 'SWFObject embedded.');
            if (_this4._sourceHandler) {
              _this4._sourceHandler.addSource(_this4._elementId, _this4._options).then(function (subscriberId) {
                _this4._establishExtIntHandlers(subscriberId);
                embedDfd.resolve(_this4);
              })["catch"](function (err) {
                embedDfd.reject(err);
              });
              return _this4._getEmbedPromise();
            }
            establishSourceHandler();
            return true;
          }).then(function () {
            _this4._setViewIfNotExist(_this4._view, _this4._options.mediaElementId);
            deferred.resolve(_this4);
          })["catch"](function (err) {
            log_error(red5pro_rtmp_NAME, "Could not embed Flash-based RTMP Player. Reason: ".concat(err));
            if (_this4._sourceHandler) {
              _this4._sourceHandler.disconnect();
            }
            deferred.reject(err);
            _this4.trigger(new SubscriberEvent(RTMPSubscriberEventTypes.EMBED_FAILURE, _this4));
          });
        } catch (e) {
          deferred.reject("Could not inject Flash-based Player into the page. Reason: ".concat(e.message));
          this.trigger(new SubscriberEvent(RTMPSubscriberEventTypes.EMBED_FAILURE, this));
        }
      }
      return deferred.promise;
    }

    /**
     * Still in use for assigning document element view management to this instance.
     * API deprecated in 4.0.0.
     *
     * @private
     */
  }, {
    key: "setView",
    value: function setView(view, elementId) {
      this._view = view;
      this._elementId = elementId;
      this._viewResolver.resolve(this._view);
      return this;
    }

    /**
     * Request to begin subscribing to a stream.
     *
     * @return {Promise}
     *          The returned `Promise` will resolve or reject on successful start of playback.
     */
  }, {
    key: "subscribe",
    value: function subscribe() {
      return this._getSubscriptionResolverPromise();
    }

    /**
     * Request to stop a subscription.
     * The returned `Promise` will either resolve or reject on successful stop of subscription.
     *
     * @return {Promise}
     */
  }, {
    key: "unsubscribe",
    value: function unsubscribe() {
      var _this5 = this;
      log_debug(red5pro_rtmp_NAME, '[unsubscribe]');
      var cb = function cb(resolve, reject) {
        try {
          _this5._sourceHandler.disconnect();
          resolve();
        } catch (e) {
          reject(e.message);
        }
      };
      return new Promise(cb);
    }

    /**
     * Request to start playing the stream.
     */
  }, {
    key: "play",
    value: function play() {
      var _this6 = this;
      log_debug(red5pro_rtmp_NAME, '[play]');
      this._getEmbedPromise().then(function () {
        _this6._sourceHandler.play();
      });
    }

    /**
     * Event handler for completion of embedding Flash element into page.
     *
     * @private
     */
  }, {
    key: "onEmbedComplete",
    value: function onEmbedComplete() {
      log_debug(red5pro_rtmp_NAME, '[embed:complete]');
      this.trigger(new SubscriberEvent(RTMPSubscriberEventTypes.EMBED_SUCCESS, this));
    }

    /**
     * Event handler for failure in embedding Flash element into page.
     *
     * @private
     */
  }, {
    key: "onEmbedFailure",
    value: function onEmbedFailure(err) {
      log_debug(red5pro_rtmp_NAME, "[embed:failure] - ".concat(err));
      this.trigger(new SubscriberEvent(RTMPSubscriberEventTypes.EMBED_FAILURE, this));
    }

    /**
     * Event handler for `Unpublish` of stream subscribed to. Occurs when a broadcaster stops their stream while this subscription stream is open.
     *
     * @private
     */
  }, {
    key: "onUnpublish",
    value: function onUnpublish() {
      log_debug(red5pro_rtmp_NAME, '[onunpublish]');
      if (this._sourceHandler) {
        this._sourceHandler.unpublish();
      }
      this.trigger(new SubscriberEvent(SubscriberEventTypes.PLAY_UNPUBLISH, this));
      if (this._sourceHandler) {
        // This differs slightly from how the WebRTC subscriber works on Unpublish notification.
        // For WebRTC subscribers, there is an immediate disconection dispatched FROM THE SERVER as a notification.
        // In Flash, an unpublish is not a direct correlation to a disconnect for a subscriber, as a NetStream
        //    can stay open without stream data being delivered. In WebRTC, once a stream is stopped ("unpublished")
        //    that connection can not be pumped a new stream as it can on Flash's NetStream.
        // As such, to have the clients "behave" the same, we will request a disconnect on unpublish.
        this._sourceHandler.disconnect();
      }
    }

    /**
     * Returns connection handler for playback.
     * Used in SharedObject communication.
     *
     * @return {Object}
     *
     * @private
     */
  }, {
    key: "getConnection",
    value: function getConnection() {
      return this._sourceHandler;
    }

    /**
     * Returns reference to playback controls if available.
     *
     * @return {PlaybackControls}
     */
  }, {
    key: "getControls",
    value: function getControls() {
      return this._sourceHandler ? this._sourceHandler.getControls() : undefined;
    }

    /**
     * Returns the initialization configuration used in `init()`.
     *
     * @return {Object}
     */
  }, {
    key: "getOptions",
    value: function getOptions() {
      return this._options;
    }

    /**
     * Returns the target view Element.
     *
     * @return {Element}
     */
  }, {
    key: "getPlayer",
    value: function getPlayer() {
      return this._sourceHandler ? this._sourceHandler.getEmbeddedView() : undefined;
    }

    /**
     * Returns the type of implementation: `RTMP`.
     *
     * @return {String}
     */
  }, {
    key: "getType",
    value: function getType() {
      return PlaybackTypes.RTMP.toUpperCase();
    }
  }]);
  return RTMPSubscriber;
}(PlaybackController);
/* harmony default export */ var red5pro_rtmp = (red5pro_rtmp_RTMPSubscriber);
// CONCATENATED MODULE: ./src/js/subscriber/red5pro-source-handler-hls.js


function red5pro_source_handler_hls_typeof(obj) { "@babel/helpers - typeof"; return red5pro_source_handler_hls_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, red5pro_source_handler_hls_typeof(obj); }
function red5pro_source_handler_hls_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function red5pro_source_handler_hls_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, red5pro_source_handler_hls_toPropertyKey(descriptor.key), descriptor); } }
function red5pro_source_handler_hls_createClass(Constructor, protoProps, staticProps) { if (protoProps) red5pro_source_handler_hls_defineProperties(Constructor.prototype, protoProps); if (staticProps) red5pro_source_handler_hls_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function red5pro_source_handler_hls_toPropertyKey(arg) { var key = red5pro_source_handler_hls_toPrimitive(arg, "string"); return red5pro_source_handler_hls_typeof(key) === "symbol" ? key : String(key); }
function red5pro_source_handler_hls_toPrimitive(input, hint) { if (red5pro_source_handler_hls_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (red5pro_source_handler_hls_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function red5pro_source_handler_hls_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) red5pro_source_handler_hls_setPrototypeOf(subClass, superClass); }
function red5pro_source_handler_hls_setPrototypeOf(o, p) { red5pro_source_handler_hls_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return red5pro_source_handler_hls_setPrototypeOf(o, p); }
function red5pro_source_handler_hls_createSuper(Derived) { var hasNativeReflectConstruct = red5pro_source_handler_hls_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = red5pro_source_handler_hls_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = red5pro_source_handler_hls_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return red5pro_source_handler_hls_possibleConstructorReturn(this, result); }; }
function red5pro_source_handler_hls_possibleConstructorReturn(self, call) { if (call && (red5pro_source_handler_hls_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return red5pro_source_handler_hls_assertThisInitialized(self); }
function red5pro_source_handler_hls_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function red5pro_source_handler_hls_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function red5pro_source_handler_hls_getPrototypeOf(o) { red5pro_source_handler_hls_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return red5pro_source_handler_hls_getPrototypeOf(o); }








var red5pro_source_handler_hls_NAME = 'HLSSourceHandler';

/**
 * Source Handler for HLS-based Subscribers, which serves as a Presentation Controller between view and subscriber.
 *
 * @extends EventEmitter
 * @extends SubscriberPlaybackController
 *
 * @private
 */
var red5pro_source_handler_hls_HLSSourceHandler = /*#__PURE__*/function (_PlaybackController) {
  red5pro_source_handler_hls_inherits(HLSSourceHandler, _PlaybackController);
  var _super = red5pro_source_handler_hls_createSuper(HLSSourceHandler);
  function HLSSourceHandler(media, type) {
    var _this;
    red5pro_source_handler_hls_classCallCheck(this, HLSSourceHandler);
    _this = _super.call(this);
    _this.media = media;
    _this.clone = _this.media.cloneNode(true);
    _this.parent = _this.media.parentNode;
    _this.holder = _this._determineHolder(media);
    _this.playerType = type;
    _this._mediaSource = undefined;
    _this._isVOD = false;
    _this._controls = undefined;
    _this._orientation = 0;
    _this._streamingMode = 'Video/Audio';
    _this._autoLayoutOrientation = true;
    _this._playbackNotificationCenter = _this.media;
    _this._handleOrientationChange = _this._handleOrientationChange.bind(red5pro_source_handler_hls_assertThisInitialized(_this));
    _this._onOrientationMetadata = _this._onOrientationMetadata.bind(red5pro_source_handler_hls_assertThisInitialized(_this));
    _this._onStreamingModeMetadata = _this._onStreamingModeMetadata.bind(red5pro_source_handler_hls_assertThisInitialized(_this));
    browser.onFullScreenStateChange(_this._handleFullScreenChange.bind(red5pro_source_handler_hls_assertThisInitialized(_this)));
    return _this;
  }

  /**
   * Established DOM Element order for playback.
   *
   * @param {Element} media
   *        The target media element: e.g., `video` or `audio`.
   *
   * @private
   */
  red5pro_source_handler_hls_createClass(HLSSourceHandler, [{
    key: "_determineHolder",
    value: function _determineHolder(media) {
      if (media.parentNode.classList.contains('red5pro-media-container')) {
        return media.parentNode;
      } else {
        var parent = media.parentNode;
        var div = browser.createElement('div');
        div.classList.add('red5pro-media-container');
        parent.insertBefore(div, media);
        parent.removeChild(media);
        div.appendChild(media);
        return div;
      }
    }

    /**
     * Clean up of DOM Element order upon stop of playback.
     *
     * @private
     */
  }, {
    key: "_cleanUp",
    value: function _cleanUp() {
      // Return to prior DOM manipulation.
      var el = this.media;
      var src = this._mediaSource;
      var elParent = el.parentNode;
      var mediaHolder = this.holder;
      if (src) {
        el.removeChild(src);
      }
      if (elParent) {
        elParent.removeChild(el);
        // The object parent could be a wrapper child in the original parent element.
        if (elParent !== this.parent) {
          elParent.parentNode.removeChild(elParent);
          mediaHolder = this.parent;
        }
      } else {
        try {
          el.remove();
        } catch (e) {
          log_warn(red5pro_source_handler_hls_NAME, "Issue in DOM cleanup of HLS video object: ".concat(e.message));
        }
      }
      this.media = this.clone.cloneNode(true);
      mediaHolder.appendChild(this.media);
      if (this._controls) {
        this._controls.detach();
      }
      this.media.setAttribute('autoplay', true);
      this.clone = this.media.cloneNode(true);
      this.parent = this.media.parentNode;
      this.holder = this._determineHolder(this.media);
      this._orientation = 0;
      this.isVOD = false;
    }

    /**
     * Assigns and handlers event notificiations coming from the media notifier (e.g., `video` or `audio` element).
     *
     * @param {Object} notifier
     *
     * @private
     */
  }, {
    key: "_addPlaybackHandlers",
    value: function _addPlaybackHandlers(notifier) {
      var _this2 = this;
      var controls = this.getControls();
      var hasControls = typeof controls !== 'undefined';
      notifier.oncanplay = function () {
        if (controls) {
          controls.enable(true);
        }
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
          code: PlaybackState.AVAILABLE,
          state: PlaybackStateReadable[PlaybackState.AVAILABLE]
        }));
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.VOLUME_CHANGE, undefined, {
          volume: notifier.volume
        }));
      };
      notifier.ondurationchange = function (event) {
        // eslint-disable-line no-unused-vars
        if (!isNaN(notifier.duration) && Number.isFinite(notifier.duration)) {
          _this2.isVOD = true;
        }
        if (!_this2.isVOD && hasControls) {
          controls.setPlaybackDuration(1);
        } else if (hasControls) {
          controls.setPlaybackDuration(notifier.duration);
        }
      };
      notifier.onended = function () {
        log_debug(red5pro_source_handler_hls_NAME, '[videoelement:onended]');
        if (hasControls) {
          controls.setState(PlaybackState.IDLE);
        }
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
          code: PlaybackState.IDLE,
          state: PlaybackStateReadable[PlaybackState.IDLE]
        }));
      };
      notifier.ontimeupdate = function (event) {
        // eslint-disable-line no-unused-vars
        if (hasControls) {
          if (!self.isVOD) {
            controls.setSeekTime(1, 1);
          } else {
            controls.setSeekTime(notifier.currentTime, self.isVOD ? notifier.duration : undefined);
          }
        }
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_TIME_UPDATE, undefined, {
          time: notifier.currentTime,
          duration: notifier.duration
        }));
      };
      notifier.onseeked = function (event) {// eslint-disable-line no-unused-vars
        //      debug(NAME, 'Seeked.')
      };
      notifier.onseeking = function (event) {// eslint-disable-line no-unused-vars
        //      debug(NAME, 'Seeking.')
      };
      notifier.onplay = function () {
        if (hasControls) {
          controls.setState(PlaybackState.PLAYING);
        }
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
          code: PlaybackState.PLAYING,
          state: PlaybackStateReadable[PlaybackState.PLAYING]
        }));
      };
      notifier.onpause = function () {
        if (hasControls) {
          controls.setState(PlaybackState.PAUSED);
        }
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.PLAYBACK_STATE_CHANGE, undefined, {
          code: PlaybackState.PAUSED,
          state: PlaybackStateReadable[PlaybackState.PAUSED]
        }));
      };
      notifier.onvolumechange = function (event) {
        // eslint-disable-line no-unused-vars
        if (hasControls && controls.getVolume() !== _this2.media.volume) {
          controls.setVolume(_this2.media.volume);
        }
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.VOLUME_CHANGE, undefined, {
          volume: notifier.muted ? 0 : notifier.volume
        }));
      };
      // for debugging purposes.
      notifier.onencrypted = function () {
        log_debug(red5pro_source_handler_hls_NAME, '[videoelement:event] encrypted');
      };
      notifier.onemptied = function () {
        log_debug(red5pro_source_handler_hls_NAME, '[videoelement:event] emptied');
      };
      notifier.onloadeddata = function () {
        log_debug(red5pro_source_handler_hls_NAME, '[videoelement:event] loadeddata');
        /*
        this.trigger(new SubscriberEvent(SubscriberEventTypes.VIDEO_DIMENSIONS_CHANGE, undefined, {
          width: this.media.videoWidth,
          height: this.media.videoHeight
        }))
        */
      };

      notifier.onresize = function () {
        log_debug(red5pro_source_handler_hls_NAME, '[videoelement:event] resize');
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.VIDEO_DIMENSIONS_CHANGE, undefined, {
          width: _this2.media.videoWidth,
          height: _this2.media.videoHeight
        }));
      };
      notifier.onloadedmetadata = function () {
        log_debug(red5pro_source_handler_hls_NAME, '[videoelement:event] loadedmetadata');
        _this2.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_START, undefined, {}));
      };
      notifier.onloadstart = function () {
        log_debug(red5pro_source_handler_hls_NAME, '[videoelement:event] loadedstart');
      };
      notifier.onstalled = function () {
        log_debug(red5pro_source_handler_hls_NAME, '[videoelement:event] stalled');
      };
      notifier.onsuspend = function () {
        log_debug(red5pro_source_handler_hls_NAME, '[videoelement:event] suspend');
      };
      notifier.onwaiting = function () {
        log_debug(red5pro_source_handler_hls_NAME, '[videoelement:event] waiting');
      };
      //    notifier.onprogress = () => { debug(NAME, '[videoelement:event] progress. Played: ' + notifier.played.length + ', Buffered: ' + notifier.buffered.length + '.') }
    }

    /**
     * Event handler for change in fullscreen state.
     *
     * @param {Boolean} isFullScreen
     *
     * @private
     */
  }, {
    key: "_handleFullScreenChange",
    value: function _handleFullScreenChange(isFullScreen) {
      if (isFullScreen) {
        this.holder.classList.add('red5pro-media-container-full-screen');
        this.media.classList.add('red5pro-media-container-full-screen');
      } else {
        this.holder.classList.remove('red5pro-media-container-full-screen');
        this.media.classList.remove('red5pro-media-container-full-screen');
      }
      this.trigger(new SubscriberEvent(SubscriberEventTypes.FULL_SCREEN_STATE_CHANGE, undefined, isFullScreen));
    }

    /**
     * Define the source element on the HLS playback element.
     *
     * @param {String} url
     *        The playback endpoint URL.
     * @param {String} type
     *        The mime type of the playback stream.
     * @param {Object} options
     *        The initialization configuration map.
     *
     * @private
     */
  }, {
    key: "_embedMediaSource",
    value: function _embedMediaSource(url, type, options) {
      // eslint-disable-line no-unused-vars
      var deferred = new DeferredPromise();
      try {
        var source = browser.createElement('source');
        source.type = type;
        source.src = url;
        this.media.type = type;
        if (this.media.firstChild) {
          this.media.insertBefore(source, this.media.firstChild);
        } else {
          this.media.appendChild(source);
        }
        this._mediaSource = source;
        this._autoLayoutOrientation = options.autoLayoutOrientation;
        browser.onOrientationMetadata(this.media, this._onOrientationMetadata);
        browser.onStreamingModeMetadata(this.media, this._onStreamingModeMetadata);
        deferred.resolve();
      } catch (e) {
        deferred.reject(e.message);
      }
      return deferred.promise;
    }

    /**
     * Delegate responder to incoming changes of `orientation` metadata on HLS playback tracks.
     *
     * @param {Object} metdata
     *
     * @private
     */
  }, {
    key: "_onOrientationMetadata",
    value: function _onOrientationMetadata(metadata) {
      var orientation = metadata.orientation,
        resolution = metadata.resolution;
      var orientationInt = parseInt(orientation, 10);
      if (orientation && this._orientation !== orientationInt) {
        log_debug(red5pro_source_handler_hls_NAME, 'Metadata received: ' + JSON.stringify(metadata, null, 2));
        this._orientation = orientationInt;
        if (this._autoLayoutOrientation) {
          applyOrientation(this.media, this._orientation, metadataResolutionToObject(resolution));
          this._handleOrientationChange(this._orientation);
        }
        this.trigger(new SubscriberEvent(SubscriberEventTypes.ORIENTATION_CHANGE, undefined, {
          orientation: this._orientation,
          viewElement: this.media
        }));
        this.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_METADATA, undefined, metadata));
      }
    }

    /**
     * Delegate responder to incoming changes of `streamingMode` metadata on HLS playback tracks.
     *
     * @param {Object} metdata
     *
     * @private
     */
  }, {
    key: "_onStreamingModeMetadata",
    value: function _onStreamingModeMetadata(metadata) {
      var streamingMode = metadata.streamingMode;
      var previousStreamingMode = this._streamingMode;
      if (streamingMode && previousStreamingMode !== streamingMode) {
        log_debug(red5pro_source_handler_hls_NAME, 'Metadata received: ' + JSON.stringify(metadata, null, 2));
        this._streamingMode = streamingMode;
        this.trigger(new SubscriberEvent(SubscriberEventTypes.STREAMING_MODE_CHANGE, undefined, {
          streamingMode: this._streamingMode,
          previousStreamingMode: previousStreamingMode,
          viewElement: this.media
        }));
        this.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_METADATA, undefined, metadata));
      }
    }

    /**
     * Request to setup the presentation of a playback stream using HLS.
     *
     * @param {String} url
     *        The endpoint URL for playback.
     * @param {String} type
     *        The mime type for playback.
     * @param {Object} options
     *        The initialization configuration map.
     *
     * @returns {Promise}
     */
  }, {
    key: "addSource",
    value: function addSource(url, type, options) {
      var _this3 = this;
      log_debug(red5pro_source_handler_hls_NAME, '[addsource]');
      this.holder = this._determineHolder(this.media);
      var deferred = new DeferredPromise();
      var hasDefinedControls = options.controls;
      var isMuted = browser.hasAttributeDefined(this.media, 'muted');
      var isAutoplay = browser.hasAttributeDefined(this.media, 'autoplay');
      // Will handle autoplay explicitly to capture issues with browser restrictions and send notifications.
      if (!isMuted) {
        this.media.setAttribute('autoplay', false);
      }
      var usePlaybackControls = browser.hasAttributeDefined(this.media, 'controls') && browser.hasClassDefined(this.media, 'red5pro-media');
      this._embedMediaSource(url, type, options).then(function () {
        if (hasDefinedControls || usePlaybackControls) {
          if (hasDefinedControls) {
            _this3._controls = options.controls;
          } else {
            _this3._controls = new PlaybackControlsImpl(_this3, _this3.holder);
          }
          _this3.media.controls = false;
          _this3._controls.setAsVOD(_this3.isVOD);
          _this3._controls.setMutedState(isMuted);
        }
        _this3._addPlaybackHandlers(_this3._playbackNotificationCenter);
        if (isAutoplay) {
          _this3.attemptAutoplay(options.muteOnAutoplayRestriction);
        }
        deferred.resolve();
      })["catch"](function (e) {
        return deferred.reject(e);
      });
      return deferred.promise;
    }

    /**
     * Request to connect to stream.
     */
  }, {
    key: "connect",
    value: function connect() {
      log_debug(red5pro_source_handler_hls_NAME, '[connect]');
    }
  }, {
    key: "attemptAutoplay",
    value: function attemptAutoplay() {
      var _this4 = this;
      var muteOnAutoplay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      this.play()["catch"](function (e) {
        if (muteOnAutoplay) {
          _this4.mute();
          _this4.play().then(function () {
            _this4.trigger(new SubscriberEvent(SubscriberEventTypes.AUTO_PLAYBACK_MUTED, undefined, {
              element: _this4.media
            }));
          })["catch"](function (err) {
            _this4.trigger(new SubscriberEvent(SubscriberEventTypes.AUTO_PLAYBACK_FAILURE, undefined, {
              error: err.message ? err.message : err,
              element: _this4.media
            }));
          });
        } else {
          _this4.trigger(new SubscriberEvent(SubscriberEventTypes.AUTO_PLAYBACK_FAILURE, undefined, {
            error: e.message ? e.message : e,
            element: _this4.media
          }));
        }
      });
    }
  }, {
    key: "play",
    value: function play() {
      log_debug(red5pro_source_handler_hls_NAME, '[videoelement:action] play');
      var deferred = new DeferredPromise();
      try {
        var maybePromise = this.media.play();
        if (maybePromise) {
          maybePromise.then(function () {
            log_debug(red5pro_source_handler_hls_NAME, '[videoelement:action] play (START)');
            deferred.resolve();
          })["catch"](deferred.reject);
        } else {
          log_debug(red5pro_source_handler_hls_NAME, '[videoelement:action] play (START)');
          deferred.resolve();
        }
      } catch (e) {
        log_error(red5pro_source_handler_hls_NAME, '[videoelement:action] play (FAULT) - ' + e.message);
        deferred.reject(e);
      }
      return deferred.promise;
    }
  }, {
    key: "pause",
    value: function pause() {
      log_debug(red5pro_source_handler_hls_NAME, '[videoelement:action] pause');
      try {
        this.media.pause();
      } catch (e) {
        log_debug(red5pro_source_handler_hls_NAME, '[videoelement:action] pause (FAULT) - ' + e.message);
      }
    }
  }, {
    key: "resume",
    value: function resume() {
      log_debug(red5pro_source_handler_hls_NAME, '[videoelement:action] resume');
      try {
        var maybePromise = this.media.play();
        if (maybePromise) {
          maybePromise.then(function () {
            return log_debug(red5pro_source_handler_hls_NAME, '[videoelement:action] play (START)');
          })["catch"](function (err) {
            return log_error(red5pro_source_handler_hls_NAME, '[videoelement:action] play (FAULT) ' + (err.message ? err.message : err));
          });
        }
      } catch (e) {
        log_error(red5pro_source_handler_hls_NAME, '[videoelement:action] resume (FAULT) - ' + e.message);
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      try {
        this.media.stop();
      } catch (e) {
        // ok.
      }
    }
  }, {
    key: "mute",
    value: function mute() {
      this.media.muted = true;
      var controls = this.getControls();
      if (controls) {
        controls.setMutedState(true);
      }
    }
  }, {
    key: "unmute",
    value: function unmute() {
      this.media.muted = false;
      var controls = this.getControls();
      if (controls) {
        controls.setMutedState(false);
      }
    }
  }, {
    key: "setVolume",
    value: function setVolume(value) {
      this.unmute();
      this.media.volume = value;
    }
  }, {
    key: "seekTo",
    value: function seekTo(percentage) {
      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      this.media.currentTime = duration ? percentage * duration : percentage;
    }
  }, {
    key: "toggleFullScreen",
    value: function toggleFullScreen() {
      try {
        browser.toggleFullScreen(this.holder);
      } catch (e) {
        throw e;
        // nada.
      }
    }

    /**
     * Notification of current stream being in an unpublished state.
     * The stream enters an unpublished state when the broadcaster stop the stream and the subscriber is still connected.
     */
  }, {
    key: "unpublish",
    value: function unpublish() {
      try {
        this.stop();
        this.media.onended.call(this.media);
      } catch (e) {
        // nada.
      }
    }

    /**
     * Request to disconnect playback.
     */
  }, {
    key: "disconnect",
    value: function disconnect() {
      this._cleanUp();
    }

    /**
     * Responder to change in orientation received through metadata.
     *
     * @param {Number} orientation
     *        The orientation value.
     *
     * @private
     */
  }, {
    key: "_handleOrientationChange",
    value: function _handleOrientationChange(orientation) {
      if (this._controls && orientation % 180 !== 0) {
        this.holder.classList.add('red5pro-media-background');
        this.media.classList.remove('red5pro-media-background');
      }
    }

    /*
     * || SHARED OBJECT INTEGRATION NOT AVAILABLE FOR HLS PLAYBACK ||
     */
    // eslint-disable-next-line no-unused-vars
  }, {
    key: "addSharedObjectResponseHandler",
    value: function addSharedObjectResponseHandler(handler) {}

    // eslint-disable-next-line no-unused-vars
  }, {
    key: "removeSharedObjectResponseHandler",
    value: function removeSharedObjectResponseHandler(handler) {}

    // eslint-disable-next-line no-unused-vars
  }, {
    key: "sendToSharedObject",
    value: function sendToSharedObject(name, callName, message) {}

    // eslint-disable-next-line no-unused-vars
  }, {
    key: "sendPropertyToSharedObject",
    value: function sendPropertyToSharedObject(name, key, value) {}

    // eslint-disable-next-line no-unused-vars
  }, {
    key: "getRemoteSharedObject",
    value: function getRemoteSharedObject(sharedObjectName) {}

    // eslint-disable-next-line no-unused-vars
  }, {
    key: "connectToSharedObject",
    value: function connectToSharedObject(sharedObjectName) {}

    // eslint-disable-next-line no-unused-vars
  }, {
    key: "closeSharedObject",
    value: function closeSharedObject(sharedObjectName) {}

    /**
     * Returns playback controls if available.
     *
     * @returns {PlaybackControls}
     */
  }, {
    key: "getControls",
    value: function getControls() {
      return this._controls;
    }

    /**
     * Returns the subscriber type associated with this controller.
     *
     * @returns {String}
     */
  }, {
    key: "getType",
    value: function getType() {
      return this.playerType;
    }

    /**
     * Returns flag of video being recognized as VOD (Video On Demand).
     *
     * @returns {Boolean}
     */
  }, {
    key: "isVOD",
    get: function get() {
      return this._isVOD;
    }

    /**
     * Sets flag of video being considered as VOD (Video On Demand).
     *
     * @param {Boolean} value
     */,
    set: function set(value) {
      this._isVOD = value;
      if (this._controls) {
        this._controls.setAsVOD(value);
      }
    }
  }]);
  return HLSSourceHandler;
}(PlaybackController);
/* harmony default export */ var red5pro_source_handler_hls = (red5pro_source_handler_hls_HLSSourceHandler);
// CONCATENATED MODULE: ./src/js/subscriber/red5pro-hls.js


function red5pro_hls_typeof(obj) { "@babel/helpers - typeof"; return red5pro_hls_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, red5pro_hls_typeof(obj); }
function red5pro_hls_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function red5pro_hls_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, red5pro_hls_toPropertyKey(descriptor.key), descriptor); } }
function red5pro_hls_createClass(Constructor, protoProps, staticProps) { if (protoProps) red5pro_hls_defineProperties(Constructor.prototype, protoProps); if (staticProps) red5pro_hls_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function red5pro_hls_toPropertyKey(arg) { var key = red5pro_hls_toPrimitive(arg, "string"); return red5pro_hls_typeof(key) === "symbol" ? key : String(key); }
function red5pro_hls_toPrimitive(input, hint) { if (red5pro_hls_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (red5pro_hls_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function red5pro_hls_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) red5pro_hls_setPrototypeOf(subClass, superClass); }
function red5pro_hls_setPrototypeOf(o, p) { red5pro_hls_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return red5pro_hls_setPrototypeOf(o, p); }
function red5pro_hls_createSuper(Derived) { var hasNativeReflectConstruct = red5pro_hls_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = red5pro_hls_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = red5pro_hls_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return red5pro_hls_possibleConstructorReturn(this, result); }; }
function red5pro_hls_possibleConstructorReturn(self, call) { if (call && (red5pro_hls_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return red5pro_hls_assertThisInitialized(self); }
function red5pro_hls_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function red5pro_hls_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function red5pro_hls_getPrototypeOf(o) { red5pro_hls_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return red5pro_hls_getPrototypeOf(o); }













var red5pro_hls_NAME = 'HLSSubscriber';

/**
 * Simple generation og unique subscriber id.
 *
 * @return {String}
 *
 * @private
 */
var red5pro_hls_generateSubscriptionId = function generateSubscriptionId() {
  var id = Math.floor(Math.random() * 0x10000).toString(16);
  return "subscriber-".concat(id);
};

// Default to secure settings.
var red5pro_hls_defaultOptions = {
  protocol: 'https',
  port: 443,
  app: 'live',
  mimeType: 'application/x-mpegURL',
  mediaElementId: 'red5pro-subscriber',
  autoLayoutOrientation: true,
  muteOnAutoplayRestriction: true,
  subscriptionId: red5pro_hls_generateSubscriptionId()
};
var urlRegex = /^http(|s).*\.m3u8/g;

/**
 * Main entry for HLS-based Subscriber.
 *
 * @extends EventEmitter
 * @extends SubscriberPlaybackController
 */
var red5pro_hls_HLSSubscriber = /*#__PURE__*/function (_PlaybackController) {
  red5pro_hls_inherits(HLSSubscriber, _PlaybackController);
  var _super = red5pro_hls_createSuper(HLSSubscriber);
  function HLSSubscriber() {
    var _this;
    red5pro_hls_classCallCheck(this, HLSSubscriber);
    _this = _super.call(this);
    _this._options = undefined;
    _this._view = undefined;
    _this._sourceHandler = undefined;
    _this._socketHelper = undefined;
    _this._viewResolver = new DeferredPromise();
    _this._subscriptionResolver = new DeferredPromise();
    _this._boundBubbleSubscriberEvents = _this.bubbleSubscriberEvents.bind(red5pro_hls_assertThisInitialized(_this));
    return _this;
  }
  red5pro_hls_createClass(HLSSubscriber, [{
    key: "_getViewResolverPromise",
    value: function _getViewResolverPromise() {
      return this._viewResolver.promise;
    }
  }, {
    key: "_getSubscriptionResolverPromise",
    value: function _getSubscriptionResolverPromise() {
      return this._subscriptionResolver.promise;
    }

    /**
     * Proxy event bubbler through handler instance.
     *
     * @private
     */
  }, {
    key: "bubbleSubscriberEvents",
    value: function bubbleSubscriberEvents(event) {
      if (event.type === SubscriberEventTypes.SUBSCRIBE_START) {
        this._subscriptionResolver.resolve(this);
      }
      this.trigger(new SubscriberEvent(event.type, this, event.data));
    }

    /**
     * Gloms the Playback Controls API onto this instance to provide ease in use.
     *
     * @param {Object} handler
     *        The method request handler to bind and forward calls on.
     *
     * @private
     */
  }, {
    key: "_glomSourceHandlerAPI",
    value: function _glomSourceHandlerAPI(handler) {
      var _this2 = this;
      this.play = handler.play.bind(handler);
      this.pause = handler.pause.bind(handler);
      this.resume = handler.resume.bind(handler);
      this.stop = handler.stop.bind(handler);
      this.mute = handler.mute.bind(handler);
      this.unmute = handler.unmute.bind(handler);
      this.setVolume = handler.setVolume.bind(handler);
      this.seekTo = handler.seekTo.bind(handler);
      this.toggleFullScreen = handler.toggleFullScreen.bind(handler);
      handler.on('*', function (event) {
        _this2.trigger(new SubscriberEvent(event.type, _this2, event.data));
      });
    }

    /**
     * Still in use, but hold-over of previous 3.x SDK versions designed to pair views and subscribers. In 4.0.0 it has been internalized.
     * API deprecated.
     *
     * @private
     */
  }, {
    key: "_setViewIfNotExist",
    value: function _setViewIfNotExist(currentView) {
      var mediaElementId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      if (typeof currentView === 'undefined' && mediaElementId !== undefined) {
        var view = new playback(mediaElementId);
        view.attachSubscriber(this);
      }
    }

    /**
     * Attempt to initialize the subscription handler for HLS.
     *
     * @param {Object} options
     *        The initialization configuration.
     * @param {Object} handler
     *        The handler instance that will manage view interaction and events.
     *
     * @private
     */
  }, {
    key: "_initHandler",
    value: function _initHandler(options) {
      var _this3 = this;
      var _this$_options = this._options,
        streamName = _this$_options.streamName,
        mimeType = _this$_options.mimeType;
      var url = streamName.match(urlRegex) ? streamName : optionsToHlsURL(this._options);
      this._sourceHandler.on('*', this._boundBubbleSubscriberEvents);
      this._sourceHandler.addSource(url, mimeType, options).then(function () {
        _this3.trigger(new SubscriberEvent(SubscriberEventTypes.CONNECT_SUCCESS));
        _this3._trackStreamingModeState(_this3._sourceHandler);
      })["catch"](function (err) {
        log_error(red5pro_hls_NAME, 'Could not establish an HLS Subscriber: ' + err);
        _this3.trigger(new SubscriberEvent(SubscriberEventTypes.CONNECT_FAILURE));
      });
    }

    /**
     * Handles notification on change of streamingMode which relates to audio/video mute of broadcast-side.
     *
     * @param {EventEmitter} notifier
     *
     * @private
     */
  }, {
    key: "_trackStreamingModeState",
    value: function _trackStreamingModeState(notifier) {
      var _this4 = this;
      notifier.on(SubscriberEventTypes.STREAMING_MODE_CHANGE, function (event) {
        var _event$data = event.data,
          streamingMode = _event$data.streamingMode,
          previousStreamingMode = _event$data.previousStreamingMode;
        if (streamingMode !== 'Empty' && previousStreamingMode === 'Empty') {
          _this4._sourceHandler.disconnect();
          var _this4$_options = _this4._options,
            streamName = _this4$_options.streamName,
            mimeType = _this4$_options.mimeType;
          var url = streamName.match(urlRegex) ? streamName : optionsToHlsURL(_this4._options);
          _this4._sourceHandler.addSource(url, mimeType, _this4._options).then(function () {
            return _this4.subscribe();
          })["catch"](function (error) {
            return error(red5pro_hls_NAME, error);
          });
        }
      });
    }

    /**
     * Request to initialize the HLS-based Subscriber based on configuration.
     * The returned `Promise` will either resolve with a reference to this instance or reject with an error `String` in failure.
     *
     * @param {Object} options
     *        The initialization configuration map.
     * @return {Promise}
     */
  }, {
    key: "init",
    value: function init(options) {
      var _this5 = this;
      var deferred = new DeferredPromise();
      if (!browser.supportsHLS()) {
        log_warn(red5pro_hls_NAME, "Could not resolve HLSSubscriber instance.");
        deferred.reject("Could not resolve HLSSubscriber instance.");
      } else if (options.connectionParams && !websocket_isSupported()) {
        // If `connectionParams` are provided in the init config,
        //  then a subsequent validation call is made on a WebSocket to 
        //  ensure that this client is allowed access.
        log_warn(red5pro_hls_NAME, "Could not resolve HLSSubscriber instance with connection params. WebSocket support is required.");
        deferred.reject(red5pro_hls_NAME, "Could not resolve HLSSubscriber instance with connection params. WebSocket support is required.");
      } else {
        this._options = Object.assign({}, red5pro_hls_defaultOptions, options);
        var socketPromise = new DeferredPromise();
        if (this._options.connectionParams) {
          try {
            this._socketHelper = new socket_helper(this, 'HLSSubscriptionSocket');
            var socketurl = hlsSocketEndpointFromOptions(this._options, {
              id: this._options.subscriptionId
            });
            this._socketHelper.setUp(socketurl, socketPromise);
          } catch (e) {
            log_error(red5pro_hls_NAME, e.message);
            deferred.reject(red5pro_hls_NAME, "Could not set up WebSocket for authentication with connectionParams: ".concat(e.message));
          }
        } else {
          socketPromise.resolve();
        }
        socketPromise.promise.then(function () {
          // Tear down socket helper if exists.
          // We only needed it to do validation with optional connectionParams.
          if (_this5._socketHelper) {
            _this5._socketHelper.tearDown();
            _this5._socketHelper = undefined;
          }
          _this5._setViewIfNotExist(_this5._view, _this5._options.mediaElementId);
          _this5._getViewResolverPromise().then(function (view) {
            _this5._sourceHandler = new red5pro_source_handler_hls(view.view, _this5.getType());
            _this5._glomSourceHandlerAPI(_this5._sourceHandler);
            if (_this5._options) {
              _this5._initHandler(_this5._options);
            }
          });
          deferred.resolve(_this5);
        })["catch"](function (error) {
          deferred.reject(error);
          _this5.trigger(new SubscriberEvent(SubscriberEventTypes.CONNECT_FAILURE, _this5, error));
        });
      }
      return deferred.promise;
    }

    /**
     * Still in use for assigning document element view management to this instance.
     * API deprecated in 4.0.0.
     *
     * @private
     */
  }, {
    key: "setView",
    value: function setView(view) {
      this._view = view;
      this._viewResolver.resolve(view);
      return this;
    }

    /**
     * Request to begin subscribing to a stream.
     *
     * @return {Promise}
     *          The returned `Promise` will resolve or reject on successful start of playback.
     */
  }, {
    key: "subscribe",
    value: function subscribe() {
      return this._getSubscriptionResolverPromise();
    }

    /**
     * Request to stop a subscription.
     * The returned `Promise` will either resolve or reject on successful stop of subscription.
     *
     * @return {Promise}
     */
  }, {
    key: "unsubscribe",
    value: function unsubscribe() {
      log_debug(red5pro_hls_NAME, '[unscubscribe]');
      var deferred = new DeferredPromise();
      if (this._socketHelper) {
        this._socketHelper.tearDown();
      }
      try {
        this._sourceHandler.stop();
        this._sourceHandler.disconnect();
        deferred.resolve();
      } catch (e) {
        deferred.reject(e.message);
      }
      return deferred.promise;
    }

    /**
     * Returns connection handler for playback.
     *
     * @return {Object}
     */
  }, {
    key: "getConnection",
    value: function getConnection() {
      return this._sourceHandler;
    }

    /**
     * Returns reference to playback controls if available.
     *
     * @return {PlaybackControls}
     */
  }, {
    key: "getControls",
    value: function getControls() {
      return this._sourceHandler ? this._sourceHandler.getControls() : undefined;
    }

    /**
     * Returns the initialization configuration used in `init()`.
     *
     * @return {Object}
     */
  }, {
    key: "getOptions",
    value: function getOptions() {
      return this._options;
    }

    /**
     * Returns the target view Element.
     *
     * @return {Element}
     */
  }, {
    key: "getPlayer",
    value: function getPlayer() {
      return this._view.view;
    }

    /**
     * Returns the type of implementation: `RTC`.
     *
     * @return {String}
     */
  }, {
    key: "getType",
    value: function getType() {
      return PlaybackTypes.HLS.toUpperCase();
    }
  }]);
  return HLSSubscriber;
}(PlaybackController);
/* harmony default export */ var red5pro_hls = (red5pro_hls_HLSSubscriber);
// CONCATENATED MODULE: ./src/js/helper/whipwhep-signaling-helper.js
function whipwhep_signaling_helper_typeof(obj) { "@babel/helpers - typeof"; return whipwhep_signaling_helper_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, whipwhep_signaling_helper_typeof(obj); }
function whipwhep_signaling_helper_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ whipwhep_signaling_helper_regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == whipwhep_signaling_helper_typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function whipwhep_signaling_helper_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function whipwhep_signaling_helper_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { whipwhep_signaling_helper_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { whipwhep_signaling_helper_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function whipwhep_signaling_helper_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function whipwhep_signaling_helper_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, whipwhep_signaling_helper_toPropertyKey(descriptor.key), descriptor); } }
function whipwhep_signaling_helper_createClass(Constructor, protoProps, staticProps) { if (protoProps) whipwhep_signaling_helper_defineProperties(Constructor.prototype, protoProps); if (staticProps) whipwhep_signaling_helper_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function whipwhep_signaling_helper_toPropertyKey(arg) { var key = whipwhep_signaling_helper_toPrimitive(arg, "string"); return whipwhep_signaling_helper_typeof(key) === "symbol" ? key : String(key); }
function whipwhep_signaling_helper_toPrimitive(input, hint) { if (whipwhep_signaling_helper_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (whipwhep_signaling_helper_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var whipwhep_signaling_helper_NAME = 'WhipWhepSignalingHelper';
var WHIP_ERROR_CODES = new Map();
WHIP_ERROR_CODES.set(400, 'Invalid offer SDP.');
WHIP_ERROR_CODES.set(401, 'Not authorized.');
WHIP_ERROR_CODES.set(404, 'Scope resolver failed for the publish name and / or scope.');
WHIP_ERROR_CODES.set(405, 'Remember to update the URL passed into the WHIP or WHEP client.');
WHIP_ERROR_CODES.set(406, 'Scope connection rejected.');
WHIP_ERROR_CODES.set(409, 'Session already initialized.');
WHIP_ERROR_CODES.set(412, 'Invalid request body.');
WHIP_ERROR_CODES.set(417, 'Session lookup or creation failure.');
var WHEP_ERROR_CODES = new Map();
WHEP_ERROR_CODES.set(400, 'Offer already sent, double POST assumed.');
WHEP_ERROR_CODES.set(401, 'Not authorized.');
WHEP_ERROR_CODES.set(404, 'Scope resolver failed for the playback name and / or scope.');
WHEP_ERROR_CODES.set(406, 'Playback failed due to an exception during creation.');
WHEP_ERROR_CODES.set(409, 'Stream is not available to playback.');
var disallowedPOSTParams = ['transcode'];

/**
 * Inspected URL to test if it has query params.
 * @param {string} url
 * @returns boolean
 *
 * @private
 */
var hasQueryParams = function hasQueryParams(url) {
  var regex = /[?&](.*)=([^&#]*)/;
  var match = regex.exec(url);
  return match && match.length > 0;
};

/**
 * Converts a Link header into a Map of props for easier parsing.
 * @param {string} link
 * @returns Map
 *
 * @private
 */
var headerLinkToObject = function headerLinkToObject(link) {
  var atts = link.split(';').map(function (s) {
    return s.trim();
  });
  var props = atts.map(function (s) {
    if (s.charAt(0) === '<') {
      return ['url', s.substring(1, s.length - 1)];
    }
    return s.split('=');
  });
  return props.reduce(function (acc, curr) {
    return acc.set(curr[0].replaceAll('"', ''), curr[1].replaceAll('"', ''));
  }, new Map());
};

/**
 * Parses link url into protocol and host for ease in assemble for credentialed links.
 * @param {string} url
 * @returns Object { protocol, host }
 *
 * @private
 */
var getHostAndProtocolFromLinkUrl = function getHostAndProtocolFromLinkUrl(url) {
  var parts = url.split(':');
  if (parts.length > 1) {
    return {
      protocol: parts[0],
      host: parts[1]
    };
  }
  return {
    protocol: undefined,
    host: url
  };
};
var whipwhep_signaling_helper_WhipWhepSignalingHelper = /*#__PURE__*/function () {
  function WhipWhepSignalingHelper(url) {
    var enableSignalingChannel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    whipwhep_signaling_helper_classCallCheck(this, WhipWhepSignalingHelper);
    this._url = url;
    // this._resource = url.replace(/\/endpoint\//, '/resource/')
    this._resource = undefined;
    this._enableSignalingChannel = enableSignalingChannel;
  }
  whipwhep_signaling_helper_createClass(WhipWhepSignalingHelper, [{
    key: "getOptions",
    value: function () {
      var _getOptions = whipwhep_signaling_helper_asyncToGenerator(function () {
        var _this = this;
        var additionalParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return /*#__PURE__*/whipwhep_signaling_helper_regeneratorRuntime().mark(function _callee() {
          var optUrl, response, status, headers, headerReg, links;
          return whipwhep_signaling_helper_regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                optUrl = "".concat(_this._url).concat(hasQueryParams(_this._url) ? '&' : '?', "signal=").concat(_this._enableSignalingChannel);
                if (additionalParams) {
                  Object.keys(additionalParams).forEach(function (key) {
                    optUrl += "&".concat(key, "=").concat(additionalParams[key]);
                  });
                }
                log_debug(whipwhep_signaling_helper_NAME, "[whipwhep-options] ".concat(optUrl));
                _context.prev = 3;
                _context.next = 6;
                return fetch(optUrl, {
                  method: 'OPTIONS',
                  mode: 'cors'
                  // headers: {
                  //   'Access-Control-Request-Method': 'POST',
                  //   'Access-Control-Request-Headers': 'Content-Type',
                  // },
                });
              case 6:
                response = _context.sent;
                status = response.status, headers = response.headers;
                if (!(status === 200 || status === 204)) {
                  _context.next = 14;
                  break;
                }
                headerReg = /^(L|l)ink/;
                links = [];
                headers.forEach(function (key, value) {
                  if (headerReg.exec(value)) {
                    if (key.indexOf('rel="ice-server"') > -1) {
                      var link = headerLinkToObject(key);
                      var url = link.get('url');
                      var _getHostAndProtocolFr = getHostAndProtocolFromLinkUrl(url),
                        protocol = _getHostAndProtocolFr.protocol,
                        host = _getHostAndProtocolFr.host;
                      var username = link.get('username');
                      var password = link.get('credential');
                      if (protocol && host && username && password) {
                        links.push({
                          username: username,
                          credential: password,
                          urls: url
                        });
                        //`${protocol}://${username}:${password}@${host}`
                      } else if (url) {
                        links.push({
                          urls: url
                        });
                      }
                    }
                  }
                });
                log_debug(whipwhep_signaling_helper_NAME, "[whipwhep-links]: ".concat(links));
                return _context.abrupt("return", {
                  links: links.length > 0 ? links : undefined
                });
              case 14:
                _context.next = 20;
                break;
              case 16:
                _context.prev = 16;
                _context.t0 = _context["catch"](3);
                log_error(whipwhep_signaling_helper_NAME, _context.t0.message);
                throw _context.t0;
              case 20:
              case "end":
                return _context.stop();
            }
          }, _callee, null, [[3, 16]]);
        })();
      });
      function getOptions() {
        return _getOptions.apply(this, arguments);
      }
      return getOptions;
    }()
    /**
     * Posts offer to WHIP endpoint and resolves with answer SDP and location.
     *
     * @param {string} sdp
     * @param {object} additionalParams
     * @param {boolean} isWHIP
     *
     * @returns {object} { sdp:(string), location:(string)}
     */
  }, {
    key: "postSDPOffer",
    value: function () {
      var _postSDPOffer = whipwhep_signaling_helper_asyncToGenerator(function (sdp) {
        var _this2 = this;
        var additionalParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var isWHIP = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        return /*#__PURE__*/whipwhep_signaling_helper_regeneratorRuntime().mark(function _callee2() {
          var url, payload, response, status, headers, answerSDP, location, parsed, errorMessage;
          return whipwhep_signaling_helper_regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                url = "".concat(_this2._url).concat(hasQueryParams(_this2._url) ? '&' : '?', "signal=").concat(_this2._enableSignalingChannel);
                if (additionalParams) {
                  Object.keys(additionalParams).forEach(function (key) {
                    if (disallowedPOSTParams.indexOf(key) === -1) {
                      url += "&".concat(key, "=").concat(additionalParams[key]);
                    }
                  });
                }
                log_debug(whipwhep_signaling_helper_NAME, "[whipwhep:post-offer] ".concat(url, ": ") + JSON.stringify(sdp, null, 2));
                _context2.prev = 3;
                payload = {
                  method: 'POST',
                  mode: 'cors',
                  headers: {
                    'Content-Type': 'application/sdp'
                  }
                };
                if (sdp && sdp.length > 0) {
                  payload.body = sdp;
                }
                _context2.next = 8;
                return fetch(url, payload);
              case 8:
                response = _context2.sent;
                status = response.status, headers = response.headers;
                if (headers) {
                  headers.forEach(function (value, name) {
                    log_debug(whipwhep_signaling_helper_NAME, "[header] ".concat(name, ": ").concat(value));
                  });
                }
                if (!(status >= 200 && status < 300)) {
                  _context2.next = 27;
                  break;
                }
                _context2.next = 14;
                return response.text();
              case 14:
                answerSDP = _context2.sent;
                location = headers.get('Location') || headers.get('location');
                if (!location) {
                  _context2.next = 22;
                  break;
                }
                if (location.match(/^(http|https)/)) {
                  _this2._resource = location;
                } else {
                  log_debug(whipwhep_signaling_helper_NAME, "[whipwhep-response] Location provided as relative path: ".concat(location));
                  parsed = new URL(_this2._url);
                  parsed.pathname = location.split('?')[0];
                  _this2._resource = parsed.toString().replace(/\/endpoint\//, '/resource/');
                }
                log_debug(whipwhep_signaling_helper_NAME, "[whipwhep-response] ".concat(_this2._resource, ": ").concat(answerSDP));
                return _context2.abrupt("return", {
                  sdp: answerSDP,
                  location: _this2._resource
                });
              case 22:
                log_warn(whipwhep_signaling_helper_NAME, 'Location not provided in header response to Offer.');
                _this2._resource = new URL(_this2._url).toString().replace(/\/endpoint\//, '/resource/');
                return _context2.abrupt("return", {
                  sdp: answerSDP,
                  location: _this2._resource
                });
              case 25:
                _context2.next = 45;
                break;
              case 27:
                if (!(isWHIP && WHIP_ERROR_CODES.get(status))) {
                  _context2.next = 34;
                  break;
                }
                log_debug(whipwhep_signaling_helper_NAME, WHIP_ERROR_CODES.get(status));
                if (!(status === 404 || status === 409)) {
                  _context2.next = 31;
                  break;
                }
                throw new InvalidNameError(WHIP_ERROR_CODES.get(status));
              case 31:
                throw new Error(WHIP_ERROR_CODES.get(status));
              case 34:
                if (!(!isWHIP && WHEP_ERROR_CODES.get(status))) {
                  _context2.next = 41;
                  break;
                }
                log_debug(whipwhep_signaling_helper_NAME, WHEP_ERROR_CODES.get(status));
                if (!(status === 404 || status === 409)) {
                  _context2.next = 38;
                  break;
                }
                throw new InvalidNameError(WHEP_ERROR_CODES.get(status));
              case 38:
                throw new Error(WHEP_ERROR_CODES.get(status));
              case 41:
                _context2.next = 43;
                return response.text();
              case 43:
                errorMessage = _context2.sent;
                throw Error(errorMessage);
              case 45:
                _context2.next = 51;
                break;
              case 47:
                _context2.prev = 47;
                _context2.t0 = _context2["catch"](3);
                log_error(whipwhep_signaling_helper_NAME, _context2.t0.message);
                throw _context2.t0;
              case 51:
              case "end":
                return _context2.stop();
            }
          }, _callee2, null, [[3, 47]]);
        })();
      });
      function postSDPOffer(_x) {
        return _postSDPOffer.apply(this, arguments);
      }
      return postSDPOffer;
    }()
  }, {
    key: "postSDPAnswer",
    value: function () {
      var _postSDPAnswer = whipwhep_signaling_helper_asyncToGenerator( /*#__PURE__*/whipwhep_signaling_helper_regeneratorRuntime().mark(function _callee3(sdp) {
        var response, status, errorMessage;
        return whipwhep_signaling_helper_regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              log_debug(whipwhep_signaling_helper_NAME, "[whipwhep:post-answer] ".concat(this._resource, ": ") + JSON.stringify(sdp, null, 2));
              _context3.prev = 1;
              _context3.next = 4;
              return fetch(this._resource, {
                method: 'PATCH',
                mode: 'cors',
                headers: {
                  'Content-Type': 'application/sdp'
                },
                body: sdp
              });
            case 4:
              response = _context3.sent;
              status = response.status;
              if (!(status >= 200 && status < 300)) {
                _context3.next = 10;
                break;
              }
              return _context3.abrupt("return", {
                success: true,
                code: status
              });
            case 10:
              if (!WHEP_ERROR_CODES.get(status)) {
                _context3.next = 15;
                break;
              }
              log_debug(whipwhep_signaling_helper_NAME, WHEP_ERROR_CODES.get(status));
              throw new Error(WHEP_ERROR_CODES.get(status));
            case 15:
              _context3.next = 17;
              return response.text();
            case 17:
              errorMessage = _context3.sent;
              throw Error(errorMessage);
            case 19:
              _context3.next = 25;
              break;
            case 21:
              _context3.prev = 21;
              _context3.t0 = _context3["catch"](1);
              log_error(whipwhep_signaling_helper_NAME, _context3.t0.message);
              throw _context3.t0;
            case 25:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this, [[1, 21]]);
      }));
      function postSDPAnswer(_x2) {
        return _postSDPAnswer.apply(this, arguments);
      }
      return postSDPAnswer;
    }()
  }, {
    key: "trickle",
    value: function () {
      var _trickle = whipwhep_signaling_helper_asyncToGenerator( /*#__PURE__*/whipwhep_signaling_helper_regeneratorRuntime().mark(function _callee4(sdp) {
        var response, status, headers, candidate, errorMessage;
        return whipwhep_signaling_helper_regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              log_debug(whipwhep_signaling_helper_NAME, "[whipwhep-trickle] ".concat(this._resource, ": ") + JSON.stringify(sdp, null, 2));
              _context4.prev = 1;
              _context4.next = 4;
              return fetch(this._resource, {
                method: 'PATCH',
                mode: 'cors',
                headers: {
                  'Content-Type': 'application/trickle-ice-sdpfrag'
                },
                body: sdp
              });
            case 4:
              response = _context4.sent;
              status = response.status, headers = response.headers;
              if (!(status >= 200 && status < 300)) {
                _context4.next = 14;
                break;
              }
              _context4.next = 9;
              return response.text();
            case 9:
              candidate = _context4.sent;
              log_debug(whipwhep_signaling_helper_NAME, "[whipwhep-response] ".concat(this._resource, ": ").concat(candidate));
              return _context4.abrupt("return", {
                candidate: candidate
              });
            case 14:
              if (!(status === 405)) {
                _context4.next = 19;
                break;
              }
              console.log('Remember to update the URL passed into the WHIP or WHEP client');
              throw new Error('Remember to update the URL passed into the WHIP or WHEP client');
            case 19:
              _context4.next = 21;
              return response.text();
            case 21:
              errorMessage = _context4.sent;
              throw Error(errorMessage);
            case 23:
              _context4.next = 29;
              break;
            case 25:
              _context4.prev = 25;
              _context4.t0 = _context4["catch"](1);
              console.error(_context4.t0);
              throw _context4.t0;
            case 29:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this, [[1, 25]]);
      }));
      function trickle(_x3) {
        return _trickle.apply(this, arguments);
      }
      return trickle;
    }()
  }, {
    key: "tearDown",
    value: function () {
      var _tearDown = whipwhep_signaling_helper_asyncToGenerator( /*#__PURE__*/whipwhep_signaling_helper_regeneratorRuntime().mark(function _callee5() {
        return whipwhep_signaling_helper_regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (this._resource) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return");
            case 2:
              log_debug(whipwhep_signaling_helper_NAME, "[whipwhep-teardown]");
              _context5.next = 5;
              return fetch(this._resource, {
                method: 'DELETE',
                mode: 'cors'
              });
            case 5:
              this._url = undefined;
              this._resource = undefined;
            case 7:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function tearDown() {
        return _tearDown.apply(this, arguments);
      }
      return tearDown;
    }()
  }, {
    key: "post",
    value: function () {
      var _post = whipwhep_signaling_helper_asyncToGenerator( /*#__PURE__*/whipwhep_signaling_helper_regeneratorRuntime().mark(function _callee6() {
        return whipwhep_signaling_helper_regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              log_debug(whipwhep_signaling_helper_NAME, "[whipwhep] transport called.");
              return _context6.abrupt("return", true);
            case 2:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function post() {
        return _post.apply(this, arguments);
      }
      return post;
    }()
  }]);
  return WhipWhepSignalingHelper;
}();
/* harmony default export */ var whipwhep_signaling_helper = (whipwhep_signaling_helper_WhipWhepSignalingHelper);
// CONCATENATED MODULE: ./src/js/subscriber/red5pro-whep.js
function red5pro_whep_typeof(obj) { "@babel/helpers - typeof"; return red5pro_whep_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, red5pro_whep_typeof(obj); }
function red5pro_whep_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function red5pro_whep_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? red5pro_whep_ownKeys(Object(source), !0).forEach(function (key) { red5pro_whep_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : red5pro_whep_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function red5pro_whep_defineProperty(obj, key, value) { key = red5pro_whep_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function red5pro_whep_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ red5pro_whep_regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == red5pro_whep_typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function red5pro_whep_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function red5pro_whep_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { red5pro_whep_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { red5pro_whep_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function red5pro_whep_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function red5pro_whep_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, red5pro_whep_toPropertyKey(descriptor.key), descriptor); } }
function red5pro_whep_createClass(Constructor, protoProps, staticProps) { if (protoProps) red5pro_whep_defineProperties(Constructor.prototype, protoProps); if (staticProps) red5pro_whep_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function red5pro_whep_toPropertyKey(arg) { var key = red5pro_whep_toPrimitive(arg, "string"); return red5pro_whep_typeof(key) === "symbol" ? key : String(key); }
function red5pro_whep_toPrimitive(input, hint) { if (red5pro_whep_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (red5pro_whep_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function red5pro_whep_get() { if (typeof Reflect !== "undefined" && Reflect.get) { red5pro_whep_get = Reflect.get.bind(); } else { red5pro_whep_get = function _get(target, property, receiver) { var base = red5pro_whep_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return red5pro_whep_get.apply(this, arguments); }
function red5pro_whep_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = red5pro_whep_getPrototypeOf(object); if (object === null) break; } return object; }
function red5pro_whep_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) red5pro_whep_setPrototypeOf(subClass, superClass); }
function red5pro_whep_setPrototypeOf(o, p) { red5pro_whep_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return red5pro_whep_setPrototypeOf(o, p); }
function red5pro_whep_createSuper(Derived) { var hasNativeReflectConstruct = red5pro_whep_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = red5pro_whep_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = red5pro_whep_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return red5pro_whep_possibleConstructorReturn(this, result); }; }
function red5pro_whep_possibleConstructorReturn(self, call) { if (call && (red5pro_whep_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return red5pro_whep_assertThisInitialized(self); }
function red5pro_whep_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function red5pro_whep_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function red5pro_whep_getPrototypeOf(o) { red5pro_whep_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return red5pro_whep_getPrototypeOf(o); }













var red5pro_whep_NAME = 'WHEPClient';
var ICE_GATHER_TIMEOUT = 5000;

/**
 * Simple generation of unique subscriber id.
 *
 * @return {String}
 *
 * @private
 */
var red5pro_whep_generateSubscriptionId = function generateSubscriptionId() {
  var id = Math.floor(Math.random() * 0x10000).toString(16);
  return "subscriber-".concat(id);
};

// Default to secure settings.
var red5pro_whep_defaultOptions = {
  protocol: 'wss',
  port: 443,
  app: 'live',
  autoLayoutOrientation: true,
  mediaElementId: 'red5pro-subscriber',
  rtcConfiguration: {
    iceServers: [{
      urls: 'stun:stun2.l.google.com:19302'
    }],
    iceCandidatePoolSize: 2,
    bundlePolicy: 'max-bundle'
  },
  // Favored over iceServers.
  iceServers: undefined,
  // Deprecated. Preserved for backward-compatibility.
  iceTransport: IceTransportTypes.UDP,
  muteOnAutoplayRestriction: true,
  maintainConnectionOnSubscribeErrors: false,
  signalingSocketOnly: false,
  dataChannelConfiguration: undefined,
  socketSwitchDelay: 1000,
  bypassAvailable: false,
  maintainStreamVariant: false,
  enableLiveSeek: false,
  enableChannelSignaling: true,
  // WHIP/WHEP specific
  trickleIce: true,
  // Flag to use trickle ice to send candidates
  postEmptyOffer: false,
  // Flag to post empty offer to WHEP endpoint
  mungeOffer: undefined,
  mungeAnswer: undefined
};
var red5pro_whep_WHEPClient = /*#__PURE__*/function (_RTCSubscriber) {
  red5pro_whep_inherits(WHEPClient, _RTCSubscriber);
  var _super = red5pro_whep_createSuper(WHEPClient);
  /**
   * Constructor. Providing arguments will automatically kick of connection sequence.
   * Leaving arguments unset allows for more control and follows same pattern of init -> subscribe as RTCSubscriber.
   * @param {string} url Optional endpoint for WHEP. Example: https://your-red5pro.com/live/whep/endpoint/stream1
   * @param {HTMLMediaElement} element Optional media element to play media in.
   * @param {boolean} trickleIce Optional request to trickle candidates. Preferred: true.
   */
  function WHEPClient(url, element) {
    var _this;
    var trickleIce = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    red5pro_whep_classCallCheck(this, WHEPClient);
    _this = _super.call(this);
    var optionsFromUrl = url ? optionsFromWhipWhepUrl(url) : red5pro_whep_defaultOptions;
    optionsFromUrl.mediaElementId = element ? element.id : red5pro_whep_defaultOptions.mediaElementId;
    optionsFromUrl.trickleIce = trickleIce;
    _this._whipHelper = undefined;
    if (url) {
      _this._internalConnect(optionsFromUrl);
    }
    return _this;
  }

  /**
   * Internal connection sequence if used constructor with arguments.
   *
   * @param {Object} options
   *        The initialization configuration map.
   *
   * @private
   */
  red5pro_whep_createClass(WHEPClient, [{
    key: "_internalConnect",
    value: function () {
      var _internalConnect2 = red5pro_whep_asyncToGenerator( /*#__PURE__*/red5pro_whep_regeneratorRuntime().mark(function _callee(options) {
        return red5pro_whep_regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.init(options);
            case 2:
              _context.next = 4;
              return this.subscribe();
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _internalConnect(_x) {
        return _internalConnect2.apply(this, arguments);
      }
      return _internalConnect;
    }()
    /**
     * Ensures gathering state complete for ICE.
     *
     * @param {RTCPeerConnection} connection
     * @returns Promise
     *
     * @private
     */
  }, {
    key: "waitToGatherIce",
    value: function () {
      var _waitToGatherIce = red5pro_whep_asyncToGenerator( /*#__PURE__*/red5pro_whep_regeneratorRuntime().mark(function _callee2(connection) {
        return red5pro_whep_regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", new Promise(function (resolve) {
                if (connection.iceGatheringState === 'complete') {
                  connection.addIceCandidate({
                    candidate: ''
                  }).then(function () {
                    resolve({
                      local: connection.localDescription
                    });
                  })["catch"](function (e) {
                    log_error(red5pro_whep_NAME, e.message || e);
                    resolve({
                      local: connection.localDescription
                    });
                  });
                } else {
                  var t = setTimeout(function () {
                    clearTimeout(t);
                    connection.addIceCandidate({
                      candidate: ''
                    }).then(function () {
                      resolve({
                        local: connection.localDescription
                      });
                    })["catch"](function (e) {
                      log_error(red5pro_whep_NAME, e.message || e);
                      resolve({
                        local: connection.localDescription
                      });
                    });
                  }, ICE_GATHER_TIMEOUT);
                  connection.addEventListener('icegatheringstatechange', function () {
                    if (connection.iceGatheringState === 'complete') {
                      clearTimeout(t);
                      connection.addIceCandidate({
                        candidate: ''
                      }).then(function () {
                        resolve({
                          local: connection.localDescription
                        });
                      })["catch"](function (e) {
                        log_error(red5pro_whep_NAME, e.message || e);
                        resolve({
                          local: connection.localDescription
                        });
                      });
                    }
                  });
                }
              }));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function waitToGatherIce(_x2) {
        return _waitToGatherIce.apply(this, arguments);
      }
      return waitToGatherIce;
    }()
    /**
     * Sends a candidate to the server over WHEP.
     *
     * @param {Object} candidate
     *        The peer candidate description.
     *
     * @private
     */
  }, {
    key: "_sendCandidate",
    value: function _sendCandidate(candidate) {
      log_debug(red5pro_whep_NAME, '[sendcandidate]');
      this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.CANDIDATE_START, this, candidate));
    }

    /**
     * POSTs SDP to WHEP endpoint.
     *
     * @param {RTCSessionDescription} sessionDescription
     *       The session description to POST.
     * @param {boolean} withTrickle
     * @returns { sdp, location }
     *
     * @private
     */
  }, {
    key: "_postOffer",
    value: function () {
      var _postOffer2 = red5pro_whep_asyncToGenerator(function (sessionDescription) {
        var _this2 = this;
        var withTrickle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return /*#__PURE__*/red5pro_whep_regeneratorRuntime().mark(function _callee3() {
          var _this2$_options, maintainStreamVariant, videoEncoding, audioEncoding, connectionParams, postEmptyOffer, mungeOffer, params, cleanedSDP;
          return red5pro_whep_regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                _this2$_options = _this2._options, maintainStreamVariant = _this2$_options.maintainStreamVariant, videoEncoding = _this2$_options.videoEncoding, audioEncoding = _this2$_options.audioEncoding, connectionParams = _this2$_options.connectionParams, postEmptyOffer = _this2$_options.postEmptyOffer, mungeOffer = _this2$_options.mungeOffer;
                params = red5pro_whep_objectSpread(red5pro_whep_objectSpread({}, connectionParams), {}, {
                  doNotSwitch: maintainStreamVariant
                });
                if (typeof videoEncoding !== 'undefined' && videoEncoding !== PlaybackVideoEncoder.NONE) {
                  params.videoEncoding = videoEncoding;
                }
                if (typeof audioEncoding !== 'undefined' && audioEncoding !== PlaybackAudioEncoder.NONE) {
                  params.audioEncoding = audioEncoding;
                }
                cleanedSDP = '';
                if (!postEmptyOffer) {
                  cleanedSDP = sessionDescription.sdp;
                  if (mungeOffer) {
                    cleanedSDP = mungeOffer(cleanedSDP);
                  }
                  if (!withTrickle) {
                    cleanedSDP = removeTrickle(cleanedSDP);
                    cleanedSDP = injectEndOfCandidates(cleanedSDP);
                  }
                }
                _context3.next = 9;
                return _this2._whipHelper.postSDPOffer(cleanedSDP, params, false);
              case 9:
                return _context3.abrupt("return", _context3.sent);
              case 12:
                _context3.prev = 12;
                _context3.t0 = _context3["catch"](0);
                log_error(red5pro_whep_NAME, _context3.t0.message || _context3.t0);
                if (_context3.t0 instanceof InvalidNameError) {
                  _this2.onStreamUnavailable(_context3.t0);
                } else {
                  _this2.trigger(new SubscriberEvent(SubscriberEventTypes.CONNECT_FAILURE, _this2));
                  _this2.unsubscribe();
                  _this2._subscriptionResolver.reject("Stream failure.");
                }
                // throw e
              case 16:
              case "end":
                return _context3.stop();
            }
          }, _callee3, null, [[0, 12]]);
        })();
      });
      function _postOffer(_x3) {
        return _postOffer2.apply(this, arguments);
      }
      return _postOffer;
    }()
    /**
     * POSTs empty SDP to WHEP endpoint.
     *
     * @returns Promise
     * @private
     */
  }, {
    key: "_postEmptyOffer",
    value: function () {
      var _postEmptyOffer2 = red5pro_whep_asyncToGenerator( /*#__PURE__*/red5pro_whep_regeneratorRuntime().mark(function _callee4() {
        var _this$_options, maintainStreamVariant, videoEncoding, audioEncoding, connectionParams, params;
        return red5pro_whep_regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.prev = 0;
              _this$_options = this._options, maintainStreamVariant = _this$_options.maintainStreamVariant, videoEncoding = _this$_options.videoEncoding, audioEncoding = _this$_options.audioEncoding, connectionParams = _this$_options.connectionParams;
              params = red5pro_whep_objectSpread(red5pro_whep_objectSpread({}, connectionParams), {}, {
                doNotSwitch: maintainStreamVariant
              });
              if (typeof videoEncoding !== 'undefined' && videoEncoding !== PlaybackVideoEncoder.NONE) {
                params.videoEncoding = videoEncoding;
              }
              if (typeof audioEncoding !== 'undefined' && audioEncoding !== PlaybackAudioEncoder.NONE) {
                params.audioEncoding = audioEncoding;
              }
              _context4.next = 7;
              return this._whipHelper.postSDPOffer('', params, false);
            case 7:
              return _context4.abrupt("return", _context4.sent);
            case 10:
              _context4.prev = 10;
              _context4.t0 = _context4["catch"](0);
              log_error(red5pro_whep_NAME, _context4.t0.message || _context4.t0);
              this.onStreamUnavailable(_context4.t0);
              throw _context4.t0;
            case 15:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this, [[0, 10]]);
      }));
      function _postEmptyOffer() {
        return _postEmptyOffer2.apply(this, arguments);
      }
      return _postEmptyOffer;
    }()
    /**
     * POSTs SDP Answer to Whep endpoint.
     *
     * @param {string} streamName
     * @param {string} subscriptionId
     * @param {RTCSessionDescription} sessionDescription
     *
     * @private
     */
  }, {
    key: "_postAnswer",
    value: function () {
      var _postAnswer2 = red5pro_whep_asyncToGenerator( /*#__PURE__*/red5pro_whep_regeneratorRuntime().mark(function _callee5(streamName, subscriptionId, sessionDescription) {
        var mungeAnswer, sdp, cleanedSDP;
        return red5pro_whep_regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              mungeAnswer = this._options.mungeAnswer;
              log_debug(red5pro_whep_NAME, "[sendanswer]: streamname(".concat(streamName, "), subscriptionid(").concat(subscriptionId, ")"));
              sdp = sessionDescription.sdp;
              cleanedSDP = sdp;
              if (mungeAnswer) {
                cleanedSDP = mungeAnswer(cleanedSDP);
              }
              _context5.next = 7;
              return this._whipHelper.postSDPAnswer(cleanedSDP);
            case 7:
              return _context5.abrupt("return", _context5.sent);
            case 8:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function _postAnswer(_x4, _x5, _x6) {
        return _postAnswer2.apply(this, arguments);
      }
      return _postAnswer;
    }()
    /**
     * Sends Candidates as PATCH to WHEP endpoint.
     * @param {string} sdp The SDP with candidates
     * @returns Promise
     *
     * @private
     */
  }, {
    key: "_postCandidateFragments",
    value: function () {
      var _postCandidateFragments2 = red5pro_whep_asyncToGenerator( /*#__PURE__*/red5pro_whep_regeneratorRuntime().mark(function _callee6(sdp) {
        var frag;
        return red5pro_whep_regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              /**
               * Below splits the PATCH between host and srflx candidates.
               */
              /*
              const hostFrag = webrtc.generateSDPCandidateFrag(sdp, 'host')
              const srflxFrag = webrtc.generateSDPCandidateFrag(sdp, 'srflx', true)
              await this._whipHelper.trickle(hostFrag)
              return new Promise((resolve, reject) => {
                const postSrflx = () => {
                  setTimeout(async () => {
                    await this._whipHelper.trickle(srflxFrag)
                    resolve()
                  }, 150)
                }
                postSrflx()
              })
              */
              frag = generateSDPCandidateFrag(sdp, undefined, true);
              _context6.next = 3;
              return this._whipHelper.trickle(frag);
            case 3:
              return _context6.abrupt("return", _context6.sent);
            case 4:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function _postCandidateFragments(_x7) {
        return _postCandidateFragments2.apply(this, arguments);
      }
      return _postCandidateFragments;
    }()
    /**
     * Request offer over WHEP service.
     *
     * @private
     */
  }, {
    key: "_requestOffer",
    value: function () {
      var _requestOffer2 = red5pro_whep_asyncToGenerator( /*#__PURE__*/red5pro_whep_regeneratorRuntime().mark(function _callee7() {
        var _this$_options2, trickleIce, postEmptyOffer, streamName, subscriptionId, mungeOffer, mungeAnswer, connection, _yield$this$_postEmpt, sdp, offerSDP, whepOffer, _yield$this$_postOffe, _sdp, munged, _offerSDP, answer, _yield$this$waitToGat, local, _yield$this$waitToGat2, _local, cleanedSDP;
        return red5pro_whep_regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              log_debug(red5pro_whep_NAME, '[requestoffer]');
              _this$_options2 = this._options, trickleIce = _this$_options2.trickleIce, postEmptyOffer = _this$_options2.postEmptyOffer, streamName = _this$_options2.streamName, subscriptionId = _this$_options2.subscriptionId, mungeOffer = _this$_options2.mungeOffer, mungeAnswer = _this$_options2.mungeAnswer;
              connection = this.getPeerConnection(); // connection.addEventListener('track', (event) => {
              //   debug(NAME, `(ontrack) Peer Add Stream: ${event.streams}`)
              //   //   if (event.streams && event.streams.length > 0) {
              //   //     this.onAnswerMediaStream(event.streams[0])
              //   //   }
              // })
              _context7.prev = 3;
              if (!postEmptyOffer) {
                _context7.next = 17;
                break;
              }
              this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.OFFER_START, this));
              _context7.next = 8;
              return this._postEmptyOffer();
            case 8:
              _yield$this$_postEmpt = _context7.sent;
              sdp = _yield$this$_postEmpt.sdp;
              this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.OFFER_END, this));
              offerSDP = new RTCSessionDescription({
                type: 'offer',
                sdp: sdp
              });
              log_debug(red5pro_whep_NAME, "[requestoffer:empty:remote] ".concat(JSON.stringify(offerSDP, null, 2)));
              _context7.next = 15;
              return connection.setRemoteDescription(offerSDP);
            case 15:
              _context7.next = 34;
              break;
            case 17:
              connection.addTransceiver('video', {
                direction: 'recvonly'
              });
              connection.addTransceiver('audio', {
                direction: 'recvonly'
              });
              this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.OFFER_START, this));
              _context7.next = 22;
              return connection.createOffer();
            case 22:
              whepOffer = _context7.sent;
              this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.OFFER_END, this));
              _context7.next = 26;
              return this._postOffer(whepOffer, trickleIce);
            case 26:
              _yield$this$_postOffe = _context7.sent;
              _sdp = _yield$this$_postOffe.sdp;
              munged = mungeOffer ? mungeOffer(_sdp) : _sdp;
              console.log('MUNGED OFFER?', munged);
              _offerSDP = new RTCSessionDescription({
                type: 'offer',
                sdp: munged
              });
              log_debug(red5pro_whep_NAME, "[requestoffer:remote] ".concat(JSON.stringify(_offerSDP, null, 2)));
              _context7.next = 34;
              return connection.setRemoteDescription(_offerSDP);
            case 34:
              _context7.next = 36;
              return connection.createAnswer();
            case 36:
              answer = _context7.sent;
              answer.sdp = mungeAnswer ? mungeAnswer(answer.sdp) : answer.sdp;
              if (!(trickleIce && connection.canTrickleIceCandidates)) {
                _context7.next = 56;
                break;
              }
              log_debug(red5pro_whep_NAME, '[trickle:ice] enabled');
              answer.sdp = injectTrickle(answer.sdp);
              _context7.next = 43;
              return connection.setLocalDescription(answer);
            case 43:
              log_debug(red5pro_whep_NAME, "[create:answer:local] ".concat(JSON.stringify({
                type: 'answer',
                sdp: answer.sdp
              }, null, 2)));
              this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.ANSWER_START, this, answer));
              _context7.next = 47;
              return this._postAnswer(streamName, subscriptionId, answer);
            case 47:
              this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.ANSWER_END, this));
              _context7.next = 50;
              return this.waitToGatherIce(connection);
            case 50:
              _yield$this$waitToGat = _context7.sent;
              local = _yield$this$waitToGat.local;
              _context7.next = 54;
              return this._postCandidateFragments(local.sdp);
            case 54:
              _context7.next = 71;
              break;
            case 56:
              log_debug(red5pro_whep_NAME, '[trickle:ice] disabled');
              answer.sdp = removeTrickle(answer.sdp);
              _context7.next = 60;
              return connection.setLocalDescription(answer);
            case 60:
              _context7.next = 62;
              return this.waitToGatherIce(connection);
            case 62:
              _yield$this$waitToGat2 = _context7.sent;
              _local = _yield$this$waitToGat2.local;
              cleanedSDP = removeTrickle(_local.sdp);
              cleanedSDP = injectEndOfCandidates(cleanedSDP);
              log_debug(red5pro_whep_NAME, "[create:answer:local] ".concat(JSON.stringify({
                type: 'answer',
                sdp: cleanedSDP
              }, null, 2)));
              this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.ANSWER_START, this, {
                type: 'answer',
                sdp: cleanedSDP
              }));
              _context7.next = 70;
              return this._postAnswer(streamName, subscriptionId, {
                type: 'answer',
                sdp: cleanedSDP
              });
            case 70:
              this.trigger(new SubscriberEvent(RTCSubscriberEventTypes.ANSWER_END, this));
            case 71:
              _context7.next = 77;
              break;
            case 73:
              _context7.prev = 73;
              _context7.t0 = _context7["catch"](3);
              log_error(red5pro_whep_NAME, _context7.t0);
              throw _context7.t0;
            case 77:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this, [[3, 73]]);
      }));
      function _requestOffer() {
        return _requestOffer2.apply(this, arguments);
      }
      return _requestOffer;
    }()
    /**
     * Disconnect and teardown after close of subscription.
     *
     * @private
     */
  }, {
    key: "_disconnect",
    value: function _disconnect() {
      if (this._whipHelper) {
        this._whipHelper.tearDown();
      }
      this._whipHelper = undefined;
      red5pro_whep_get(red5pro_whep_getPrototypeOf(WHEPClient.prototype), "_disconnect", this).call(this);
    }

    /**
     * Request to initialize the WebRTC-based Subscriber based on configuration.
     * The returned `Promise` will either resolve with a reference to this instance or reject with an error `String` in failure.
     *
     * @param {Object} options
     *        The initialization configuration map.
     * @param {Object} mediaTransform
     *        The defined transforms to pipe decoding through. InsertableStreams API.
     *            {
     *              video: (function|null),
     *              audio: (function|null),
     *              worker: { video: (Worker|null), audio: (Worker|null) },
     *              transformFrameType: (TransformFrameTypes), pipeOptions: (object),
     *            }
     *        If you have transform functions that can run on the main thread, provide them in `video` and/or `audio`.
     *        If you have transform functions that should be run in a separate thread, utilize the `worker` option providing a `WebWorker`.
     *        By default, the transform function will be supplied an RTCEncodedVideoFrame or RTCEncodedAudioFrame. If you would prefer to receive either a VideoFrame or AudioData instead, use the transfromFrameType of TransformFrameTypes.PACKET.
     *        You can provide some options that will be sent when defining pipe as `pipeOptions`. Read more here: https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/pipeThrough
     *        The `WebWorker` - if utilized - needs to confirm to a specific API that will be called from the SDK.
     *
     * @return {Promise}
     */
  }, {
    key: "init",
    value: function () {
      var _init = red5pro_whep_asyncToGenerator(function (options) {
        var _this3 = this;
        var mediaTransform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
        return /*#__PURE__*/red5pro_whep_regeneratorRuntime().mark(function _callee8() {
          var _this3$_options, protocol, host, port, app, streamName, subscriptionId, enableChannelSignaling, proto, baseUrl;
          return red5pro_whep_regeneratorRuntime().wrap(function _callee8$(_context8) {
            while (1) switch (_context8.prev = _context8.next) {
              case 0:
                if (webrtc_isSupported()) {
                  _context8.next = 4;
                  break;
                }
                throw new Error('Cannot create WebRTC playback instance. Your environment does not support WebRTC and/or WebSockets.');
              case 4:
                _this3._disconnect();
                _this3._options = red5pro_whep_objectSpread(red5pro_whep_objectSpread({}, red5pro_whep_defaultOptions), options);
                _this3._options.subscriptionId = _this3._options.subscriptionId || red5pro_whep_generateSubscriptionId();
                _this3$_options = _this3._options, protocol = _this3$_options.protocol, host = _this3$_options.host, port = _this3$_options.port, app = _this3$_options.app, streamName = _this3$_options.streamName, subscriptionId = _this3$_options.subscriptionId, enableChannelSignaling = _this3$_options.enableChannelSignaling;
                proto = protocol === 'ws' ? 'http' : 'https';
                baseUrl = "".concat(proto, "://").concat(host, ":").concat(port, "/").concat(app);
                _this3._whipUrl = "".concat(baseUrl, "/whep/endpoint/").concat(streamName, "?requestId=").concat(subscriptionId);
                _this3._whipHelper = new whipwhep_signaling_helper(_this3._whipUrl, enableChannelSignaling);
                _this3._peerHelper = new webrtc_helper_sub(_this3);
                _this3._messageTransport = _this3._whipHelper;
                _this3._mediaTransform = mediaTransform;
                if (!!_this3._mediaTransform && !supportsInsertableStreams()) {
                  _this3.trigger(new SubscriberEvent(RTCSubscriberEventTypes.UNSUPPORTED_FEATURE, _this3, {
                    feature: 'Insertable Streams',
                    message: 'You provided Media Transforms for track processing, but your current browser does not support the Insertable Streams API.'
                  }));
                  _this3._mediaTransform = undefined;
                }
                return _context8.abrupt("return", _this3);
              case 17:
              case "end":
                return _context8.stop();
            }
          }, _callee8);
        })();
      });
      function init(_x8) {
        return _init.apply(this, arguments);
      }
      return init;
    }()
    /**
     * Request to begin subscribing to a stream.
     *
     * @return {Promise}
     *          The returned `Promise` will resolve or reject on successful start of playback.
     *        There are several processes that occur in order to establish a WebRTC subscription that involve - but are not limited to - ICE communication and assigning of local and remote SDPs on peer connections.
     */
  }, {
    key: "subscribe",
    value: function () {
      var _subscribe = red5pro_whep_asyncToGenerator( /*#__PURE__*/red5pro_whep_regeneratorRuntime().mark(function _callee9() {
        var _this$_options3, streamName, mediaElementId, rtcConfiguration, liveSeek, _this$_options4, enableChannelSignaling, dataChannelConfiguration, dataChannelAllowed, view, hlsjsRef, usePlaybackControlsUI, options, _yield$this$_whipHelp, links, dcConfig, configuration;
        return red5pro_whep_regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              _this$_options3 = this._options, streamName = _this$_options3.streamName, mediaElementId = _this$_options3.mediaElementId, rtcConfiguration = _this$_options3.rtcConfiguration, liveSeek = _this$_options3.liveSeek;
              _this$_options4 = this._options, enableChannelSignaling = _this$_options4.enableChannelSignaling, dataChannelConfiguration = _this$_options4.dataChannelConfiguration; // Set default data channel configuration if not defined and severing socket on signal end.
              // TODO: Set this as more "private" with `red5pro-<streamname>`
              dataChannelAllowed = enableChannelSignaling && webrtc_supportsDataChannel();
              if (dataChannelAllowed && !dataChannelConfiguration) {
                dataChannelConfiguration = {
                  name: "red5pro"
                };
                this._options.dataChannelConfiguration = dataChannelConfiguration;
              }
              this._options.enableChannelSignaling = dataChannelAllowed;

              // Note: In regular WebRTC Subscriber, the signalingSocketOnly property refers to using a WebSocket
              //       for signaling and connection setup only. After connection established, it switches to using
              //       a DataChannel for communication. Here was are saying that if there is DataChannel support in the browser,
              //       and we have set enableChannelSignaling to true, then we will offer and open the DataChannel.
              this._options.signalingSocketOnly = this._options.enableChannelSignaling;
              _context9.prev = 6;
              this._setViewIfNotExist(this._view, mediaElementId);
              _context9.next = 10;
              return this._getViewResolverPromise();
            case 10:
              view = _context9.sent;
              if (liveSeek && liveSeek.enabled) {
                hlsjsRef = liveSeek.hlsjsRef, usePlaybackControlsUI = liveSeek.usePlaybackControlsUI, options = liveSeek.options;
                if (browser.supportsHLS() || browser.supportsNonNativeHLS(hlsjsRef)) {
                  this._sourceHandler = new red5pro_source_handler_rtc_seekable(view.view, this.getType(), options, usePlaybackControlsUI);
                } else {
                  log_error(red5pro_whep_NAME, "Could not utilize the 'LiveSeek' request. This feature requires either native HLS playback or hls.js as a depenency.");
                  this._sourceHandler = new red5pro_source_handler_rtc(view.view, this.getType());
                }
              } else {
                this._sourceHandler = new red5pro_source_handler_rtc(view.view, this.getType());
              }
              this._glomSourceHandlerAPI(this._sourceHandler);
              this._initHandler(this._options, this._sourceHandler);
              this._getAvailabilityResolverPromise()["catch"](function () {
                /* passed up through overarching promise. */
              });
              _context9.next = 17;
              return this._whipHelper.getOptions();
            case 17:
              _yield$this$_whipHelp = _context9.sent;
              links = _yield$this$_whipHelp.links;
              if (links) {
                this._options.iceServers = links;
              }
              dcConfig = this._options.enableChannelSignaling ? dataChannelConfiguration : undefined;
              configuration = rtcConfiguration; // If not currently defined:
              if (typeof rtcConfiguration.encodedInsertableStreams === 'undefined') {
                configuration = Object.assign(rtcConfiguration, {
                  encodedInsertableStreams: !!this._mediaTransform
                });
              }
              this._connect(configuration, dcConfig, this._options.iceServers);
              this._connectionClosed = false;
              return _context9.abrupt("return", this._getSubscriptionResolverPromise());
            case 28:
              _context9.prev = 28;
              _context9.t0 = _context9["catch"](6);
              this.trigger(new SubscriberEvent(SubscriberEventTypes.CONNECT_FAILURE), this, _context9.t0);
              throw _context9.t0;
            case 32:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this, [[6, 28]]);
      }));
      function subscribe() {
        return _subscribe.apply(this, arguments);
      }
      return subscribe;
    }()
    /**
     * Event handler for receipt of a `MediaStream`.
     *
     * @param {MediaStream} stream
     *        The stream returned on the Peer Connection.
     *
     * @private
     */
  }, {
    key: "onAnswerMediaStream",
    value: function () {
      var _onAnswerMediaStream = red5pro_whep_asyncToGenerator(function () {
        var _this4 = this;
        var stream = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
        return /*#__PURE__*/red5pro_whep_regeneratorRuntime().mark(function _callee10() {
          var done, view;
          return red5pro_whep_regeneratorRuntime().wrap(function _callee10$(_context10) {
            while (1) switch (_context10.prev = _context10.next) {
              case 0:
                // eslint-disable-line no-unused-vars
                _this4.trigger(new SubscriberEvent(RTCSubscriberEventTypes.ANSWER_END, _this4));
                _context10.next = 3;
                return _this4._setUpMediaTransform(_this4._mediaTransform, _this4.getPeerConnection());
              case 3:
                done = _context10.sent;
                _context10.next = 6;
                return _this4._getViewResolverPromise();
              case 6:
                view = _context10.sent;
                view.attachStream(stream);
                _this4._mediaStream = stream;
                // Note: the following is used to try and mimic client-side streamingMode events.
                // this._addStreamHandlers(this._mediaStream)
                _this4.trigger(new SubscriberEvent(RTCSubscriberEventTypes.ON_ADD_STREAM, _this4, _this4._mediaStream));
              case 10:
              case "end":
                return _context10.stop();
            }
          }, _callee10);
        })();
      });
      function onAnswerMediaStream() {
        return _onAnswerMediaStream.apply(this, arguments);
      }
      return onAnswerMediaStream;
    }()
    /**
     * Event handler for open of Peer Connection.
     *
     * @private
     */
  }, {
    key: "onPeerConnectionOpen",
    value: function onPeerConnectionOpen() {
      var enableChannelSignaling = this._options.enableChannelSignaling;
      red5pro_whep_get(red5pro_whep_getPrototypeOf(WHEPClient.prototype), "onPeerConnectionOpen", this).call(this);
      this._subscriptionResolver.resolve(this);
      // If we are not using a DataChannel for signaling, then we notify of start.
      if (!enableChannelSignaling) {
        this.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_START, this));
      }
      this._playIfAutoplaySet(this._options, this._view);
      this._startSeekable(this._options, this._view);
    }

    /**
     * Event handler for open notification on optional data channel.
     *
     * @param {RTCDataChannel} dataChannel
     *
     * @private
     */
  }, {
    key: "onDataChannelOpen",
    value: function onDataChannelOpen(dataChannel) {
      var dataChannelConfiguration = this._options.dataChannelConfiguration;
      red5pro_whep_get(red5pro_whep_getPrototypeOf(WHEPClient.prototype), "onDataChannelOpen", this).call(this, dataChannel);
      if (dataChannelConfiguration) {
        var name = dataChannelConfiguration.name;
        red5pro_whep_get(red5pro_whep_getPrototypeOf(WHEPClient.prototype), "onDataChannelAvailable", this).call(this, name);
      } else {
        red5pro_whep_get(red5pro_whep_getPrototypeOf(WHEPClient.prototype), "onDataChannelAvailable", this).call(this);
      }
      this.trigger(new SubscriberEvent(SubscriberEventTypes.SUBSCRIBE_START, this));
    }

    /**
     * Returns the current WebSocket connection helper if established. Due to using WHEP, this does not exist.
     *
     * @return {SubscriptionSocketHelper}
     *
     * @private
     */
  }, {
    key: "getConnection",
    value: function getConnection() {
      return undefined;
    }
  }]);
  return WHEPClient;
}(red5pro_rtc);
/* harmony default export */ var red5pro_whep = (red5pro_whep_WHEPClient);
// CONCATENATED MODULE: ./src/js/subscriber/index.js


function subscriber_typeof(obj) { "@babel/helpers - typeof"; return subscriber_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, subscriber_typeof(obj); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || subscriber_unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function subscriber_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return subscriber_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return subscriber_arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return subscriber_arrayLikeToArray(arr); }
function subscriber_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function subscriber_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function subscriber_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, subscriber_toPropertyKey(descriptor.key), descriptor); } }
function subscriber_createClass(Constructor, protoProps, staticProps) { if (protoProps) subscriber_defineProperties(Constructor.prototype, protoProps); if (staticProps) subscriber_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function subscriber_toPropertyKey(arg) { var key = subscriber_toPrimitive(arg, "string"); return subscriber_typeof(key) === "symbol" ? key : String(key); }
function subscriber_toPrimitive(input, hint) { if (subscriber_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (subscriber_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function subscriber_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) subscriber_setPrototypeOf(subClass, superClass); }
function subscriber_setPrototypeOf(o, p) { subscriber_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return subscriber_setPrototypeOf(o, p); }
function subscriber_createSuper(Derived) { var hasNativeReflectConstruct = subscriber_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = subscriber_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = subscriber_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return subscriber_possibleConstructorReturn(this, result); }; }
function subscriber_possibleConstructorReturn(self, call) { if (call && (subscriber_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return subscriber_assertThisInitialized(self); }
function subscriber_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function subscriber_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function subscriber_getPrototypeOf(o) { subscriber_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return subscriber_getPrototypeOf(o); }









var subscriber_NAME = 'Red5ProSubscriber';
var playbackFactory = new impl_factory_order();
var playbackImpl = function () {
  var map = new Map();
  map.set(PlaybackTypes.RTC, red5pro_rtc);
  map.set(PlaybackTypes.RTMP, red5pro_rtmp);
  map.set(PlaybackTypes.HLS, red5pro_hls);
  return map;
}();

/**
 * Main entry for failover support of all subscriber implementations.
 *
 * @extends EventEmitter
 */
var subscriber_Red5ProSubscriber = /*#__PURE__*/function (_EventEmitter) {
  subscriber_inherits(Red5ProSubscriber, _EventEmitter);
  var _super = subscriber_createSuper(Red5ProSubscriber);
  function Red5ProSubscriber() {
    var _this;
    subscriber_classCallCheck(this, Red5ProSubscriber);
    _this = _super.call(this);
    _this._options = undefined;
    _this._order = [PlaybackTypes.RTC, PlaybackTypes.RTMP, PlaybackTypes.HLS];
    return _this;
  }

  /**
   * Utilizes Failover Publisher Factory to attempt in determining browser support for Publisher from defined order.
   *
   * @return {Promise}
   *
   * @private
   */
  subscriber_createClass(Red5ProSubscriber, [{
    key: "_getPlaybackFromOrder",
    value: function _getPlaybackFromOrder(order, options) {
      return playbackFactory.create(order, playbackImpl, options, 'init');
    }

    /**
     * Returns the specified order for auto-failover.
     *
     *  @return {Array}
     *          Default: `['rtc', 'rtmp', 'hls']`.
     */
  }, {
    key: "getPlaybackOrder",
    value: function getPlaybackOrder() {
      return this._order;
    }

    /**
     * Defines the desired auto-failover order.
     *
     *  @param {Array} order
     *          The desired order. e.g, `['rtc', 'rtmp', 'hls']`.
     */
  }, {
    key: "setPlaybackOrder",
    value: function setPlaybackOrder(order) {
      // Allow for string value to define single item in order.
      order = typeof order === 'string' ? [order] : order;

      // Filter out values not available in enumeration of playback types.
      var t = order.filter(function (entry) {
        var key;
        for (key in PlaybackTypes) {
          if (PlaybackTypes[key].toLowerCase() === entry.toLowerCase()) {
            return true;
          }
        }
        return false;
      }).map(function (entry) {
        return entry.toLowerCase();
      });

      // Define new order.
      this._order = _toConsumableArray(new Set(t));
      log_debug(subscriber_NAME, "[orderupdate]: ".concat(this._order));
      return this;
    }

    /**
     * Request to initialize and determine the proper Subscriber implementation based on configuration.
     *
     * The returned `Promise` will either resolve with the determined Subscriber instance or reject with an error String in failure to determine Subscriber type.
     *
     *  @param {Object} options
     *          The initialization configuration map for each desired failover tech.
     *  @return {Promise}
     */
  }, {
    key: "init",
    value: function init(options) {
      this._options = options;
      var deferred = new DeferredPromise();
      log_debug(subscriber_NAME, '[init]');
      this._getPlaybackFromOrder(this._order, this._options).then(function (subscriber) {
        log_debug(subscriber_NAME, "[init:success]: subscriber found ".concat(subscriber.getType()));
        deferred.resolve(subscriber);
      })["catch"](function (err) {
        log_warn(subscriber_NAME, "[playerror]: Could not implement a subscriber: ".concat(err));
        deferred.reject(err);
      });
      return deferred.promise;
    }

    /**
     * Return enumerated value Subscriber types used in failover order.
     * @type {Object}
     */
  }, {
    key: "playbackTypes",
    get: function get() {
      return PlaybackTypes;
    }
  }]);
  return Red5ProSubscriber;
}(event_emitter);

// CONCATENATED MODULE: ./src/js/publisher/pub-source-handler.js


function pub_source_handler_typeof(obj) { "@babel/helpers - typeof"; return pub_source_handler_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, pub_source_handler_typeof(obj); }
function pub_source_handler_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function pub_source_handler_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, pub_source_handler_toPropertyKey(descriptor.key), descriptor); } }
function pub_source_handler_createClass(Constructor, protoProps, staticProps) { if (protoProps) pub_source_handler_defineProperties(Constructor.prototype, protoProps); if (staticProps) pub_source_handler_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function pub_source_handler_toPropertyKey(arg) { var key = pub_source_handler_toPrimitive(arg, "string"); return pub_source_handler_typeof(key) === "symbol" ? key : String(key); }
function pub_source_handler_toPrimitive(input, hint) { if (pub_source_handler_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (pub_source_handler_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }







var pub_source_handler_NAME = 'R5ProPublisherSourceHandler';

/**
 * Determine the video dimensions setting value based on possible definition using `MediaConstraint`.
 * @private
 */
var convertDimensionOptions = function convertDimensionOptions(vo) {
  return vo.exact || vo.ideal || vo.max || vo.min || vo;
};

/**
 * Define the audio and video settings for Flash.
 * The `width` and `height` attributes relate to video. The `audio` attribute is a boolean flag.
 * @private
 */
var pub_source_handler_mediaConstraintsToFlashvars = function mediaConstraintsToFlashvars(constraints, flashvars) {
  var fv = deepCopy(flashvars);
  if (typeof constraints.video === 'boolean') {
    fv.video = constraints.video;
  } else {
    var key;
    for (key in constraints.video) {
      fv[key] = convertDimensionOptions(constraints.video[key]);
    }
    fv.video = true;
  }
  fv.audio = typeof constraints.audio === 'boolean' ? constraints.audio : true;
  return fv;
};

/**
 * The internal Publish Source Handler for an RTMPPublisher.
 * @private
 */
var pub_source_handler_PublisherSourceHandler = /*#__PURE__*/function () {
  /**
   * @param {Element} video
   *        The video DOM Element.
   * @param {String} type
   *        The publisher type: most likely, `RTMP`.
   * @param {Object} soResponder
   *        Optional responder to SharedObject API. If not provided, will generate a `RTMPSharedObjectHandler` instance internally.
   * @private
   */
  function PublisherSourceHandler(video, type) {
    var soResponder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
    pub_source_handler_classCallCheck(this, PublisherSourceHandler);
    this.video = video;
    this.clone = this.video.cloneNode(true);
    this.holder = this.video.parentNode;
    this._publisherType = type;
    this._swfId = null;
    this._embedFuture = undefined;
    this._soResponder = soResponder || new sharedobject_helper_rtmp();
  }

  /**
   * Requested and used by RTMPPublisher instance in recognizing completion of embed.
   *
   * @return {Promise}
   * @private
   */
  pub_source_handler_createClass(PublisherSourceHandler, [{
    key: "getEmbedOperation",
    value: function getEmbedOperation() {
      this._embedFuture = Future.createIfNotExist(this._embedFuture);
      return this._embedFuture.promise;
    }

    /**
     * Clean up of references and modified display.
     * @private
     */
  }, {
    key: "cleanUp",
    value: function cleanUp() {
      // Return to prior DOM manipulation.
      this.video.remove();
      this.video = this.clone.cloneNode(true);
      this.holder.appendChild(this.video);
      this._embedFuture = undefined;
    }

    /**
     * Request to define the embedding options for a RTMPPublisher.
     *
     * @param {String} swfId
     *        The unique id to use in embedding element.
     * @param {Object} options
     *        The initialization configuration to determine flashvars from.
     * @param {String} swfUrl
     *        Optional location of the SWF file to embed. Default is relative path to `red5pro-subscriber.swf`.
     * @param {String} minFlashVersion
     *        Optional semver of minimum Flash version to determine support. Default is `10.0.0`.
     * @return {Promise}
     *        The `Promise` either resolves or rejects the success of embed on page using SWFObject.
     * @private
     */
  }, {
    key: "addSource",
    value: function addSource(swfId, options) {
      var swfUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var minFlashVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      log_debug(pub_source_handler_NAME, '[addsource]');
      var self = this;
      this._swfId = swfId;
      this._embedFuture = Future.createIfNotExist(this._embedFuture);
      var deferred = this._embedFuture;
      options.swf = swfUrl || options.swf;
      options.minFlashVersion = minFlashVersion || options.minFlashVersion;
      embed_defineEmbedElement(this.video, this.holder).then(function (elementId) {
        log_debug(pub_source_handler_NAME, '[element:complete]');
        var flashvars = {
          buffer: options.buffer != null ? options.buffer : 1,
          streamMode: options.streamMode,
          streamName: options.streamName,
          appName: options.app,
          host: options.host
        };
        if (options.backgroundColor) {
          flashvars.backgroundColor = options.backgroundColor;
        }
        if (options.context) {
          flashvars.roomName = options.context;
        }
        if (options.embedWidth === '100%' || options.embedHeight === '100%') {
          flashvars.autosize = true;
        }
        if (typeof options.connectionParams !== 'undefined') {
          flashvars.connectionParams = encodeURIComponent(JSON.stringify(options.connectionParams));
        }
        flashvars = pub_source_handler_mediaConstraintsToFlashvars(options.mediaConstraints, flashvars);
        return embed_embedSwfObject(swfId, options, flashvars, browser.getSwfObject(), elementId);
      }).then(function () {
        log_debug(pub_source_handler_NAME, '[embed:complete]');
        deferred.resolve(self);
      })["catch"](function (err) {
        return deferred.reject(err);
      });
      return deferred.promise;
    }

    /**
     * Request to connect to server for a broadcast session.
     *
     * @param {Object} publishOptions
     * @private
     */
  }, {
    key: "connect",
    value: function connect(publishOptions) {
      log_debug(pub_source_handler_NAME, '[connect]');
      var el = browser.getEmbedObject(this._swfId);
      if (el) {
        el.connect(publishOptions);
        this._soResponder.connect(this._swfId);
      } else {
        log_warn(pub_source_handler_NAME, 'Could not determine embedded element with swf id: ' + this._swfId + '.');
      }
    }

    /**
     * Request to disconnect from server.
     *
     * @private
     */
  }, {
    key: "disconnect",
    value: function disconnect() {
      log_debug(pub_source_handler_NAME, '[disconnect]');
      try {
        var el = browser.getEmbedObject(this._swfId);
        if (el) {
          el.disconnect();
        }
      } catch (e) {
        // nada.
      }
      this.cleanUp();
      this._soResponder.disconnect();
    }

    /**
     * Request to send a message to all subscribers.
     *
     * @param {String} methodName
     *        The method name associated with the message to be accepted by all subscribers.
     * @param {Object} data
     *        The data object to send associated with the method name.
     * @private
     */
  }, {
    key: "send",
    value: function send(methodName, data) {
      var el = browser.getEmbedObject(this._swfId);
      if (el) {
        el.send(methodName, data);
      }
    }

    /**
     * Adds a response handler on SharedObject channel responder.
     * @private
     */
  }, {
    key: "addSharedObjectResponseHandler",
    value: function addSharedObjectResponseHandler(handler) {
      this._soResponder.addResponseHandler(handler);
    }

    /**
     * Removes a response handler on SharedObject channel responder.
     * @private
     */
  }, {
    key: "removeSharedObjectResponseHandler",
    value: function removeSharedObjectResponseHandler(handler) {
      this._soResponder.removeResponseHandler(handler);
    }

    /**
     * Sends message on SharedObject channel responder.
     *
     * @param {String} name
     *        The SharedObject name.
     * @param {String} callName
     *        The method name to be invoked.
     * @param {String} message
     *        The structured value to send.
     * @private
     */
  }, {
    key: "sendToSharedObject",
    value: function sendToSharedObject(name, callName, message) {
      this._soResponder.sendToSharedObject(name, callName, message);
    }

    /**
     * Sends property update on SharedObject channel responder.
     *
     * @param {String} name
     *        The SharedObject name.
     * @param {String} key
     *        The property name on the SharedObject.
     * @param {String} value
     *        The structured property value.
     * @private
     */
  }, {
    key: "sendPropertyToSharedObject",
    value: function sendPropertyToSharedObject(name, key, value) {
      this._soResponder.sendPropertyToSharedObject(name, key, value);
    }

    /**
     * Requests to get SharedObject instance from the SharedObject channel responder.
     * @private
     */
  }, {
    key: "getRemoteSharedObject",
    value: function getRemoteSharedObject(sharedObjectName) {
      this._soResponder.getRemoteSharedObject(sharedObjectName);
    }

    /**
     * Request to connect to a shared object.
     *
     * @param {String} sharedObjectName
     *        The name of the SharedObject.
     * @private
     */
  }, {
    key: "connectToSharedObject",
    value: function connectToSharedObject(sharedObjectName) {
      this._soResponder.connectToSharedObject(sharedObjectName);
    }

    /**
     * Request to close connection to a shared object.
     *
     * @param {String} sharedObjectName
     *        The name of the SharedObject.
     * @private
     */
  }, {
    key: "closeSharedObject",
    value: function closeSharedObject(sharedObjectName) {
      this._soResponder.closeSharedObject(sharedObjectName);
    }

    /**
     * Deprecated. Request to update broadcast dimensions before a broadcast.
     *
     * @param {Object} quality
     *        Expects object with following structur: `{video: {width:Int, heightInt}}
     * @private
     */
  }, {
    key: "setMediaQuality",
    value: function setMediaQuality(quality) {
      var el = browser.getEmbedObject(this._swfId);
      if (el) {
        if (quality.video && typeof quality.video !== 'boolean') {
          var w = !isNaN(quality.video.width) ? toInt(quality.video.width) : Number.isNaN;
          var h = !isNaN(quality.video.height) ? toInt(quality.video.height) : Number.isNaN;
          el.updateResolution(w, h);
        }
      }
    }

    /**
     * Returns the type of implementation: `RTMP`.
     *
     * @return {String}
     * @private
     */
  }, {
    key: "getType",
    value: function getType() {
      return this._publisherType;
    }
  }]);
  return PublisherSourceHandler;
}();
/* harmony default export */ var pub_source_handler = (pub_source_handler_PublisherSourceHandler);
// CONCATENATED MODULE: ./src/js/view/publish.js


function publish_typeof(obj) { "@babel/helpers - typeof"; return publish_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, publish_typeof(obj); }
function publish_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function publish_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, publish_toPropertyKey(descriptor.key), descriptor); } }
function publish_createClass(Constructor, protoProps, staticProps) { if (protoProps) publish_defineProperties(Constructor.prototype, protoProps); if (staticProps) publish_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function publish_toPropertyKey(arg) { var key = publish_toPrimitive(arg, "string"); return publish_typeof(key) === "symbol" ? key : String(key); }
function publish_toPrimitive(input, hint) { if (publish_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (publish_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var publish_NAME = 'R5ProPublishView';
var publisherId = 'red5pro-publisher';

/**
 * Bridge between DOM Element view and Publisher implementation.
 * Still used, but internalized as of 4.0.0. Up for deprecation, up for discussion.
 *
 * @private
 */
var publish_PublishView = /*#__PURE__*/function () {
  /**
   * @param {String} elementId
   *        The element `id` to use for playback display.
   * @private
   */
  function PublishView() {
    var elementId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : publisherId;
    publish_classCallCheck(this, PublishView);
    try {
      this._targetElement = browser.resolveElement(elementId);
    } catch (e) {
      log_error(publish_NAME, "Could not instantiate a new instance of Red5ProPublisher. Reason: ".concat(e.message));
      throw e;
    }
  }
  publish_createClass(PublishView, [{
    key: "attachPublisher",
    value: function attachPublisher(publisher) {
      log_debug(publish_NAME, '[attachpublisher]');
      publisher.setView(this, browser.getElementId(this._targetElement));
    }
  }, {
    key: "preview",
    value: function preview(mediaStream) {
      var autoplay = this.isAutoplay;
      log_debug(publish_NAME, "[preview]: autoplay(".concat(autoplay, ")"));
      browser.setVideoSource(this._targetElement, mediaStream, autoplay);
    }
  }, {
    key: "unpreview",
    value: function unpreview() {
      browser.setVideoSource(this._targetElement, null, this.isAutoplay);
    }
  }, {
    key: "isAutoplay",
    get: function get() {
      return browser.hasAttributeDefined(this._targetElement, 'autoplay');
    }
  }, {
    key: "view",
    get: function get() {
      return this._targetElement;
    }
  }]);
  return PublishView;
}();
/* harmony default export */ var view_publish = (publish_PublishView);
// CONCATENATED MODULE: ./src/js/enum/publish.js


var PublishTypes = Object.freeze({
  RTMP: 'rtmp',
  RTC: 'rtc'
});
var PublishModeTypes = Object.freeze({
  LIVE: 'live',
  RECORD: 'record',
  APPEND: 'append'
});

/**
 * Enumeration of Audio Encoder types to request for Broadcast.
 */
var PublishAudioEncoder = Object.freeze({
  OPUS: 'Opus',
  PCMU: 'PCMU',
  PCMA: 'PCMA'
});

/**
 * Enumeration of Video Encoder types to request for Broadcast.
 */
var PublishVideoEncoder = Object.freeze({
  VP8: 'VP8',
  VP9: 'VP9',
  H264: 'H264'
});
// CONCATENATED MODULE: ./src/js/publisher/constraint/index.js


/**
 * Easy decorator for setting a mutable, iteratable property on an object.
 *
 * @private
 */
function constraint_typeof(obj) { "@babel/helpers - typeof"; return constraint_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, constraint_typeof(obj); }
function constraint_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, constraint_toPropertyKey(descriptor.key), descriptor); } }
function constraint_createClass(Constructor, protoProps, staticProps) { if (protoProps) constraint_defineProperties(Constructor.prototype, protoProps); if (staticProps) constraint_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function constraint_toPropertyKey(arg) { var key = constraint_toPrimitive(arg, "string"); return constraint_typeof(key) === "symbol" ? key : String(key); }
function constraint_toPrimitive(input, hint) { if (constraint_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (constraint_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function constraint_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
var inflate = function inflate(obj, prop, value) {
  Object.defineProperty(obj, prop, {
    value: value,
    writable: true,
    enumerable: true
  });
};

/**
 * Default `exact` setting for `video` on `MediaConstraint` for WebRTC broadcast.
 *
 * @private
 */
var RTCMediaVideoConstraint = /*#__PURE__*/constraint_createClass(function RTCMediaVideoConstraint() {
  constraint_classCallCheck(this, RTCMediaVideoConstraint);
  inflate(this, 'width', {
    exact: 640
  });
  inflate(this, 'height', {
    exact: 480
  });
});
/**
 * Default RTMP video settings for braodcast.
 *
 * @private
 */
var RTMPMediaVideoConstraint = /*#__PURE__*/constraint_createClass(function RTMPMediaVideoConstraint() {
  constraint_classCallCheck(this, RTMPMediaVideoConstraint);
  inflate(this, 'width', 640);
  inflate(this, 'height', 480);
  inflate(this, 'force', false);
  inflate(this, 'framerate', 15);
  inflate(this, 'bandwidth', 50000);
  inflate(this, 'quality', 80);
  inflate(this, 'profile', 'baseline');
  inflate(this, 'level', 3.1);
});
/**
 * Default WebRTC media settings for broadcast.
 *
 * @private
 */
var RTCMediaConstraint = /*#__PURE__*/constraint_createClass(function RTCMediaConstraint() {
  var audio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var video = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  constraint_classCallCheck(this, RTCMediaConstraint);
  inflate(this, 'audio', audio);
  inflate(this, 'video', video || new RTCMediaVideoConstraint());
});
/**
 * Default RTMP media settings for broadcast.
 *
 * @private
 */
var RTMPMediaConstraint = /*#__PURE__*/constraint_createClass(function RTMPMediaConstraint() {
  var audio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var video = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  constraint_classCallCheck(this, RTMPMediaConstraint);
  inflate(this, 'audio', audio);
  inflate(this, 'video', video || new RTMPMediaVideoConstraint());
});

// CONCATENATED MODULE: ./src/js/publisher/red5pro-rtmp.js


function publisher_red5pro_rtmp_typeof(obj) { "@babel/helpers - typeof"; return publisher_red5pro_rtmp_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, publisher_red5pro_rtmp_typeof(obj); }
function publisher_red5pro_rtmp_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function publisher_red5pro_rtmp_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, publisher_red5pro_rtmp_toPropertyKey(descriptor.key), descriptor); } }
function publisher_red5pro_rtmp_createClass(Constructor, protoProps, staticProps) { if (protoProps) publisher_red5pro_rtmp_defineProperties(Constructor.prototype, protoProps); if (staticProps) publisher_red5pro_rtmp_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function publisher_red5pro_rtmp_toPropertyKey(arg) { var key = publisher_red5pro_rtmp_toPrimitive(arg, "string"); return publisher_red5pro_rtmp_typeof(key) === "symbol" ? key : String(key); }
function publisher_red5pro_rtmp_toPrimitive(input, hint) { if (publisher_red5pro_rtmp_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (publisher_red5pro_rtmp_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function publisher_red5pro_rtmp_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) publisher_red5pro_rtmp_setPrototypeOf(subClass, superClass); }
function publisher_red5pro_rtmp_setPrototypeOf(o, p) { publisher_red5pro_rtmp_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return publisher_red5pro_rtmp_setPrototypeOf(o, p); }
function publisher_red5pro_rtmp_createSuper(Derived) { var hasNativeReflectConstruct = publisher_red5pro_rtmp_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = publisher_red5pro_rtmp_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = publisher_red5pro_rtmp_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return publisher_red5pro_rtmp_possibleConstructorReturn(this, result); }; }
function publisher_red5pro_rtmp_possibleConstructorReturn(self, call) { if (call && (publisher_red5pro_rtmp_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return publisher_red5pro_rtmp_assertThisInitialized(self); }
function publisher_red5pro_rtmp_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function publisher_red5pro_rtmp_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function publisher_red5pro_rtmp_getPrototypeOf(o) { publisher_red5pro_rtmp_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return publisher_red5pro_rtmp_getPrototypeOf(o); }










var publisher_red5pro_rtmp_NAME = 'RTMPPublisher';
var publisher_red5pro_rtmp_defaultOptions = {
  protocol: 'rtmp',
  port: 1935,
  streamMode: 'live',
  mediaElementId: 'red5pro-publisher',
  embedWidth: '100%',
  // DOM display style
  embedHeight: '100%',
  // DOM display style
  minFlashVersion: '10.0.0',
  swf: 'lib/red5pro/red5pro-publisher.swf',
  swfobjectURL: 'lib/swfobject/swfobject.js',
  productInstallURL: 'lib/swfobject/playerProductInstall.swf',
  mediaConstraints: new RTMPMediaConstraint()
};

/**
 * Main entry for Flash-based Publisher.
 *
 * @extends EventEmitter
 */
var red5pro_rtmp_RTMPPublisher = /*#__PURE__*/function (_EventEmitter) {
  publisher_red5pro_rtmp_inherits(RTMPPublisher, _EventEmitter);
  var _super = publisher_red5pro_rtmp_createSuper(RTMPPublisher);
  function RTMPPublisher() {
    var _this;
    publisher_red5pro_rtmp_classCallCheck(this, RTMPPublisher);
    _this = _super.call(this);
    _this._options = undefined;
    _this._view = undefined;
    _this._sourceHandler = undefined;
    _this._elementId = undefined;
    _this._connectFuture = undefined;
    return _this;
  }

  /**
   * Still in use for assigning document element view management to this instance.
   *
   * @private
   */
  publisher_red5pro_rtmp_createClass(RTMPPublisher, [{
    key: "_setViewIfNotExist",
    value: function _setViewIfNotExist(currentView) {
      var mediaElementId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      if (typeof currentView === 'undefined' && mediaElementId !== undefined) {
        var view = new view_publish(mediaElementId);
        view.attachPublisher(this);
      }
    }

    /**
     * Still in use for assigning document element view management to this instance.
     * API deprecated in 4.0.0.
     *
     * @private
     */
  }, {
    key: "setView",
    value: function setView(view, elementId) {
      var _this2 = this;
      this._view = view;
      this._elementId = elementId;
      if (this._sourceHandler !== undefined) {
        this._sourceHandler.disconnect();
        this._sourceHandler = undefined;
      }
      if (this._view) {
        this._sourceHandler = new pub_source_handler(this._view.view, this.getType());
      }
      if (this._options && this._sourceHandler) {
        this._sourceHandler.addSource(this._elementId, this._options)["catch"](function (err) {
          log_error(publisher_red5pro_rtmp_NAME, "Could not establish proper RTMP publisher: ".concat(err));
          _this2.trigger(new PublisherEvent(RTMPPublisherEventTypes.EMBED_FAILURE, _this2));
        });
      }
      return this;
    }

    /**
     * Define a window global callback used by Flash publisher to recognize embed complete.
     *
     * @private
     */
  }, {
    key: "_setUpConnectCallback",
    value: function _setUpConnectCallback(promise) {
      var _this3 = this;
      window.setActiveId = function (successId) {
        // successId === _options.streamName
        log_debug(publisher_red5pro_rtmp_NAME, "Embed and connect() complete for publisher swf. successId(".concat(successId, ")."));
        promise.resolve(_this3);
        _this3.trigger(new PublisherEvent(RTMPPublisherEventTypes.EMBED_SUCCESS, _this3));
        _this3._tearDownConnectCallback();
      };
      // TODO: Setup timeout to reject?
    }

    /**
     * Tear down global callback used in Flash publisher recognize of embed.
     *
     * @private
     */
  }, {
    key: "_tearDownConnectCallback",
    value: function _tearDownConnectCallback() {
      window.setActiveId = undefined;
    }

    /**
     * Define global function handlers for ExternalInterface to invoke for API communication.
     *
     * @private
     */
  }, {
    key: "_establishExtIntHandlers",
    value: function _establishExtIntHandlers() {
      var _this4 = this;
      var id = this._options.streamName;
      var invokeFn = function invokeFn(label) {
        return ['publisher', label, id.split('-').join('_')].join('_');
      };
      window[invokeFn('r5proConnectClosed')] = function () {
        _this4.trigger(new PublisherEvent(PublisherEventTypes.CONNECTION_CLOSED, _this4));
      };
      window[invokeFn('r5proConnectSuccess')] = function () {
        return _this4.trigger(new PublisherEvent(PublisherEventTypes.CONNECT_SUCCESS, _this4));
      };
      window[invokeFn('r5proUnpublishSuccess')] = function () {
        return _this4.trigger(new PublisherEvent(PublisherEventTypes.UNPUBLISH_SUCCESS, _this4));
      };
      window[invokeFn('r5proPublishStart')] = function () {
        _this4._connectFuture.resolve(_this4);
        _this4.trigger(new PublisherEvent(PublisherEventTypes.PUBLISH_START, _this4));
      };
      window[invokeFn('r5proPublishMetadata')] = function (metadata) {
        return _this4.trigger(new PublisherEvent(PublisherEventTypes.PUBLISH_METADATA, _this4, metadata));
      };
      window[invokeFn('r5proPublishInsufficientBW')] = function (data) {
        return _this4.trigger(new PublisherEvent(PublisherEventTypes.PUBLISH_INSUFFICIENT_BANDWIDTH, _this4, data));
      };
      window[invokeFn('r5proPublishSufficientBW')] = function (data) {
        return _this4.trigger(new PublisherEvent(PublisherEventTypes.PUBLISH_SUFFICIENT_BANDWIDTH, _this4, data));
      };
      window[invokeFn('r5proPublishRecoveringBW')] = function (data) {
        return _this4.trigger(new PublisherEvent(PublisherEventTypes.PUBLISH_RECOVERING_BANDWIDTH, _this4, data));
      };
      window[invokeFn('r5proConnectFailure')] = function () {
        _this4._connectFuture.reject(PublisherEventTypes.CONNECT_FAILURE);
        _this4.trigger(new PublisherEvent(PublisherEventTypes.CONNECT_FAILURE, _this4));
      };
      window[invokeFn('r5proPublishFail')] = function () {
        _this4._connectFuture.reject(PublisherEventTypes.PUBLISH_FAIL);
        _this4.trigger(new PublisherEvent(PublisherEventTypes.PUBLISH_FAIL, _this4));
      };
      window[invokeFn('r5proPublishInvalidName')] = function () {
        _this4._connectFuture.reject(PublisherEventTypes.PUBLISH_INVALID_NAME);
        _this4.trigger(new PublisherEvent(PublisherEventTypes.PUBLISH_INVALID_NAME, _this4));
      };
    }

    /**
     * Request to initialize the Flash-based Publisher based on configuration.
     * The returned `Promise` will either resolve with a reference to this instance or reject with an error `String` in failure.
     *
     * @param {Object} options
     *        The initialization configuration map.
     * @return {Promise}
     */
  }, {
    key: "init",
    value: function init(options) {
      var self = this;
      var deferred = new DeferredPromise();
      var version = options.minFlashVersion || publisher_red5pro_rtmp_defaultOptions.minFlashVersion;
      if (!browser.supportsFlashVersion(version)) {
        deferred.reject("Could not resolve RTMPPublisher instance. Requires minimum Flash Player install of ".concat(version));
      } else {
        this._options = Object.assign({}, publisher_red5pro_rtmp_defaultOptions, options);
        try {
          browser.injectScript(this._options.swfobjectURL).then(function () {
            log_debug(publisher_red5pro_rtmp_NAME, 'SWFObject embedded.');
            if (self._sourceHandler) {
              log_debug(publisher_red5pro_rtmp_NAME, 'Publish handler established.');
              return self._sourceHandler.addSource(self._elementId, self._options);
            } else {
              log_debug(publisher_red5pro_rtmp_NAME, 'Publish handler not established.');
              return true;
            }
          }).then(function () {
            self._setViewIfNotExist(self._view, self._options.mediaElementId);
            deferred.resolve(self);
          })["catch"](function (err) {
            log_error(publisher_red5pro_rtmp_NAME, "Could not embed Flash-based RTMP Publisher. Reason: ".concat(err));
            if (self._sourceHandler) {
              self._sourceHandler.disconnect();
            }
            deferred.reject(err);
            self.trigger(new PublisherEvent(RTMPPublisherEventTypes.EMBED_FAILURE, self));
          });
        } catch (e) {
          deferred.reject("Could not inject Flash-based Publisher into the page. Reason: ".concat(e.message));
          self.trigger(new PublisherEvent(RTMPPublisherEventTypes.EMBED_FAILURE, self));
        }
      }
      return deferred.promise;
    }

    /**
     * Request to being a broadcast session after initilization has occured.
     *
     * @param {String} streamName
     *        Optional stream name to broadcast on, otherwise defaulting to the `streamName` provided in `init()` configuration.
     * @param {Promise} promise
     *        Optional `Promise` object to resolve/reject on based on sequence of events in establishing a broadcast, otherwise defaulting to `Promise` created internally and returned.
     * @return {Promise}
     *        The returned `Promise` will resolve or reject on successful start of a broadcast.<br>
     *        There are several processes that occur in order to establish a Flash-based broadcast that involve - but are not limited to - proper embed of Flash object on page with flashvars used in establishing RTMP-based NetConnection.
     */
  }, {
    key: "publish",
    value: function publish() {
      var _this5 = this;
      var streamName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      var promise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      // eslint-disable-line no-unused-vars
      var dfd = promise || new DeferredPromise();
      this._setUpConnectCallback(dfd);
      this._options.streamName = streamName || this._options.streamName;
      var publishOptions = this._options;
      try {
        var srcHandler = this._sourceHandler;
        this._sourceHandler.getEmbedOperation().then(function () {
          log_debug(publisher_red5pro_rtmp_NAME, '[handler:embed:complete]');
          var el = browser.getEmbedObject(_this5._elementId);
          if (el) {
            _this5._establishExtIntHandlers();
          }
          var count = 0;
          var limit = 100;
          var tryConnect = function tryConnect() {
            var timeout;
            timeout = setTimeout(function () {
              try {
                clearTimeout(timeout);
                srcHandler.connect(JSON.stringify(publishOptions));
              } catch (e) {
                if (count++ > limit) {
                  throw e;
                } else {
                  tryConnect();
                }
              }
            }, 300);
          };
          tryConnect();
        })["catch"](function (err) {
          dfd.reject(err);
          _this5.trigger(new PublisherEvent(PublisherEventTypes.CONNECT_FAILURE, _this5));
        });
      } catch (e) {
        log_error(publisher_red5pro_rtmp_NAME, '[handler:embed:error]');
        dfd.reject("Could not initiate connection sequence. Reason: ".concat(e.message));
        this.trigger(new PublisherEvent(PublisherEventTypes.CONNECT_FAILURE, this));
        this._tearDownConnectCallback();
      }
      this._connectFuture = dfd;
      return dfd.promise;
    }

    /**
     * Request to stop a broadcast.
     * The returned `Promise` will either resolve or reject on successful stop of broadcast.
     *
     * @return {Promise}
     */
  }, {
    key: "unpublish",
    value: function unpublish() {
      var deferred = new DeferredPromise();
      try {
        browser.getEmbedObject(this._elementId).unpublish();
        deferred.resolve();
      } catch (e) {
        log_error(publisher_red5pro_rtmp_NAME, "Could not initiate publish sequence. Reason: ".concat(e.message));
        deferred.reject(e.message);
      }
      this._connectFuture = undefined;
      return deferred.promise;
    }

    /**
     * Request to send a message to all subscribers.
     *
     * @param {String} methodName
     *        The method name associated with the message to be accepted by all subscribers.
     * @param {Object} data
     *        The data object to send associated with the method name.
     */
  }, {
    key: "send",
    value: function send(methodName, data) {
      this._sourceHandler.send(methodName, typeof data === 'string' ? data : JSON.stringify(data));
    }

    /**
     * Deprecated. Request to update broadcast dimensions before a broadcast.
     *
     * @param {Object} quality
     *        Expects object with following structur: `{video: {width:Int, heightInt}}
     *
     * @private
     */
  }, {
    key: "setMediaQuality",
    value: function setMediaQuality(quality) {
      if (this._sourceHandler) {
        this._sourceHandler.setMediaQuality(quality);
      }
    }

    /**
     * Helper method to overlay options over current configuration.
     *
     * @param {Object} newOptions
     *        The options to overlay.
     *
     * @private
     */
  }, {
    key: "overlayOptions",
    value: function overlayOptions(newOptions) {
      this._options = Object.assign(this._options, newOptions);
    }

    /**
     * Returns the current Flash/RTMP connection helper if established.
     * Used in SharedObject communication.
     *
     * @return {PublisherSourceHandler}
     *
     * @private
     */
  }, {
    key: "getConnection",
    value: function getConnection() {
      return this._sourceHandler;
    }

    /**
     * Returns the initialization configuration used in `init()`.
     *
     * @return {Object}
     */
  }, {
    key: "getOptions",
    value: function getOptions() {
      return this._options;
    }

    /**
     * Returns the type of implementation: `RTMP`.
     *
     * @return {String}
     */
  }, {
    key: "getType",
    value: function getType() {
      return PublishTypes.RTMP.toUpperCase();
    }
  }]);
  return RTMPPublisher;
}(event_emitter);
/* harmony default export */ var publisher_red5pro_rtmp = (red5pro_rtmp_RTMPPublisher);
// CONCATENATED MODULE: ./src/js/helper/socket-helper-pub.js


function socket_helper_pub_typeof(obj) { "@babel/helpers - typeof"; return socket_helper_pub_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, socket_helper_pub_typeof(obj); }
function socket_helper_pub_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function socket_helper_pub_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? socket_helper_pub_ownKeys(Object(source), !0).forEach(function (key) { socket_helper_pub_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : socket_helper_pub_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function socket_helper_pub_defineProperty(obj, key, value) { key = socket_helper_pub_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function socket_helper_pub_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function socket_helper_pub_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, socket_helper_pub_toPropertyKey(descriptor.key), descriptor); } }
function socket_helper_pub_createClass(Constructor, protoProps, staticProps) { if (protoProps) socket_helper_pub_defineProperties(Constructor.prototype, protoProps); if (staticProps) socket_helper_pub_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function socket_helper_pub_toPropertyKey(arg) { var key = socket_helper_pub_toPrimitive(arg, "string"); return socket_helper_pub_typeof(key) === "symbol" ? key : String(key); }
function socket_helper_pub_toPrimitive(input, hint) { if (socket_helper_pub_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (socket_helper_pub_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function socket_helper_pub_get() { if (typeof Reflect !== "undefined" && Reflect.get) { socket_helper_pub_get = Reflect.get.bind(); } else { socket_helper_pub_get = function _get(target, property, receiver) { var base = socket_helper_pub_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return socket_helper_pub_get.apply(this, arguments); }
function socket_helper_pub_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = socket_helper_pub_getPrototypeOf(object); if (object === null) break; } return object; }
function socket_helper_pub_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) socket_helper_pub_setPrototypeOf(subClass, superClass); }
function socket_helper_pub_setPrototypeOf(o, p) { socket_helper_pub_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return socket_helper_pub_setPrototypeOf(o, p); }
function socket_helper_pub_createSuper(Derived) { var hasNativeReflectConstruct = socket_helper_pub_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = socket_helper_pub_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = socket_helper_pub_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return socket_helper_pub_possibleConstructorReturn(this, result); }; }
function socket_helper_pub_possibleConstructorReturn(self, call) { if (call && (socket_helper_pub_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return socket_helper_pub_assertThisInitialized(self); }
function socket_helper_pub_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function socket_helper_pub_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function socket_helper_pub_getPrototypeOf(o) { socket_helper_pub_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return socket_helper_pub_getPrototypeOf(o); }



var socket_helper_pub_NAME = 'R5ProPublisherSocket';

/**
 * Publisher-based extension of `SocketHelper`.
 *
 * @extends {SocketHelper}
 *
 * @private
 */
var socket_helper_pub_PublisherSocketHelper = /*#__PURE__*/function (_SocketHelper) {
  socket_helper_pub_inherits(PublisherSocketHelper, _SocketHelper);
  var _super = socket_helper_pub_createSuper(PublisherSocketHelper);
  function PublisherSocketHelper(responder) {
    socket_helper_pub_classCallCheck(this, PublisherSocketHelper);
    return _super.call(this, responder, socket_helper_pub_NAME);
  }

  /**
   * Override to respond to messages coming over WebSocket.
   */
  socket_helper_pub_createClass(PublisherSocketHelper, [{
    key: "respond",
    value: function respond(message) {
      if (message.data) {
        var json = this.getJsonFromSocketMessage(message);
        if (!socket_helper_pub_get(socket_helper_pub_getPrototypeOf(PublisherSocketHelper.prototype), "respond", this).call(this, message)) {
          if (json.data !== undefined) {
            if (json.data.sdp !== undefined) {
              if (json.data.sdp.type === 'answer') {
                this._responder.onSDPAnswer(json.data);
                return true;
              }
            }
            if (json.data.candidate !== undefined) {
              if (isObjectEmpty(json.data.candidate)) {
                this._responder.onEmptyCandidate();
                return true;
              } else {
                this._responder.onAddIceCandidate(json.data.candidate);
                return true;
              }
            }
            if (json.data.type === 'status') {
              if (json.data.code === 'NetConnection.ICE.TricleCompleted' || json.data.code === 'NetConnection.ICE.TrickleCompleted') {
                this._responder.onSocketIceCandidateEnd();
              } else if (json.data.code === 'NetConnection.Publish.InsufficientBW') {
                this._responder.onInsufficientBandwidth(json.data);
              } else if (json.data.code === 'NetConnection.Publish.SufficientBW') {
                this._responder.onSufficientBandwidth(json.data);
              } else if (json.data.code === 'NetConnection.Publish.RecoveringBW') {
                this._responder.onRecoveringBandwidth(json.data);
              } else {
                this._responder.onPublisherStatus(json.data);
                return true;
              }
            }
            if (json.type !== undefined && json.type.toLowerCase() === 'metadata') {
              // It is a `send` API invocation.
              if (json.method !== undefined) {
                this._responder.onSendReceived(json.method, json.data);
                return true;
              } else {
                this._responder.onMetaData(json.data);
                return true;
              }
            } else if (json.send !== undefined) {
              var send = json.send,
                senderName = json.senderName,
                dcLabel = json.dcLabel;
              var data = send.data,
                method = send.method;
              data = socket_helper_pub_objectSpread(socket_helper_pub_objectSpread({}, data), {}, {
                senderName: senderName,
                dcLabel: dcLabel
              });
              this._responder.onSendReceived(method, data);
              return true;
            }
          }
          this._responder.onSocketMessage(this, message);
        }
      } else {
        log_warn(socket_helper_pub_NAME, '[ws.onmessage] - No Message Data.');
      }
    }

    /**
     * Posts an unpublish request.
     *
     * @param {String}
     *        The stream name to unpublish.
     */
  }, {
    key: "postUnpublish",
    value: function postUnpublish(streamName) {
      if (this._websocket === undefined || this._openState !== 1) {
        return false;
      }
      this.post({
        unpublish: streamName
      });
      return true;
    }

    /**
     * Request to leave group from conference participant.
     *
     * @param {String} group
     *        The group name to leave.
     */
  }, {
    key: "postUnjoin",
    value: function postUnjoin(group, streamName) {
      if (this._websocket === undefined || this._openState !== 1) {
        return false;
      }
      log_debug(socket_helper_pub_NAME, "[peerconnection:leavegroup]");
      return this.post({
        leaveGroup: group,
        streamName: streamName
      });
    }
  }]);
  return PublisherSocketHelper;
}(socket_helper);
/* harmony default export */ var socket_helper_pub = (socket_helper_pub_PublisherSocketHelper);
// CONCATENATED MODULE: ./src/js/helper/webrtc-helper-pub.js


function webrtc_helper_pub_typeof(obj) { "@babel/helpers - typeof"; return webrtc_helper_pub_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, webrtc_helper_pub_typeof(obj); }
function webrtc_helper_pub_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ webrtc_helper_pub_regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == webrtc_helper_pub_typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function webrtc_helper_pub_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function webrtc_helper_pub_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { webrtc_helper_pub_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { webrtc_helper_pub_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function webrtc_helper_pub_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function webrtc_helper_pub_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, webrtc_helper_pub_toPropertyKey(descriptor.key), descriptor); } }
function webrtc_helper_pub_createClass(Constructor, protoProps, staticProps) { if (protoProps) webrtc_helper_pub_defineProperties(Constructor.prototype, protoProps); if (staticProps) webrtc_helper_pub_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function webrtc_helper_pub_toPropertyKey(arg) { var key = webrtc_helper_pub_toPrimitive(arg, "string"); return webrtc_helper_pub_typeof(key) === "symbol" ? key : String(key); }
function webrtc_helper_pub_toPrimitive(input, hint) { if (webrtc_helper_pub_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (webrtc_helper_pub_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function webrtc_helper_pub_get() { if (typeof Reflect !== "undefined" && Reflect.get) { webrtc_helper_pub_get = Reflect.get.bind(); } else { webrtc_helper_pub_get = function _get(target, property, receiver) { var base = webrtc_helper_pub_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return webrtc_helper_pub_get.apply(this, arguments); }
function webrtc_helper_pub_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = webrtc_helper_pub_getPrototypeOf(object); if (object === null) break; } return object; }
function webrtc_helper_pub_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) webrtc_helper_pub_setPrototypeOf(subClass, superClass); }
function webrtc_helper_pub_setPrototypeOf(o, p) { webrtc_helper_pub_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return webrtc_helper_pub_setPrototypeOf(o, p); }
function webrtc_helper_pub_createSuper(Derived) { var hasNativeReflectConstruct = webrtc_helper_pub_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = webrtc_helper_pub_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = webrtc_helper_pub_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return webrtc_helper_pub_possibleConstructorReturn(this, result); }; }
function webrtc_helper_pub_possibleConstructorReturn(self, call) { if (call && (webrtc_helper_pub_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return webrtc_helper_pub_assertThisInitialized(self); }
function webrtc_helper_pub_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function webrtc_helper_pub_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function webrtc_helper_pub_getPrototypeOf(o) { webrtc_helper_pub_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return webrtc_helper_pub_getPrototypeOf(o); }





var webrtc_helper_pub_NAME = 'R5ProPublishPeer';

/**
 * Proxy to Peer Connection for Publishers.
 *
 * @private
 */
var webrtc_helper_pub_PublisherPeerHelper = /*#__PURE__*/function (_WebRTCPeerHelper) {
  webrtc_helper_pub_inherits(PublisherPeerHelper, _WebRTCPeerHelper);
  var _super = webrtc_helper_pub_createSuper(PublisherPeerHelper);
  function PublisherPeerHelper(responder) {
    webrtc_helper_pub_classCallCheck(this, PublisherPeerHelper);
    return _super.call(this, responder, webrtc_helper_pub_NAME);
  }

  /**
   * Removes handlers assigned to the peer connection instance.
   *
   * @param {RTCPeerConnection} connection
   *
   * @private
   */
  webrtc_helper_pub_createClass(PublisherPeerHelper, [{
    key: "_removeConnectionHandlers",
    value: function _removeConnectionHandlers(connection) {
      connection.onconnectionstatechange = undefined;
      connection.oniceconnectionstatechange = undefined;
      connection.onicecandidate = undefined;
      connection.ontrack = undefined;
    }

    /**
     * Assigns handlers to events on the peer connection instance.
     *
     * @param {RTCPeerConnection} connection
     * @param {Promise} promise
     *        The `Promise` to resolve or reject on success of connection.
     */
  }, {
    key: "_addConnectionHandlers",
    value: function _addConnectionHandlers(connection, promise) {
      var _this = this;
      var reconnectTimeout;
      var timeoutLimit = 5000;
      connection.ontrack = function (event) {
        log_debug(webrtc_helper_pub_NAME, "[peer:ontrack]");
        console.log(event);
        _this._responder.onPeerConnectionTrackAdd(event.track);
      };
      connection.onconnectionstatechange = function () {
        log_debug(webrtc_helper_pub_NAME, "[peer.onconnectionstatechange] - State: ".concat(connection.connectionState));
        if (connection.connectionState === 'connected') {
          log_debug(webrtc_helper_pub_NAME, '[peerconnection:open]');
          if (promise) {
            promise.resolve(_this);
          } else {
            _this._responder.onPeerConnectionOpen();
          }
        } else if (connection.connectionState === 'failed' || connection.connectionState === 'disconnected') {
          log_warn(webrtc_helper_pub_NAME, '[peerconnection:error]');
          if (promise) {
            promise.reject();
          }
          if (connection.connectionState === 'failed') {
            _this._responder.onPeerConnectionFail();
          }
        }
      };
      connection.onicecandidate = function (event) {
        log_debug(webrtc_helper_pub_NAME, "[peer.onicecandidate] - Peer Candidate: ".concat(event.candidate));
        if (event.candidate) {
          _this._responder.onIceCandidate(event.candidate);
        } else if (event.candidate === null) {
          // null means they have finished sending candidates back and forth?
          // this._responder.onIceCandidateTrickleEnd()
        }
      };
      connection.oniceconnectionstatechange = function (event) {
        var state = connection.iceConnectionState;
        log_debug(webrtc_helper_pub_NAME, "[peer.oniceconnectionstatechange] - State: ".concat(state));
        if (state === 'connected' && browser.getIsEdge()) {
          // Support for ORTC order of candidates.
          // Typically this will be invoked from a `onicegatheringstatechange` event on the Connection.
          // Edge doesn't notify on that event.
          log_debug(webrtc_helper_pub_NAME, '[edge/ortc:notify complete]');
          _this._responder.onPeerGatheringComplete();
        } else if (state === 'failed') {
          if (reconnectTimeout) {
            clearTimeout(reconnectTimeout);
          }
          _this._responder.onPeerConnectionClose(event);
        } else if (state === 'disconnected') {
          // may receive a disconnect temporarily that will then return to a connection.
          reconnectTimeout = setTimeout(function () {
            log_debug(webrtc_helper_pub_NAME, "[peer.oniceconnectionstatechange] - Reconnect timeout reached. Closing PeerConnection.");
            clearTimeout(reconnectTimeout);
            _this._responder.onPeerConnectionClose(event);
          }, timeoutLimit);
        } else {
          if (reconnectTimeout) {
            log_debug(webrtc_helper_pub_NAME, "[peer.oniceconnectionstatechange] - Clearing timeout for reconnect.");
            clearTimeout(reconnectTimeout);
          }
        }
      };
      connection.onsignalingstatechange = function (event) {
        // eslint-disable-line no-unused-vars
        var state = connection.signalingState;
        log_debug(webrtc_helper_pub_NAME, "[peer.onsignalingstatechange] - State: ".concat(state));
      };
      connection.onicegatheringstatechange = function () {
        var state = connection.iceGatheringState;
        log_debug(webrtc_helper_pub_NAME, "[peer.onicegatheringstatechange] - State: ".concat(state));
        if (state === 'complete') {
          _this._responder.onPeerGatheringComplete();
        }
      };
      connection.onremovestream = function () {
        log_debug(webrtc_helper_pub_NAME, "[peer.onremovestream]");
      };
    }

    /**
     * Message event listener on RTCDataChannel
     *
     * @param {Event} event
     *
     * @private
     */
  }, {
    key: "_onDataChannelMessage",
    value: function _onDataChannelMessage(event) {
      var message = event;
      if (webrtc_helper_pub_get(webrtc_helper_pub_getPrototypeOf(PublisherPeerHelper.prototype), "_onDataChannelMessage", this).call(this, event)) {
        return true;
      }
      var json = this.getJsonFromSocketMessage(message);
      if (json === null) {
        log_warn(this._name, 'Determined websocket response not in correct format. Aborting message handle.');
        return true;
      }
      log_debug(this._name, '[datachannel-response]: ' + JSON.stringify(json, null, 2));
      var data = json.data;
      if (data && data.type === 'status') {
        if (data.code === 'NetStream.Play.UnpublishNotify') {
          this._responder.onUnpublish();
          return true;
        }
        log_debug(webrtc_helper_pub_NAME, "[datachannel.message] status :: ".concat(data.code));
        this._responder.onPublisherStatus(data);
        return true;
      }
      this._responder.onDataChannelMessage(this._dataChannel, message);
      return false;
    }

    /**
     * Request to `getUserMedia` on browser.
     *
     * @param {Object} contraints
     *        The `MediaConstraints` object.
     * @param {Function} rejectionCB
     *        Callback for rejections on getUserMedia as the SDK determines possible nearest neighbor.
     * @return {Promise}
     */
  }, {
    key: "getUserMedia",
    value: function getUserMedia(constraints, rejectionCB) {
      return webrtc_getUserMedia(constraints, rejectionCB);
    }

    /**
     * Request to force `getUserMedia` request using the provided constraints.
     *
     * @param {Object} constraints
     *        The `MediaConstraints` to force in request on `getUserMedia`.
     * @return {Promise}
     */
  }, {
    key: "forceUserMedia",
    value: function forceUserMedia(constraints) {
      return webrtc_forceUserMedia(constraints);
    }

    /**
     * Request to create an Offer through the Peer Connection.
     *
     * @param {Object} bandwidth
     *        The optional bandwidth configuration to use in munging SDP before sending offer.
     * @param {Boolean} forceVP8
     *        The optional flag to force VP8 encoding.
     * @param {Boolean} forceSDPStripe
     *        The optional flag to force stripping of SDP in order to keep under char limit in Message. Used by ConferenceParticipant.
     * @param {Promise} promise
     *        The `Promise` to resolve or reject on success of sending offer on Peer Connection.
     * @return {Promise}
     */
  }, {
    key: "createOffer",
    value: function createOffer() {
      var _this2 = this;
      var bandwidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var forceVP8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var forceSDPStrip = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var offerPromise = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      log_debug(webrtc_helper_pub_NAME, '[createoffer]');
      var p = offerPromise || new DeferredPromise();
      this._peerConnection.createOffer().then(function (sessionDescription) {
        _this2.setLocalDescription(sessionDescription, bandwidth).then(function () {
          var sdp = sessionDescription.sdp;
          if (bandwidth) {
            sdp = updateBandwidth(bandwidth, sdp);
          }
          // Strips SDP to just use Opus & H264. Cuts SDP size down.
          if (forceSDPStrip) {
            sdp = stripRTPMaps(sdp);
            sdp = stripNonH264FromVideo(sdp);
            sdp = flipRecvOnlyOnExtraAudio(sdp);
            sdp = flipRecvOnlyOnExtraVideo(sdp);
          }
          // Removed in favor of setting transceiver codec prefs in RTCPublisher.
          // if (forceVP8) {
          //   sdp = sdp.replaceAll('H264', 'H265')
          //   debug(NAME, '[createoffer] FORCING VP8')
          // }
          sessionDescription.sdp = sdp;
          _this2._responder.onSDPSuccess();
          p.resolve(sessionDescription);
        })["catch"](function (err) {
          _this2._responder.onSDPError(err);
          p.reject(err);
        });
      })["catch"](function (err) {
        log_debug(webrtc_helper_pub_NAME, '[createoffer:error]');
        p.reject(err);
      });
      return p.hasOwnProperty('promise') ? p.promise : p;
    }

    /**
     * Request to create an Offer through the Peer Connection without immediately setting as local description.
     *
     * @param {Object} bandwidth
     *        The optional bandwidth configuration to use in munging SDP before sending offer.
     * @param {Boolean} forceVP8
     *        The optional flag to force VP8 encoding.
     * @param {Boolean} forceSDPStripe
     *        The optional flag to force stripping of SDP in order to keep under char limit in Message. Used by ConferenceParticipant.
     * @return {Promise}
     */
  }, {
    key: "createOfferWithoutSetLocal",
    value: function () {
      var _createOfferWithoutSetLocal = webrtc_helper_pub_asyncToGenerator(function () {
        var _this3 = this;
        var bandwidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var forceVP8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var forceSDPStrip = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        return /*#__PURE__*/webrtc_helper_pub_regeneratorRuntime().mark(function _callee() {
          var sessionDescription, sdp;
          return webrtc_helper_pub_regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                log_debug(webrtc_helper_pub_NAME, '[createoffer:withoutlocal]');
                _context.prev = 1;
                _context.next = 4;
                return _this3._peerConnection.createOffer();
              case 4:
                sessionDescription = _context.sent;
                sdp = sessionDescription.sdp;
                if (bandwidth) {
                  sdp = updateBandwidth(bandwidth, sdp);
                }
                // Strips SDP to just use Opus & H264. Cuts SDP size down.
                if (forceSDPStrip) {
                  sdp = stripRTPMaps(sdp);
                  sdp = stripNonH264FromVideo(sdp);
                  sdp = flipRecvOnlyOnExtraAudio(sdp);
                  sdp = flipRecvOnlyOnExtraVideo(sdp);
                }
                // if (forceVP8) {
                //   sdp = sdp.replaceAll('H264', 'H265')
                //   debug(NAME, '[createoffer] FORCING VP8')
                // }
                sessionDescription.sdp = sdp;
                _this3._responder.onSDPSuccess();
                return _context.abrupt("return", sessionDescription);
              case 13:
                _context.prev = 13;
                _context.t0 = _context["catch"](1);
                log_debug(webrtc_helper_pub_NAME, '[createoffer:error]');
                _this3._responder.onSDPError(_context.t0);
                throw _context.t0;
              case 18:
              case "end":
                return _context.stop();
            }
          }, _callee, null, [[1, 13]]);
        })();
      });
      function createOfferWithoutSetLocal() {
        return _createOfferWithoutSetLocal.apply(this, arguments);
      }
      return createOfferWithoutSetLocal;
    }()
    /**
     * Posts an unpublish request.
     *
     * @param {String}
     *        The stream name to unpublish.
     */
  }, {
    key: "postUnpublish",
    value: function postUnpublish(streamName) {
      // else
      var complete = this.post({
        unpublish: streamName
      });
      log_debug(webrtc_helper_pub_NAME, "[peerconnection:unpublish] complete: ".concat(complete));
      return complete;
    }

    /**
     * Request to leave group from conference participant.
     *
     * @param {String} group
     *        The group name to leave.
     */
  }, {
    key: "postUnjoin",
    value: function postUnjoin(group, streamName) {
      log_debug(webrtc_helper_pub_NAME, "[peerconnection:leavegroup]");
      return this.post({
        leaveGroup: group,
        streamName: streamName
      });
    }
  }]);
  return PublisherPeerHelper;
}(webrtc_helper);
/* harmony default export */ var webrtc_helper_pub = (webrtc_helper_pub_PublisherPeerHelper);
// CONCATENATED MODULE: ./src/js/publisher/red5pro-rtc.js


function publisher_red5pro_rtc_typeof(obj) { "@babel/helpers - typeof"; return publisher_red5pro_rtc_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, publisher_red5pro_rtc_typeof(obj); }
function publisher_red5pro_rtc_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ publisher_red5pro_rtc_regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == publisher_red5pro_rtc_typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function publisher_red5pro_rtc_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function publisher_red5pro_rtc_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { publisher_red5pro_rtc_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { publisher_red5pro_rtc_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function publisher_red5pro_rtc_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function publisher_red5pro_rtc_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, publisher_red5pro_rtc_toPropertyKey(descriptor.key), descriptor); } }
function publisher_red5pro_rtc_createClass(Constructor, protoProps, staticProps) { if (protoProps) publisher_red5pro_rtc_defineProperties(Constructor.prototype, protoProps); if (staticProps) publisher_red5pro_rtc_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function publisher_red5pro_rtc_toPropertyKey(arg) { var key = publisher_red5pro_rtc_toPrimitive(arg, "string"); return publisher_red5pro_rtc_typeof(key) === "symbol" ? key : String(key); }
function publisher_red5pro_rtc_toPrimitive(input, hint) { if (publisher_red5pro_rtc_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (publisher_red5pro_rtc_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function publisher_red5pro_rtc_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) publisher_red5pro_rtc_setPrototypeOf(subClass, superClass); }
function publisher_red5pro_rtc_setPrototypeOf(o, p) { publisher_red5pro_rtc_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return publisher_red5pro_rtc_setPrototypeOf(o, p); }
function publisher_red5pro_rtc_createSuper(Derived) { var hasNativeReflectConstruct = publisher_red5pro_rtc_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = publisher_red5pro_rtc_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = publisher_red5pro_rtc_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return publisher_red5pro_rtc_possibleConstructorReturn(this, result); }; }
function publisher_red5pro_rtc_possibleConstructorReturn(self, call) { if (call && (publisher_red5pro_rtc_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return publisher_red5pro_rtc_assertThisInitialized(self); }
function publisher_red5pro_rtc_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function publisher_red5pro_rtc_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function publisher_red5pro_rtc_getPrototypeOf(o) { publisher_red5pro_rtc_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return publisher_red5pro_rtc_getPrototypeOf(o); }





















var pubStartRegex = /(.*) starting/i;
var pubStopRegex = /(.*) stopping/i;
var publisher_red5pro_rtc_NAME = 'RTCPublisher';
var red5pro_rtc_debug = function debug(message) {
  log_debug(publisher_red5pro_rtc_NAME, message);
};
var red5pro_rtc_warn = function warn(message) {
  log_warn(publisher_red5pro_rtc_NAME, message);
};
var red5pro_rtc_error = function error(message) {
  log_error(publisher_red5pro_rtc_NAME, message);
};

// Default to secure settings.
var red5pro_rtc_defaultOptions = {
  protocol: 'wss',
  port: 443,
  app: 'live',
  streamMode: PublishModeTypes.LIVE,
  keyFramerate: 3000,
  mediaElementId: 'red5pro-publisher',
  rtcConfiguration: {
    iceServers: [{
      urls: 'stun:stun2.l.google.com:19302'
    }],
    iceCandidatePoolSize: 2,
    bundlePolicy: 'max-bundle'
  },
  // Favored over iceServers.
  iceServers: undefined,
  // Deprecated. Preserved for backward-compatibility.
  iceTransport: IceTransportTypes.UDP,
  bandwidth: {
    audio: 56,
    video: 512
  },
  clearMediaOnUnpublish: false,
  mediaConstraints: new RTCMediaConstraint(),
  onGetUserMedia: undefined,
  signalingSocketOnly: true,
  dataChannelConfiguration: undefined,
  forceVP8: false,
  socketSwitchDelay: 1000,
  bypassAvailable: false
};
var getConstraintsFromMediaStream = function getConstraintsFromMediaStream(stream) {
  var constraints = {
    audio: false,
    video: false
  };
  var settings = {
    audio: false,
    video: false
  };
  stream.getTracks().forEach(function (track) {
    if (track.kind === 'video') {
      settings.video = track.getSettings();
      constraints.video = track.getConstraints();
    } else if (track.kind === 'audio') {
      settings.audio = track.getSettings();
      constraints.audio = track.getConstraints();
    }
  });
  return {
    requested: constraints,
    accepted: settings
  };
};

/**
 * Main entry for WebRTC-based Publisher.
 *
 * @extends EventEmitter
 */
var red5pro_rtc_RTCPublisher = /*#__PURE__*/function (_EventEmitter) {
  publisher_red5pro_rtc_inherits(RTCPublisher, _EventEmitter);
  var _super = publisher_red5pro_rtc_createSuper(RTCPublisher);
  function RTCPublisher() {
    var _this;
    publisher_red5pro_rtc_classCallCheck(this, RTCPublisher);
    _this = _super.call(this);
    _this._options = undefined;
    _this._view = undefined;
    _this._peerHelper = undefined;
    _this._socketHelper = undefined;
    _this._messageTransport = undefined;
    _this._mediaStream = undefined;
    _this._mediaTransform = undefined;
    _this._switchChannelRequest = undefined;
    _this._streamFuture = undefined;
    _this._availableFuture = undefined;
    _this._peerFuture = undefined;
    _this._offerFuture = undefined;
    _this._sendOfferFuture = undefined;
    _this._trickleEndFuture = undefined;
    _this._publishFuture = undefined;
    _this._unpublishFuture = undefined;
    _this._onOrientationChange = _this._onOrientationChange.bind(publisher_red5pro_rtc_assertThisInitialized(_this));
    _this._gUMRejectionHandler = _this._onGUMRejection.bind(publisher_red5pro_rtc_assertThisInitialized(_this));
    return _this;
  }
  publisher_red5pro_rtc_createClass(RTCPublisher, [{
    key: "_getMediaStream",
    value: function _getMediaStream() {
      this._streamFuture = Future.createIfNotExist(this._streamFuture);
      return this._streamFuture.promise;
    }
  }, {
    key: "_getTrickleEnd",
    value: function _getTrickleEnd() {
      return Future.createIfNotExist(this._trickleEndFuture);
    }

    /**
     * Runs internal `getUserMedia` logic to determine broadcast constraints.
     *
     * @param {Object} options
     *        The initialization options provided in `init()`.
     *
     * @private
     */
  }, {
    key: "_gum",
    value: function _gum(options) {
      var _this2 = this;
      // Safari issue in which, if the MediaStream track listing starts with `video`, broadcasting will fail.
      var _isMediaStreamTrackListingMunged = function _isMediaStreamTrackListingMunged(mediaStream) {
        if (!mediaStream) return false;
        var tracks = mediaStream.getTracks();
        // Ensure that there are 2 tracks (one video and one audio), otherwise, it is OK to broadcast video only.
        if (tracks && tracks.length > 1) {
          return tracks[0].kind === 'video';
        }
        return false;
      };
      if (options.onGetUserMedia !== undefined) {
        red5pro_rtc_debug('Requesting gUM from user-defined configuration:onGetUserMedia.');
        options.onGetUserMedia().then(function (media) {
          if (_isMediaStreamTrackListingMunged(media)) {
            red5pro_rtc_debug('We received a MediaStream with mismatching track listing. Trying again...');
            _this2._gum(options);
            return;
          }
          _this2.trigger(new PublisherEvent(RTCPublisherEventTypes.CONSTRAINTS_ACCEPTED, _this2, getConstraintsFromMediaStream(media)));
          _this2._streamFuture.resolve(media);
        })["catch"](function (err) {
          red5pro_rtc_error("Could not resolve MediaStream from provided gUM. Error - ".concat(err));
          _this2.trigger(new PublisherEvent(RTCPublisherEventTypes.CONSTRAINTS_REJECTED, _this2, {
            constraints: options.mediaConstraints
          }));
          _this2._streamFuture.reject(err);
        });
      } else {
        red5pro_rtc_debug("Requesting gUM using mediaConstraints: ".concat(JSON.stringify(options.mediaConstraints, null, 2)));
        this._peerHelper.getUserMedia(options.mediaConstraints, this._gUMRejectionHandler).then(function (res) {
          if (_isMediaStreamTrackListingMunged(res.media)) {
            red5pro_rtc_debug('We received a MediaStream with mismatching track listing. Trying again...');
            _this2._gum(options);
            return;
          }
          red5pro_rtc_debug("Found valid constraints: ".concat(JSON.stringify(res.constraints, null, 2)));
          _this2.trigger(new PublisherEvent(RTCPublisherEventTypes.CONSTRAINTS_ACCEPTED, _this2, getConstraintsFromMediaStream(res.media)));
          _this2.trigger(new PublisherEvent(PublisherEventTypes.DIMENSION_CHANGE, _this2, res.constraints));
          _this2._streamFuture.resolve(res.media);
        })["catch"](function (rej) {
          red5pro_rtc_debug("Could not find valid constraint resolutions from: ".concat(JSON.stringify(rej.constraints, null, 2)));
          red5pro_rtc_error("Could not resolve MediaStream from provided mediaConstraints. Error - ".concat(rej.error));
          red5pro_rtc_debug("Attempting to find resolutions from original provided constraints: ".concat(JSON.stringify(rej.constraints, null, 2)));
          _this2.trigger(new PublisherEvent(RTCPublisherEventTypes.CONSTRAINTS_REJECTED, _this2, {
            constraints: rej.constraints
          }));
          // allowing to try original constraint requested.
          options.onGetUserMedia = function () {
            return _this2._peerHelper.forceUserMedia(rej.constraints);
          };
          _this2._gum(options);
        });
      }
    }

    /**
     * Callback for rejection on constraints from RTC Peer Helper and getUserMedia requests.
     *
     * @param {MediaConstraints} rejectedConstraints
     *        The MediaConstraints that were rejected from the `getUserMedia` call.
     *
     * @private
     */
  }, {
    key: "_onGUMRejection",
    value: function _onGUMRejection(rejectedConstraints) {
      this.trigger(new PublisherEvent(RTCPublisherEventTypes.CONSTRAINTS_REJECTED, this, {
        constraints: rejectedConstraints
      }));
    }

    /**
     * Invoked upon `onorientationchange` of the browser. Mobile browsers only.
     *
     * @param {int} orientation
     *        The orientation value of the device browser.
     *
     * @private
     */
  }, {
    key: "_onOrientationChange",
    value: function _onOrientationChange(orientation) {
      if (this.getMessageTransport()) {
        this.getMessageTransport().post({
          send: {
            method: 'onMetaData',
            data: {
              deviceOrientation: orientation
            }
          }
        });
      }
    }

    /**
     * Invoked upon receipt from `_gum` with MediaStream instance returned from browser.
     *
     * @param {MediaStream} mediaStream
     *        The `MediaStream` object.
     *
     * @private
     */
  }, {
    key: "_onMediaStreamReceived",
    value: function _onMediaStreamReceived(mediaStream) {
      this._mediaStream = mediaStream;
      this.trigger(new PublisherEvent(RTCPublisherEventTypes.MEDIA_STREAM_AVAILABLE, this, mediaStream));
      if (this._view) {
        this._view.preview(this._mediaStream);
      }
    }

    /**
     * Still in use, but hold-over of previous 3.x SDK versions designed to pair views and publishers. In 4.0.0 it has been internalized.
     * API deprecated.
     *
     * @private
     */
  }, {
    key: "_setViewIfNotExist",
    value: function _setViewIfNotExist(currentView) {
      var mediaElementId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      if (typeof currentView === 'undefined' && mediaElementId !== undefined) {
        var view = new view_publish(mediaElementId);
        view.attachPublisher(this);
      }
    }

    /**
     * Request availability based on unique `streamName`.
     * The return from the WebSocket request will either invoke `onStreamAvailable` or `onStreamUnavailable`.
     *
     * @param {String} streamName
     *        The unique stream name to check if it is _unavailable_ - meaning free to publish against.
     * @return {Promise}
     *        The promise will resolve/reject the `_availableFuture`.
     *
     * @private
     */
  }, {
    key: "_requestAvailability",
    value: function _requestAvailability(streamName) {
      red5pro_rtc_debug('[requestavailability]');
      //this._availableFuture = undefined
      this._availableFuture = Future.createIfNotExist(this._availableFuture);
      if (this._options.bypassAvailable) {
        this._availableFuture.resolve(true);
      } else {
        this._socketHelper.post({
          isAvailable: streamName,
          bundle: true
        });
      }
      return this._availableFuture.promise;
    }

    /**
     * Request to setup RTCPeerConnection instance for exchange of SDP locally and remotely.
     *
     * @param {RTCConfiguration} rtcConfiguration
     *        A custom RTCConfiguration
     * @param {Object} dataChannelConfiguration
     *        Optional configuration for data channel communicaton.
     * @param {Array} iceServers
     *        List of ICE servers
     * @return {Promise}
     *        The promise will resolve/reject the `_peerFuture`.
     *
     * @note For backward compatibility, keeping arguments as optional, with at least one being fulfilled. The `configuration` param will be favored after 5.4.0, `iceServers` is up for deprecation.
     *
     * @private
     */
  }, {
    key: "_createPeerConnection",
    value: function _createPeerConnection(configuration) {
      var dataChannelConfiguration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var iceServers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      red5pro_rtc_debug('[createpeeer]');
      this._peerFuture = undefined;
      this._peerFuture = Future.createIfNotExist(this._peerFuture);
      if (iceServers && configuration) {
        red5pro_rtc_warn('The iceServers configuration property is considered deprecated. Please use the rtcConfiguration configuration property upon which you can assign iceServers. Reference: https://www.red5pro.com/docs/streaming/migrationguide.html');
        configuration.iceServers = iceServers;
      }
      var p;
      if (configuration !== undefined) {
        p = this._peerHelper.setUpWithPeerConfiguration(configuration, dataChannelConfiguration, this._peerFuture);
      } else {
        p = this._peerHelper.setUp(iceServers, this._peerFuture, this._options.rtcpMuxPolicy);
      }
      return p;
    }

    /**
     * Request to generate offer on Peer Connection instance.
     *
     * @param {Object} bandwidth
     *        Optional bandwidth configuration object to munge SDP.
     * @return {Promise}
     *        The promise will resolve/reject a success in creation of the offer through the Peer Connection.
     *
     * @private
     */
  }, {
    key: "_createOffer",
    value: function _createOffer() {
      var bandwidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var forceVP8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      red5pro_rtc_debug('[createoffer]');
      this._offerFuture = undefined;
      this._offerFuture = Future.createIfNotExist(this._offerFuture);
      this._peerHelper.createOffer(bandwidth, forceVP8, false, this._offerFuture);
      return this._offerFuture.promise;
    }

    /**
     * Request to set a remote description on Peer Connection instance.
     *
     * @param {Object} sdp
     *        Object describing the Session Description.
     * @return {Promise}
     *        The promise will resolve/reject in a success in setting the remote SDP on the Peer Connection.
     *
     * @private
     */
  }, {
    key: "_setRemoteDescription",
    value: function _setRemoteDescription(sdp) {
      red5pro_rtc_debug('[setremotedescription]');
      return this._peerHelper.setRemoteDescription(sdp);
    }

    /**
     * Request to send offer on WebSocket instance.
     *
     * @param {Object} sdp
     *        Object describing the Session Description.
     * @param {string} streamName
     *        The unique stream name of the broadcast.
     * @param {String} transport
     *        The transport type.
     * @param {boolean} forceVP8
     *        Flag to request VP8 codec.
     * @return {Promise}
     *        The promise will resolve/reject on the success of delivering an offer over the WebSocket.
     *
     * @private
     */
  }, {
    key: "_sendOffer",
    value: function _sendOffer(sdp, streamName, transport) {
      var forceVP8 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      red5pro_rtc_debug('[sendoffer]');
      var post = {
        handleOffer: streamName,
        transport: transport,
        data: {
          sdp: sdp
        }
      };
      if (forceVP8) {
        post.videoEncoding = PublishVideoEncoder.VP8;
      }
      this._sendOfferFuture = undefined;
      this._sendOfferFuture = Future.createIfNotExist(this._sendOffFuture);
      this._socketHelper.post(post);
      return this._sendOfferFuture.promise;
    }

    /**
     * Request to send ICE candidate over the WebSocket.
     * This can happen several times in the ICE negotiation process.
     *
     * @param {Object} candidate
     *        The Candidate to send.
     * @param {string} streamName
     *        The associated unique stream name of the broadcast.
     *
     * @private
     */
  }, {
    key: "_sendCandidate",
    value: function _sendCandidate(candidate, streamName) {
      red5pro_rtc_debug('[sendcandidate]');
      this._socketHelper.post({
        handleCandidate: streamName,
        data: {
          candidate: candidate
        }
      });
    }

    /**
     * Request on WebSocket to begin publishing.
     *
     * @param {string} streamName
     *        The unique stream name of the broadcast.
     * @param {string} mode
     *        The broadcast mode: `live`, `record` or `append`.
     * @param {int} framerate
     *        The key framerate to broadcast at.
     * @return {Promise}
     *        The promise will resolve/reject in the request to being a broadcast.
     *
     * @private
     */
  }, {
    key: "_requestPublish",
    value: function _requestPublish(streamName, streamMode, framerate) {
      red5pro_rtc_debug('[requestpublish]');
      this._publishFuture = undefined;
      this._publishFuture = Future.createIfNotExist(this._publishFuture);
      this._socketHelper.post({
        publish: streamName,
        mode: streamMode,
        keyFramerate: framerate
      });
      return this._publishFuture.promise;
    }

    /**
     * Request to stop a current broadcast.
     *
     * @param {String} streamName
     *        The unique stream name being broadcast on.
     * @return {Promise}
     *        The promise will resolve/reject on success of properly stopping a broadcast.
     *
     * @private
     */
  }, {
    key: "_requestUnpublish",
    value: function _requestUnpublish(streamName) {
      this._unpublishFuture = undefined;
      this._unpublishFuture = Future.createIfNotExist(this._unpublishFuture);
      // If we get a false response from trying to send a close POST,
      //  it means that the socket has already been closed by another impetus -
      //  most likley loss of network or server failure.
      if (!this.getMessageTransport().postUnpublish(streamName)) {
        this._unpublishFuture.resolve();
      }
      return this._unpublishFuture.promise;
    }

    /**
     * Optionally set up Transforms or assign Web Worker on the video and/or audio track(s) being sent.
     *
     * @param {Object} transformOptions
     * @param {RTCPeerConnection} connection
     * @param {MediaStream} mediaStream
     *
     * @private
     */
  }, {
    key: "_setUpMediaTransform",
    value: function () {
      var _setUpMediaTransform2 = publisher_red5pro_rtc_asyncToGenerator( /*#__PURE__*/publisher_red5pro_rtc_regeneratorRuntime().mark(function _callee(transformOptions, connection, mediaStream) {
        var _this$_mediaTransform, audio, video, worker, videoSender, audioSender, payload, _payload;
        return publisher_red5pro_rtc_regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!transformOptions) {
                _context.next = 16;
                break;
              }
              _this$_mediaTransform = this._mediaTransform, audio = _this$_mediaTransform.audio, video = _this$_mediaTransform.video, worker = _this$_mediaTransform.worker;
              videoSender = connection.getSenders().find(function (s) {
                return s.track && s.track.kind === 'video';
              });
              audioSender = connection.getSenders().find(function (s) {
                return s.track && s.track.kind === 'audio';
              }); // Video
              if (!(videoSender && (video || worker))) {
                _context.next = 15;
                break;
              }
              _context.prev = 5;
              _context.next = 8;
              return PipeVideoSender(transformOptions, videoSender, mediaStream);
            case 8:
              payload = _context.sent;
              if (payload.generator) {
                this._mediaStream.addTrack(payload.generator);
                this._mediaStream.removeTrack(this._mediaStream.getVideoTracks()[0]);
              }
              _context.next = 15;
              break;
            case 12:
              _context.prev = 12;
              _context.t0 = _context["catch"](5);
              this.trigger(new PublisherEvent(RTCPublisherEventTypes.TRANSFORM_ERROR, this, {
                type: 'video',
                error: _context.t0
              }));
            case 15:
              // Audio
              if (audioSender && (audio || worker)) {
                try {
                  _payload = PipeAudioSender(transformOptions, audioSender, mediaStream);
                  if (_payload.generator) {
                    this._mediaStream.addTrack(_payload.generator);
                    this._mediaStream.removeTrack(this._mediaStream.getAudioTracks()[0]);
                  }
                } catch (e) {
                  this.trigger(new PublisherEvent(RTCPublisherEventTypes.TRANSFORM_ERROR, this, {
                    type: 'audio',
                    error: e
                  }));
                }
              }
            case 16:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[5, 12]]);
      }));
      function _setUpMediaTransform(_x, _x2, _x3) {
        return _setUpMediaTransform2.apply(this, arguments);
      }
      return _setUpMediaTransform;
    }()
    /**
     * Request to initialize the WebRTC-based Publisher based on configuration.
     * The returned `Promise` will either resolve with a reference to this instance or reject with an error `String` in failure.
     *
     * @param {Object} options
     *        The initialization configuration map.
     * @param {Object} mediaTransform
     *        The defined transforms to pipe decoding through. InsertableStreams API.
     *            {
     *              video: (function|null),
     *              audio: (function|null),
     *              worker: { video: (Worker|null), audio: (Worker|null) },
     *              transformFrameType: (TransformFrameTypes), pipeOptions: (object),
     *            }
     *        If you have transform functions that can run on the main thread, provide them in `video` and/or `audio`.
     *        If you have transform functions that should be run in a separate thread, utilize the `worker` option providing a `WebWorker`.
     *        By default, the transform function will be supplied an RTCEncodedVideoFrame or RTCEncodedAudioFrame. If you would prefer to receive either a VideoFrame or AudioData instead, use the transfromFrameType of TransformFrameTypes.PACKET.
     *        You can provide some options that will be sent when defining pipe as `pipeOptions`. Read more here: https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/pipeThrough
     *        The `WebWorker` - if utilized - needs to confirm to a specific API that will be called from the SDK.
     *
     * @return {Promise}
     */
  }, {
    key: "init",
    value: function init(options) {
      var mediaTransform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      this._streamFuture = undefined;
      var deferred = new DeferredPromise();
      if (!webrtc_isSupported() || !websocket_isSupported()) {
        deferred.reject('Cannot create WebRTC playback instance. Your environment does not support WebRTC and/or WebSockets.');
      } else {
        this._options = Object.assign({}, red5pro_rtc_defaultOptions, options);
        this._peerHelper = new webrtc_helper_pub(this);
        this._socketHelper = new socket_helper_pub(this);
        // If already defined, use the existing MessageTransport.
        this._messageTransport = this._messageTransport || this._socketHelper;
        this._mediaTransform = mediaTransform;
        if (!!this._mediaTransform && !supportsInsertableStreams()) {
          this.trigger(new PublisherEvent(RTCPublisherEventTypes.UNSUPPORTED_FEATURE, this, {
            feature: 'Insertable Streams',
            message: 'You provided Media Transforms for track processing, but your current browser does not support the Insertable Streams API.'
          }));
          this._mediaTransform = undefined;
        }
        this._getMediaStream().then(this._onMediaStreamReceived.bind(this))["catch"](function (error) {
          red5pro_rtc_warn("[gum]: ".concat(error));
        });
        this._gum(this._options);
        // auto preview.
        this._setViewIfNotExist(this._view, this._options.mediaElementId);
        deferred.resolve(this);
      }
      return deferred.promise;
    }

    /**
     * Request to initialize the WebRTC-based Publisher based on configuration and previously established MediaStream.
     * USE WITH CAUTION. It is assumed you know what you are doing in accessing a MediaStream outside of the API available from the SDK.
     * The returned `Promise` will either resolve with a reference to this instance or reject with an error `String` in failure.
     *
     * @param {Object} options
     *        The initialization configuration map.
     * @param {MediaStream} mediaStream
     *        A previously established MediaStream, most likely receieved through getUserMedia() outside of SDK use.
     * @param {Object} mediaTransform
     *        The defined transforms to pipe decoding through. InsertableStreams API.
     *            {
     *              video: (function|null),
     *              audio: (function|null),
     *              worker: { video: (Worker|null), audio: (Worker|null) },
     *              transformFrameType: (TransformFrameTypes), pipeOptions: (object),
     *            }
     *        If you have transform functions that can run on the main thread, provide them in `video` and/or `audio`.
     *        If you have transform functions that should be run in a separate thread, utilize the `worker` option providing a `WebWorker`.
     *        By default, the transform function will be supplied an RTCEncodedVideoFrame or RTCEncodedAudioFrame. If you would prefer to receive either a VideoFrame or AudioData instead, use the transfromFrameType of TransformFrameTypes.PACKET.
     *        You can provide some options that will be sent when defining pipe as `pipeOptions`. Read more here: https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/pipeThrough
     *        The `WebWorker` - if utilized - needs to confirm to a specific API that will be called from the SDK.
     * @return {Promise}
     */
  }, {
    key: "initWithStream",
    value: function initWithStream(options, mediaStream) {
      var mediaTransform = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      red5pro_rtc_debug('[initWithStream]');
      this._streamFuture = undefined;
      var deferred = new DeferredPromise();
      if (!webrtc_isSupported() || !websocket_isSupported()) {
        deferred.reject('Cannot create WebRTC playback instance. Your environment does not support WebRTC and/or WebSockets.');
      } else {
        this._mediaTransform = mediaTransform;
        if (!!this._mediaTransform && !supportsInsertableStreams()) {
          this.trigger(new PublisherEvent(RTCPublisherEventTypes.UNSUPPORTED_FEATURE, this, {
            feature: 'Insertable Streams',
            message: 'You provided Media Transforms for track processing, but your current browser does not support the Insertable Streams API.'
          }));
          this._mediaTransform = undefined;
        }
        this._options = Object.assign({}, red5pro_rtc_defaultOptions, options);
        this._peerHelper = new webrtc_helper_pub(this);
        this._socketHelper = new socket_helper_pub(this);
        this._messageTransport = this._messageTransport || this._socketHelper;
        // auto preview.
        this._setViewIfNotExist(this._view, this._options.mediaElementId);
        var mediaPromise = this._getMediaStream();
        mediaPromise.then(this._onMediaStreamReceived.bind(this))["catch"](function (error) {
          red5pro_rtc_warn("[gum]: ".concat(error));
        });
        this._streamFuture.resolve(mediaStream);
        deferred.resolve(this);
      }
      return deferred.promise;
    }

    /**
     * Still in use for assigning document element view management to this instance.
     * API deprecated in 4.0.0.
     *
     * @private
     */
  }, {
    key: "setView",
    value: function setView(view) {
      this._view = view;
      if (this._mediaStream && this._view) {
        this._view.preview(this._mediaStream);
      }
      return this;
    }

    /**
     * Request to preview the generate MediaStream in the target view prior to publishing.
     * Automatically called when invoking `publish()`.
     *
     * @return {Promise}
     * @see #publish
     */
  }, {
    key: "preview",
    value: function preview() {
      var _this3 = this;
      red5pro_rtc_debug('[preview]');
      var p = new Promise(function (res) {
        res(_this3);
      });
      this._setViewIfNotExist(this._view, this._options.mediaElementId);
      return p;
    }

    /**
     * Clears the MediaStream from the target view and releases the camera from the browser.
     * If `clearMediaOnUnpublish` is set in the initialization configuration, this will be invoked internally when `unpublish` is called.
     *
     * @see #preview
     */
  }, {
    key: "unpreview",
    value: function unpreview() {
      red5pro_rtc_debug('[unpreview]');
      if (this._mediaStream) {
        this._mediaStream.getTracks().forEach(function (track) {
          track.stop();
        });
      }
      if (this._view) {
        this._view.unpreview();
      }
    }

    /**
     * Request to begin a broadcast session after initialization has occured.
     *
     * @param {String} streamName
     *        Optional stream name to broadcast on, otherwise defaulting to the `streamName` provided in `init()` configuration.
     * @param {Promise} promise
     *        Optional `Promise` object to resolve/reject on based on sequence of events in establishing a broadcast, otherwise defaulting to `Promise` created internally and returned.
     * @return {Promise}
     *        The returned `Promise` will resolve or reject on successful start of a broadcast.<br>
     *        There are several processes that occur in order to establish a WebRTC broadcast that involve - but are not limited to - ICE communication and assigning of local and remote SDPs on peer connections.
     */
  }, {
    key: "publish",
    value: function publish() {
      var _this4 = this;
      var streamName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var promise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      red5pro_rtc_debug('[publish]');
      this._options.streamName = streamName || this._options.streamName;
      var p = promise || new DeferredPromise();
      var socketPromise = new DeferredPromise();
      var socketurl = rtcSocketEndpointFromOptions(this._options, {
        id: this._options.streamName
      });
      this._trickleEndFuture = this._getTrickleEnd();
      if (!this._peerHelper) {
        this._peerHelper = new webrtc_helper_pub(this);
      }
      if (this._socketHelper) {
        this._socketHelper.clearRetry();
      } else {
        this._socketHelper = new socket_helper_pub(this);
        this._messageTransport = this._socketHelper;
      }
      this._socketHelper.setUp(socketurl, socketPromise);
      var _this$_options = this._options,
        rtcConfiguration = _this$_options.rtcConfiguration,
        signalingSocketOnly = _this$_options.signalingSocketOnly,
        dataChannelConfiguration = _this$_options.dataChannelConfiguration;
      // Set default data channel configuration if not defined and severing socket on signal end.
      // TODO: Set this as more "private" with `red5pro-<streamname>`
      var dataChannelAllowed = signalingSocketOnly && webrtc_supportsDataChannel();
      if (dataChannelAllowed && !dataChannelConfiguration) {
        dataChannelConfiguration = {
          name: "red5pro"
        };
      }
      this._options.signalingSocketOnly = dataChannelAllowed;

      // Moved this out in order to handle socket errors within any step of process.
      this._publishFuture = Future.createIfNotExist(this._publishFuture);
      this._publishFuture.promise["catch"](function (error) {
        browser.removeOrientationChangeHandler(_this4._onOrientationChange);
        p.reject(error);
        _this4.trigger(new PublisherEvent(PublisherEventTypes.CONNECT_FAILURE, _this4, error));
      });

      // 0. Establish socket connection.
      socketPromise.promise
      // 1. Wait for stream attach
      .then(function () {
        _this4.trigger(new PublisherEvent(PublisherEventTypes.CONNECT_SUCCESS, _this4));
        return _this4._getMediaStream();
      })
      // 2. Request available stream to publish on
      .then(function () {
        return _this4._requestAvailability(_this4._options.streamName, _this4._options.streamType);
      })
      // 3. Create Peer Connection
      .then(function () {
        var configuration = rtcConfiguration;
        // If not currently defined:
        if (typeof rtcConfiguration.encodedInsertableStreams === 'undefined') {
          configuration = Object.assign(rtcConfiguration, {
            encodedInsertableStreams: !!_this4._mediaTransform
          });
        }
        return _this4._createPeerConnection(configuration, dataChannelConfiguration, _this4._options.iceServers);
      })
      // 4. Make Offer on Peer Connection
      .then(function (connection) {
        _this4.trigger(new PublisherEvent(RTCPublisherEventTypes.PEER_CONNECTION_AVAILABLE, _this4, connection));
        _this4._mediaStream.getTracks().forEach(function (track) {
          connection.addTrack(track, _this4._mediaStream);
        });
        var forceVP8 = _this4._options.forceVP8;
        if (forceVP8) {
          var stream = _this4._mediaStream;
          var _RTCRtpSender$getCapa = RTCRtpSender.getCapabilities('video'),
            codecs = _RTCRtpSender$getCapa.codecs;
          var selectedCodecIndex = codecs.findIndex(function (c) {
            return c.mimeType === 'video/VP8';
          });
          if (selectedCodecIndex > -1) {
            var selectedCodec = codecs[selectedCodecIndex];
            codecs.splice(selectedCodecIndex, 1);
            codecs.unshift(selectedCodec);
            var transceivers = connection.getTransceivers();
            var transceiver = transceivers.find(function (t) {
              return t.sender && t.sender.track === stream.getVideoTracks()[0];
            });
            transceiver.setCodecPreferences(codecs);
          }
        }
        // Deprecated.
        //        connection.addStream(this._mediaStream)
        return _this4._createOffer(_this4._options.bandwidth, _this4._options.forceVP8);
      })
      // 5. Send Offer
      .then(function (sessionDescription) {
        var _this4$_options = _this4._options,
          streamName = _this4$_options.streamName,
          iceTransport = _this4$_options.iceTransport,
          forceVP8 = _this4$_options.forceVP8;
        _this4.trigger(new PublisherEvent(RTCPublisherEventTypes.OFFER_START, _this4, sessionDescription));
        return _this4._sendOffer(sessionDescription, streamName, iceTransport, forceVP8);
      })
      // 6. Set the session description remotely
      .then(function (sdp) {
        return _this4._setRemoteDescription(sdp.sdp);
      })
      // 7. Wait until ice trickle end
      .then(function (sdp) {
        _this4.trigger(new PublisherEvent(RTCPublisherEventTypes.OFFER_END, _this4, sdp));
        return _this4._getTrickleEnd().promise;
      })
      // 8. Request to publish stream
      .then(function () {
        _this4.trigger(new PublisherEvent(RTCPublisherEventTypes.ICE_TRICKLE_COMPLETE, _this4));
        return _this4._requestPublish(_this4._options.streamName, _this4._options.streamMode, _this4._options.keyFramerate);
      })
      // 9. Results in socket message of publish (see :onPublishStatus)
      .then(function () {
        _this4._setUpMediaTransform(_this4._mediaTransform, _this4.getPeerConnection(), _this4.getMediaStream());
        browser.addOrientationChangeHandler(_this4._onOrientationChange);
        p.resolve(_this4);
        _this4.trigger(new PublisherEvent(PublisherEventTypes.PUBLISH_START, _this4));
      })["catch"](function (error) {
        browser.removeOrientationChangeHandler(_this4._onOrientationChange);
        p.reject(error);
        _this4.trigger(new PublisherEvent(PublisherEventTypes.CONNECT_FAILURE, _this4, error));
      });
      return p.hasOwnProperty('promise') ? p.promise : p;
    }

    /**
     * Request to begin a broadcast session after initialization has occured and with a previously established WebSocket instance.
     * USE WITH CAUTION. It is assumed you know what you are doing by providing a previously established WebSocket instance.
     *
     * @param {WebSocket} socket
     *        The previous established WebSocket to use in broadcast session signalling.
     * @param {String} streamName
     *        Optional stream name to broadcast on, otherwise defaulting to the `streamName` provided in `init()` configuration.
     * @param {Promise} promise
     *        Optional `Promise` object to resolve/reject on based on sequence of events in establishing a broadcast, otherwise defaulting to `Promise` created internally and returned.
     *
     * @return {Promise}
     *        The returned `Promise` will resolve or reject on successful start of a broadcast.<br>
     *        There are several processes that occur in order to establish a WebRTC broadcast that involve - but are not limited to - ICE communication and assigning of local and remote SDPs on peer connections.
     *
     * @private
     */
  }, {
    key: "publishWithSocket",
    value: function publishWithSocket(socket) {
      var _this5 = this;
      var streamName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var promise = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      red5pro_rtc_debug('[publishWithSocket]');
      this._options.streamName = streamName || this._options.streamName;
      var p = promise || new DeferredPromise();
      var socketPromise = new DeferredPromise();
      this._socketHelper = new socket_helper_pub(this);
      this._socketHelper.setUpWithSocket(socket, socketPromise);

      // 1. Establish a socket handler instance with previous WebSocket instance.
      socketPromise.promise
      // 2. Request to publish stream
      .then(function () {
        return _this5._requestPublish(_this5._options.streamName, _this5._options.streamMode, _this5._options.keyFramerate);
      })
      // 3. Results in socket message of publish (see :onPublishStatus)
      .then(function () {
        browser.addOrientationChangeHandler(_this5._onOrientationChange);
        p.resolve(_this5);
        _this5.trigger(new PublisherEvent(PublisherEventTypes.PUBLISH_START, _this5));
      })["catch"](function (error) {
        browser.removeOrientationChangeHandler(_this5._onOrientationChange);
        p.reject(error);
        _this5.trigger(new PublisherEvent(PublisherEventTypes.CONNECT_FAILURE, _this5, error));
      });
      return p.hasOwnProperty('promise') ? p.promise : p;
    }

    /**
     * Request to stop a broadcast.
     * The returned `Promise` will either resolve or reject on successful stop of broadcast.
     *
     * @param {Boolean} andRemove
     *        Flag to additionally remove the preview.
     *
     * @return {Promise}
     */
  }, {
    key: "unpublish",
    value: function unpublish() {
      var _this6 = this;
      var andRemove = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      red5pro_rtc_debug('[unpublish]');
      var clearHelpers = function clearHelpers() {
        if (_this6._socketHelper) {
          red5pro_rtc_debug('[unpublish:teardown]');
          _this6._socketHelper.tearDown();
        }
        if (_this6._peerHelper) {
          _this6._peerHelper.tearDown();
        }
        _this6._socketHelper = undefined;
        _this6._peerHelper = undefined;
        _this6._messageTransport = undefined;
      };
      if (this._options.clearMediaOnUnpublish || andRemove) {
        this.unpreview();
      }
      this._availableFuture = undefined;
      this._peerFuture = undefined;
      this._offerFuture = undefined;
      this._sendOfferFuture = undefined;
      this._trickleEndFuture = undefined;
      this._publishFuture = undefined;
      var f = this._requestUnpublish(this._options.streamName, this._options.groupName);
      f.then(function () {
        _this6._unpublishFuture = undefined;
        //      this._mediaStream = undefined
        clearHelpers();
        _this6.trigger(new PublisherEvent(PublisherEventTypes.UNPUBLISH_SUCCESS, _this6));
      });
      browser.removeOrientationChangeHandler(this._onOrientationChange);
      return f;
    }

    /**
     * Deprecated. Use `muteAudio`.
     *
     * @private
     */
  }, {
    key: "mute",
    value: function mute() {
      // backward comatibility - to be deprecated.
      this.muteAudio();
    }

    /**
     * Deprecated. Use `unmuteAudio`.
     *
     * @private
     */
  }, {
    key: "unmute",
    value: function unmute() {
      // backward comatibility - to be deprecated.
      this.unmuteAudio();
    }

    /**
     * Request to mute the audio of the broadcast.
     * Can only be called once the broadcast has begun.
     */
  }, {
    key: "muteAudio",
    value: function muteAudio() {
      this.getMessageTransport().post({
        mute: {
          muteAudio: true
        }
      });
    }

    /**
     * Request to unmute the audio of a broadcast that has been previously muted.
     */
  }, {
    key: "unmuteAudio",
    value: function unmuteAudio() {
      this.getMessageTransport().post({
        mute: {
          muteAudio: false
        }
      });
    }

    /** Request to mute (not send) the video of the broadcast.
     * Can only be called once the broadcast has begun.
     */
  }, {
    key: "muteVideo",
    value: function muteVideo() {
      this.getMessageTransport().post({
        mute: {
          muteVideo: true
        }
      });
    }

    /**
     * Request to unmute (resume sending) the video of a previously video-muted broadcast.
     */
  }, {
    key: "unmuteVideo",
    value: function unmuteVideo() {
      this.getMessageTransport().post({
        mute: {
          muteVideo: false
        }
      });
    }

    /**
     * Request to send a message to all subscribers.
     *
     * @param {String} methodName
     *        The method name associated with the message to be accepted by all subscribers.
     * @param {Object} data
     *        The data object to send associated with the method name.
     */
  }, {
    key: "send",
    value: function send(methodName, data) {
      this.getMessageTransport().post({
        send: {
          method: methodName,
          data: typeof data === 'string' ? JSON.parse(data) : data
        }
      });
    }

    /**
     * Request to invoke a method on the Application Adapter related to the `app` config setting.
     *
     * @param {String} methodName
     *        The name of the method to invoke on thw Application Adapter
     * @param {Array} args
     *        The ordered list of arguments to invoke on the method. Do not provide anything if the method takes no arguments.
     * @return {Promise}
     */
  }, {
    key: "callServer",
    value: function callServer(methodName, args) {
      return this.getMessageTransport().postAsync({
        callAdapter: {
          method: methodName,
          arguments: args
        }
      });
    }

    /**
     * Sends an RPC log to the server which will be printed out in server logs.
     *
     * @param {String} level
     *        Valid values: TRACE, INFO, DEBUG, WARN or ERROR
     * @param {Object} message
     *        Either a String or a JSON-serializable Object. This param will be converted to a string to be sent to the server.
     */
  }, {
    key: "sendLog",
    value: function sendLog(level, message) {
      try {
        var theLevel = Object.keys(LEVELS).find(function (l) {
          return l.toLowerCase() === level.toLowerCase();
        }) ? level : LEVELS.DEBUG;
        var theMessage = typeof message === 'string' ? message : JSON.stringify(message);
        this.getMessageTransport().post({
          log: theLevel.toUpperCase(),
          message: theMessage
        });
      } catch (e) {
        var _message = e.message || e;
        red5pro_rtc_error(publisher_red5pro_rtc_NAME, "Could not send log to server. Message parameter expected to be String or JSON-serializable object.");
        red5pro_rtc_error(publisher_red5pro_rtc_NAME, _message);
      }
    }

    /**
     * Event handler for availability of stream on request over the socket.
     *
     * @private
     */
  }, {
    key: "onStreamAvailable",
    value: function onStreamAvailable(receipt) {
      red5pro_rtc_debug('[onstreamavailable]: ' + JSON.stringify(receipt, null, 2));
      this._availableFuture = Future.createIfNotExist(this._availableFuture);
      this._availableFuture.reject("Stream with name ".concat(this._options.streamName, " already has a broadcast session."));
      this.trigger(new PublisherEvent(PublisherEventTypes.PUBLISH_INVALID_NAME, this));
    }

    /**
     * Event handler for unavailability of stream on request over the socket.
     *
     * @private
     */
  }, {
    key: "onStreamUnavailable",
    value: function onStreamUnavailable(receipt) {
      // Being unavailable, is a good thing for allowing to publish using `options.streamName`
      red5pro_rtc_debug("Stream ".concat(this._options.streamName, " does not exist."));
      red5pro_rtc_debug('[onstreamunavailable]: ' + JSON.stringify(receipt, null, 2));
      this._availableFuture = Future.createIfNotExist(this._availableFuture);
      this._availableFuture.resolve(true);
    }

    /**
     * General event handler for all messages.
     *
     * @private
     */
  }, {
    key: "onSocketMessage",
    value: function onSocketMessage(socket, message) {
      this.trigger(new PublisherEvent(RTCPublisherEventTypes.SOCKET_MESSAGE, this, {
        socket: socket,
        message: message
      }));
    }

    /**
     * Event handler for WebSocket errors.
     *
     * @private
     */
  }, {
    key: "onSocketMessageError",
    value: function onSocketMessageError(message) {
      var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      red5pro_rtc_error("Error in stream publish: ".concat(message, ".\n[Optional detail]: ").concat(detail));
      if (this._publishFuture) {
        this.trigger(new PublisherEvent(PublisherEventTypes.PUBLISH_FAIL, this));
        this._publishFuture.reject(message);
        this.unpublish();
      }
    }

    /**
     * Event handler for close of WebSocket.
     *
     * @private
     */
  }, {
    key: "onSocketClose",
    value: function onSocketClose(closeEvent) {
      red5pro_rtc_debug('[onsocketclose]');
      if (this._peerHelper) {
        this._peerHelper.tearDown();
      }
      this.trigger(new PublisherEvent(PublisherEventTypes.CONNECTION_CLOSED, this, closeEvent));
    }

    /**
     * Event handler for connection on stream being closed.
     *
     * @private
     */
  }, {
    key: "onConnectionClosed",
    value: function onConnectionClosed() {
      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      if (!this._connectionClosed) {
        red5pro_rtc_debug(publisher_red5pro_rtc_NAME, '[onconnectionclosed]');
        this.unpublish();
        this.trigger(new PublisherEvent(PublisherEventTypes.CONNECTION_CLOSED, this, event));
      }
    }

    /**
     * Event handler for fail in Peer Connection.
     *
     * @private
     */
  }, {
    key: "onPeerConnectionFail",
    value: function onPeerConnectionFail() {
      red5pro_rtc_debug('[onpeerconnectionfail]');
      this.trigger(new PublisherEvent(PublisherEventTypes.PUBLISH_FAIL, this));
      if (this._publishFuture) {
        this._publishFuture.reject('Peer Connection Failed.');
      }
    }

    /**
     * Event handler for close of Peer Connection.
     *
     * @private
     */
  }, {
    key: "onPeerConnectionClose",
    value: function onPeerConnectionClose(event) {
      red5pro_rtc_debug('[onpeerconnectionclose]');
      if (this._socketHelper) {
        red5pro_rtc_debug('[onpeerconnectionclose:teardown]');
        this._socketHelper.tearDown();
      }
      this.onSocketClose(event);
    }

    /**
     * Event handler for open of Peer Connection.
     *
     * @private
     */
  }, {
    key: "onPeerConnectionOpen",
    value: function onPeerConnectionOpen() {
      red5pro_rtc_debug('[onpeerconnection::open]');
      this.trigger(new PublisherEvent(RTCPublisherEventTypes.PEER_CONNECTION_OPEN), this, this.getPeerConnection());
    }

    /**
     * Event handler for track add on PeerConnection.
     *
     * @private
     */
  }, {
    key: "onPeerConnectionTrackAdd",
    value: function onPeerConnectionTrackAdd(track) {
      red5pro_rtc_debug('[onpeerconnection::track]');
      this.trigger(new PublisherEvent(RTCPublisherEventTypes.TRACK_ADDED, this, {
        track: track
      }));
    }

    /**
     * Event handler for success of SDP offer over WebSocket.
     *
     * @private
     */
  }, {
    key: "onSDPSuccess",
    value: function onSDPSuccess(receipt) {
      var info = receipt ? ': ' + JSON.stringify(receipt, null, 2) : '';
      red5pro_rtc_debug("[onsdpsuccess]".concat(info));
    }

    /**
     * Event handler for error in SDP offer over WebSocket.
     *
     * @private
     */
  }, {
    key: "onSDPError",
    value: function onSDPError(receipt) {
      this.trigger(new PublisherEvent(PublisherEventTypes.PUBLISH_FAIL, this));
      var errorMsg = receipt ? ': ' + JSON.stringify(receipt, null, 2) : '';
      red5pro_rtc_error("[onsdperror]".concat(errorMsg));
    }

    /**
     * Event handler for success in SDP answer over WebSocket.
     *
     * @private
     */
  }, {
    key: "onSDPAnswer",
    value: function onSDPAnswer(sdp) {
      red5pro_rtc_debug('[sdpanswer]:: ' + JSON.stringify(sdp, null, 2));
      this._sendOfferFuture = Future.createIfNotExist(this._sendOfferFuture);
      this._sendOfferFuture.resolve(sdp);
    }

    /**
     * Event handler for request to add ICE candidate on Peer Connection instance.
     *
     * @private
     */
  }, {
    key: "onAddIceCandidate",
    value: function onAddIceCandidate(candidate) {
      red5pro_rtc_debug('[addicecandidate]');
      this._peerHelper.addIceCandidate(candidate).then(function () {
        red5pro_rtc_debug('[addicecandidate:success]');
      })["catch"](function (err) {
        red5pro_rtc_warn("[addicecandidate:error] - ".concat(err));
      });
    }

    /**
     * Event handler for receipt and request to send ICE candidate.
     *
     * @private
     */
  }, {
    key: "onIceCandidate",
    value: function onIceCandidate(candidate) {
      red5pro_rtc_debug('[icecandidatetrickle]');
      this._sendCandidate(candidate, this._options.streamName);
    }

    /**
     * Event handler for end of ICE trickle negotiation.
     *
     * @private
     */
  }, {
    key: "onIceCandidateTrickleEnd",
    value: function onIceCandidateTrickleEnd() {
      red5pro_rtc_debug('[icecandidatetrickle:end]');
    }

    /**
     * Event handler for receipt of empty candidate during ICE negotiation.
     *
     * @private
     */
  }, {
    key: "onEmptyCandidate",
    value: function onEmptyCandidate() {
      red5pro_rtc_debug('[icecandidatetrickle:empty]');
      this.trigger(new PublisherEvent(RTCPublisherEventTypes.PEER_CANDIDATE_END));
    }

    /**
     * Event handler for completion of peer ice candidate gathering.
     *
     * @private
     */
  }, {
    key: "onPeerGatheringComplete",
    value: function onPeerGatheringComplete() {
      red5pro_rtc_debug('[icecandidategathering:end]');
      if (this._socketHelper) {
        this._socketHelper.postEndOfCandidates(this._options.streamName);
      }
    }

    /**
     * Event handler for end of ICE candidate notification over WebSocket.
     *
     * @private
     */
  }, {
    key: "onSocketIceCandidateEnd",
    value: function onSocketIceCandidateEnd() {
      red5pro_rtc_debug('[socketicecandidate:end]');
      this._getTrickleEnd().resolve();
      // this._trickleEndFuture = undefined
    }

    /**
     * Publisher status event handler for start and stop of this Publisher instance.
     *
     * @private
     */
  }, {
    key: "onPublisherStatus",
    value: function onPublisherStatus(status) {
      red5pro_rtc_debug('[publisherstatus] - ' + JSON.stringify(status, null, 2));
      var stopResult = pubStopRegex.exec(status.message);
      var startResult = pubStartRegex.exec(status.message);
      if (stopResult && stopResult[1] === this._options.streamName) {
        this._unpublishFuture.resolve();
      } else if (startResult && startResult[1] === this._options.streamName) {
        this._publishFuture.resolve();
      } else if (status.code && status.code === 'NetStream.Publish.IsAvailable') {
        this.trigger(new PublisherEvent(PublisherEventTypes.PUBLISH_AVAILABLE, this.status));
      } else {
        this.trigger(new PublisherEvent(PublisherEventTypes.PUBLISH_STATUS, this, status));
      }
    }

    /**
     * Notification from server on insufficient bandwidth for current broadcast.
     *
     * @param {Object} data
     *        Provides information regarding current bandwidth conditions.
     *
     * @private
     */
  }, {
    key: "onInsufficientBandwidth",
    value: function onInsufficientBandwidth(data) {
      this.trigger(new PublisherEvent(PublisherEventTypes.PUBLISH_INSUFFICIENT_BANDWIDTH, this, data));
    }

    /**
     * Notification from server on recovered sufficient bandwidth for current broadcast.
     *
     * @param {Object} data
     *        Provides information regarding current bandwidth conditions.
     *
     * @private
     */
  }, {
    key: "onSufficientBandwidth",
    value: function onSufficientBandwidth(data) {
      this.trigger(new PublisherEvent(PublisherEventTypes.PUBLISH_SUFFICIENT_BANDWIDTH, this, data));
    }

    /**
     * Notification from server on bandwidth recovery data for current broadcast.
     *
     * @param {Object} data
     *        Provides information regarding current bandwidth conditions.
     *
     * @private
     */
  }, {
    key: "onRecoveringBandwidth",
    value: function onRecoveringBandwidth(data) {
      this.trigger(new PublisherEvent(PublisherEventTypes.PUBLISH_RECOVERING_BANDWIDTH, this, data));
    }

    /**
     * Notification from server on send method data.
     *
     * @private
     */
  }, {
    key: "onSendReceived",
    value: function onSendReceived(methodName, data) {
      if (methodName === 'onMetaData') {
        this.onMetaData(data);
      } else {
        // environment.invoke(methodName, data)
        this.trigger(new PublisherEvent(PublisherEventTypes.PUBLISH_SEND_INVOKE, this, {
          methodName: methodName,
          data: data
        }));
      }
    }

    /**
     * Event listener for Data Channel being open on server to switch signaling.
     *
     * @private
     */
  }, {
    key: "onDataChannelAvailable",
    value: function onDataChannelAvailable(channelName) {
      var _this7 = this;
      red5pro_rtc_debug('[ondatachannel::available]');
      this._switchChannelRequest = {
        switchChannel: channelName || 'red5pro'
      };
      if (this._options.signalingSocketOnly) {
        var t = setTimeout(function () {
          clearTimeout(t);
          if (_this7._socketHelper) {
            _this7._socketHelper.sever(_this7._switchChannelRequest);
          }
          _this7._messageTransport = _this7._peerHelper;
          _this7.trigger(new MessageTransportStateEvent(MessageTransportStateEventTypes.CHANGE, _this7, {
            controller: _this7,
            transport: _this7._messageTransport
          }));
        }, this._socketHelper ? this._options.socketSwitchDelay : 100);
      }
      this.trigger(new PublisherEvent(RTCPublisherEventTypes.DATA_CHANNEL_AVAILABLE, this, {
        name: channelName,
        dataChannel: this.getDataChannel()
      }));
    }

    /**
     * Event handler for notifications of error on optional data channel.
     *
     * @param {RTCDataChannel} dataChannel
     * @param {String} error
     *
     * @private
     */
  }, {
    key: "onDataChannelError",
    value: function onDataChannelError(dataChannel, error) {
      this.trigger(new PublisherEvent(RTCPublisherEventTypes.DATA_CHANNEL_ERROR, this, {
        dataChannel: dataChannel,
        error: error
      }));
    }

    /**
     * Event handler for notifications of message on optional data channel.
     *
     * @param {RTCDataChannel} dataChannel
     * @param {Object} message
     *
     * @private
     */
  }, {
    key: "onDataChannelMessage",
    value: function onDataChannelMessage(dataChannel, messageData) {
      this.trigger(new PublisherEvent(RTCPublisherEventTypes.DATA_CHANNEL_MESSAGE, this, {
        dataChannel: dataChannel,
        message: messageData
      }));
    }

    /**
     * Notification from optionally opened RTCDataChannel.
     *
     * @private
     */
  }, {
    key: "onDataChannelOpen",
    value: function onDataChannelOpen(dataChannel) {
      this.trigger(new PublisherEvent(RTCPublisherEventTypes.DATA_CHANNEL_OPEN, this, {
        dataChannel: dataChannel
      }));
    }

    /**
     * Notification from optionally opened RTCDataChannel on closure.
     *
     * @private
     */
  }, {
    key: "onDataChannelClose",
    value: function onDataChannelClose(dataChannel) {
      this.trigger(new PublisherEvent(RTCPublisherEventTypes.DATA_CHANNEL_CLOSE, this, {
        dataChannel: dataChannel
      }));
    }

    /**
     * Notification from server on metadata.
     *
     * @private
     */
  }, {
    key: "onMetaData",
    value: function onMetaData(data) {
      // eslint-disable-line no-unused-vars
      this.trigger(new PublisherEvent(PublisherEventTypes.PUBLISH_METADATA, this, data));
    }

    /**
     * Helper method to overlay options over current configuration.
     *
     * @private
     */
  }, {
    key: "overlayOptions",
    value: function overlayOptions(newOptions) {
      this._options = Object.assign(this._options, newOptions);
    }

    /**
     * Returns the Message Transport instance that posts requests to the server.
     *
     *  @return {Object}
     *          Either the socker proxy or the peer connection proxy
     *
     * @private
     */
  }, {
    key: "getMessageTransport",
    value: function getMessageTransport() {
      return this._messageTransport;
    }

    /**
     * Returns the current WebSocket connection helper if established.
     * Used in SharedObject communication.
     *
     * @return {PublisherSocketHelper}
     *
     * @private
     */
  }, {
    key: "getConnection",
    value: function getConnection() {
      return this._socketHelper;
    }

    /**
     * Returns the current RTCPeerConnection helper if established.
     *
     * @return {RTCPeerConnection}
     */
  }, {
    key: "getPeerConnection",
    value: function getPeerConnection() {
      return this._peerHelper ? this._peerHelper.connection : undefined;
    }

    /**
     * Returns the current RTCDataChannel is available.
     *
     * @return {RTCDataChannel}
     */
  }, {
    key: "getDataChannel",
    value: function getDataChannel() {
      return this._peerHelper ? this._peerHelper.dataChannel : undefined;
    }

    /**
     * Returns the `MediaStream` instance if generated through `getUserMedia` and exists for broadcast.
     *
     * @return {MediaStream}
     */
  }, {
    key: "getMediaStream",
    value: function getMediaStream() {
      return this._mediaStream;
    }

    /**
     * Returns the initialization configuration used in `init()`.
     *
     * @return {Object}
     */
  }, {
    key: "getOptions",
    value: function getOptions() {
      return this._options;
    }

    /**
     * Returns the type of implementation: `RTC`.
     *
     * @return {String}
     */
  }, {
    key: "getType",
    value: function getType() {
      return PublishTypes.RTC.toUpperCase();
    }
  }]);
  return RTCPublisher;
}(event_emitter);
/* harmony default export */ var publisher_red5pro_rtc = (red5pro_rtc_RTCPublisher);
// CONCATENATED MODULE: ./src/js/publisher/red5pro-whip.js
function red5pro_whip_typeof(obj) { "@babel/helpers - typeof"; return red5pro_whip_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, red5pro_whip_typeof(obj); }
function red5pro_whip_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function red5pro_whip_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? red5pro_whip_ownKeys(Object(source), !0).forEach(function (key) { red5pro_whip_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : red5pro_whip_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function red5pro_whip_defineProperty(obj, key, value) { key = red5pro_whip_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function red5pro_whip_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ red5pro_whip_regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == red5pro_whip_typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function red5pro_whip_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function red5pro_whip_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { red5pro_whip_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { red5pro_whip_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function red5pro_whip_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function red5pro_whip_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, red5pro_whip_toPropertyKey(descriptor.key), descriptor); } }
function red5pro_whip_createClass(Constructor, protoProps, staticProps) { if (protoProps) red5pro_whip_defineProperties(Constructor.prototype, protoProps); if (staticProps) red5pro_whip_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function red5pro_whip_toPropertyKey(arg) { var key = red5pro_whip_toPrimitive(arg, "string"); return red5pro_whip_typeof(key) === "symbol" ? key : String(key); }
function red5pro_whip_toPrimitive(input, hint) { if (red5pro_whip_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (red5pro_whip_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function red5pro_whip_get() { if (typeof Reflect !== "undefined" && Reflect.get) { red5pro_whip_get = Reflect.get.bind(); } else { red5pro_whip_get = function _get(target, property, receiver) { var base = red5pro_whip_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return red5pro_whip_get.apply(this, arguments); }
function red5pro_whip_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = red5pro_whip_getPrototypeOf(object); if (object === null) break; } return object; }
function red5pro_whip_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) red5pro_whip_setPrototypeOf(subClass, superClass); }
function red5pro_whip_setPrototypeOf(o, p) { red5pro_whip_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return red5pro_whip_setPrototypeOf(o, p); }
function red5pro_whip_createSuper(Derived) { var hasNativeReflectConstruct = red5pro_whip_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = red5pro_whip_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = red5pro_whip_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return red5pro_whip_possibleConstructorReturn(this, result); }; }
function red5pro_whip_possibleConstructorReturn(self, call) { if (call && (red5pro_whip_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return red5pro_whip_assertThisInitialized(self); }
function red5pro_whip_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function red5pro_whip_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function red5pro_whip_getPrototypeOf(o) { red5pro_whip_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return red5pro_whip_getPrototypeOf(o); }














var red5pro_whip_NAME = 'WHIPClient';
var red5pro_whip_ICE_GATHER_TIMEOUT = 1000;
var red5pro_whip_debug = function debug(message) {
  log_debug(red5pro_whip_NAME, message);
};
var red5pro_whip_warn = function warn(message) {
  log_warn(red5pro_whip_NAME, message);
};
var red5pro_whip_error = function error(message) {
  log_error(red5pro_whip_NAME, message);
};

// Default to secure settings.
var red5pro_whip_defaultOptions = {
  protocol: 'https',
  port: 443,
  app: 'live',
  streamMode: PublishModeTypes.LIVE,
  keyFramerate: 3000,
  mediaElementId: 'red5pro-publisher',
  rtcConfiguration: {
    iceServers: [{
      urls: 'stun:stun2.l.google.com:19302'
    }],
    iceCandidatePoolSize: 2,
    bundlePolicy: 'max-bundle'
  },
  // Favored over iceServers.
  iceServers: undefined,
  // Deprecated. Preserved for backward-compatibility.
  iceTransport: IceTransportTypes.UDP,
  bandwidth: {
    audio: 56,
    video: 750
  },
  clearMediaOnUnpublish: false,
  mediaConstraints: new RTCMediaConstraint(),
  onGetUserMedia: undefined,
  dataChannelConfiguration: undefined,
  forceVP8: false,
  bypassAvailable: false,
  signalingSocketOnly: false,
  enableChannelSignaling: true,
  // WHIP/WHEP specific
  trickleIce: true,
  // Flag to use trickle ice to send candidates
  mungeOffer: undefined,
  mungeAnswer: undefined
};
var red5pro_whip_WHIPClient = /*#__PURE__*/function (_RTCPublisher) {
  red5pro_whip_inherits(WHIPClient, _RTCPublisher);
  var _super = red5pro_whip_createSuper(WHIPClient);
  /**
   * Constructor. Providing arguments will automatically kick of connection sequence.
   * Leaving arguments unset allows for more control and follows same pattern of init -> publish as RTCPublisher.
   * @param {string} url Optional endpoint for WHIP. Example: https://your-red5pro.com/live/whip/endpoint/stream1
   * @param {HTMLMediaElement} element Optional media element to play media in.
   * @param {boolean} trickleIce Optional request to trickle candidates. Preferred: false, send with SDP offer.
   */
  function WHIPClient(url, element) {
    var _this;
    var trickleIce = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    red5pro_whip_classCallCheck(this, WHIPClient);
    _this = _super.call(this);
    var optionsFromUrl = url ? optionsFromWhipWhepUrl(url) : red5pro_whip_defaultOptions;
    optionsFromUrl.mediaElementId = element ? element.id : red5pro_whip_defaultOptions.mediaElementId;
    optionsFromUrl.trickleIce = trickleIce;
    _this._whipHelper = undefined;
    if (url) {
      _this._internalConnect(optionsFromUrl);
    }
    return _this;
  }

  /**
   * Internal connection sequence if used constructor with arguments.
   *
   * @param {Object} options
   *        The initialization configuration map.
   *
   * @private
   */
  red5pro_whip_createClass(WHIPClient, [{
    key: "_internalConnect",
    value: function () {
      var _internalConnect2 = red5pro_whip_asyncToGenerator( /*#__PURE__*/red5pro_whip_regeneratorRuntime().mark(function _callee(options) {
        return red5pro_whip_regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.init(options);
            case 2:
              _context.next = 4;
              return this.publish();
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _internalConnect(_x) {
        return _internalConnect2.apply(this, arguments);
      }
      return _internalConnect;
    }()
    /**
     * Ensures gathering state complete for ICE.
     *
     * @param {RTCPeerConnection} connection
     * @returns Promise
     *
     * @private
     */
  }, {
    key: "waitToGatherIce",
    value: function () {
      var _waitToGatherIce = red5pro_whip_asyncToGenerator( /*#__PURE__*/red5pro_whip_regeneratorRuntime().mark(function _callee2(connection) {
        return red5pro_whip_regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              red5pro_whip_debug('[waittogatherice]');
              return _context2.abrupt("return", new Promise(function (resolve, reject) {
                if (connection.iceGatheringState === 'complete') {
                  red5pro_whip_debug('[waittogatherice] ice gathering state complete.');
                  connection.addIceCandidate(null).then(function () {
                    resolve(connection.localDescription);
                  })["catch"](function (e) {
                    red5pro_whip_warn('Error adding null candidate: ' + e.message || false);
                    resolve(connection.localDescription);
                  });
                } else {
                  red5pro_whip_debug('[waittogatherice] waiting...');
                  var t = setTimeout(function () {
                    clearTimeout(t);
                    connection.addIceCandidate(null).then(function () {
                      resolve(connection.localDescription);
                    })["catch"](function (e) {
                      red5pro_whip_warn('Error adding null candidate: ' + e.message || false);
                      resolve(connection.localDescription);
                    });
                  }, red5pro_whip_ICE_GATHER_TIMEOUT);
                  connection.onicegatheringstatechange = function () {
                    clearTimeout(t);
                    red5pro_whip_debug('[waittogatherice] ice gathering state complete.');
                    if (connection.iceGatheringState === 'complete') {
                      connection.addIceCandidate(null).then(function () {
                        resolve(connection.localDescription);
                      })["catch"](function (e) {
                        red5pro_whip_warn('Error adding null candidate: ' + e.message || false);
                        resolve(connection.localDescription);
                      });
                    }
                  };
                }
              }));
            case 2:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function waitToGatherIce(_x2) {
        return _waitToGatherIce.apply(this, arguments);
      }
      return waitToGatherIce;
    }()
    /**
     * POSTs SDP to WHEP endpoint.
     *
     * @param {RTCSessionDescription} sessionDescription
     * @param {boolean} withTrickle
     *
     * @returns { sdp, location }
     *
     * @private
     */
  }, {
    key: "_postOffer",
    value: function () {
      var _postOffer2 = red5pro_whip_asyncToGenerator(function (sessionDescription) {
        var _this2 = this;
        var withTrickle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return /*#__PURE__*/red5pro_whip_regeneratorRuntime().mark(function _callee3() {
          var sdp, _this2$_options, mungeOffer, streamMode, keyFramerate, connectionParams, forceVP8, cleanedSDP, params;
          return red5pro_whip_regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                sdp = sessionDescription.sdp;
                _this2$_options = _this2._options, mungeOffer = _this2$_options.mungeOffer, streamMode = _this2$_options.streamMode, keyFramerate = _this2$_options.keyFramerate, connectionParams = _this2$_options.connectionParams, forceVP8 = _this2$_options.forceVP8;
                cleanedSDP = sdp; // webrtc.cleanWhipSDP(sdp)
                if (mungeOffer) {
                  cleanedSDP = mungeOffer(cleanedSDP);
                }
                if (!withTrickle) {
                  cleanedSDP = removeTrickle(cleanedSDP);
                  cleanedSDP = injectEndOfCandidates(cleanedSDP);
                }
                params = red5pro_whip_objectSpread(red5pro_whip_objectSpread({}, connectionParams), {}, {
                  mode: streamMode,
                  keyFramerate: keyFramerate
                });
                if (forceVP8) {
                  params.videoEncoding = PublishVideoEncoder.VP8;
                }
                _context3.next = 10;
                return _this2._whipHelper.postSDPOffer(cleanedSDP, params);
              case 10:
                return _context3.abrupt("return", _context3.sent);
              case 13:
                _context3.prev = 13;
                _context3.t0 = _context3["catch"](0);
                red5pro_whip_error(_context3.t0.message || _context3.t0);
                if (_context3.t0 instanceof InvalidNameError) {
                  // It was most likely rejected because stream already exists...
                  _this2.onStreamAvailable(_context3.t0);
                } else {
                  if (_this2._publishFuture) {
                    _this2._publishFuture.reject(_context3.t0.message || _context3.t0);
                  } else {
                    _this2.trigger(new PublisherEvent(PublisherEventTypes.CONNECT_FAILURE, _this2, red5pro_whip_error));
                    _this2.unpublish();
                  }
                }
                throw _context3.t0;
              case 18:
              case "end":
                return _context3.stop();
            }
          }, _callee3, null, [[0, 13]]);
        })();
      });
      function _postOffer(_x3) {
        return _postOffer2.apply(this, arguments);
      }
      return _postOffer;
    }()
    /**
     * Sends Candidates as PATCH to WHEP endpoint.
     * @param {string} sdp The SDP with candidates
     * @returns Promise
     *
     * @private
     */
  }, {
    key: "_postCandidateFragments",
    value: function () {
      var _postCandidateFragments2 = red5pro_whip_asyncToGenerator( /*#__PURE__*/red5pro_whip_regeneratorRuntime().mark(function _callee4(sdp) {
        var frag;
        return red5pro_whip_regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              /**
               * Below splits the PATCH between host and srflx candidates.
               */
              /*
              const hostFrag = webrtc.generateSDPCandidateFrag(sdp, 'host')
              const srflxFrag = webrtc.generateSDPCandidateFrag(sdp, 'srflx', true)
              await this._whipHelper.trickle(hostFrag)
              return new Promise((resolve, reject) => {
                const postSrflx = () => {
                  setTimeout(async () => {
                    await this._whipHelper.trickle(srflxFrag)
                    resolve()
                  }, 150)
                }
                postSrflx()
              })
              */
              frag = generateSDPCandidateFrag(sdp, undefined, true);
              _context4.next = 3;
              return this._whipHelper.trickle(frag);
            case 3:
              return _context4.abrupt("return", _context4.sent);
            case 4:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function _postCandidateFragments(_x4) {
        return _postCandidateFragments2.apply(this, arguments);
      }
      return _postCandidateFragments;
    }()
    /**
     * Override request to send ICE candidate over the WebSocket. We're WHIPping.
     * This can happen several times in the ICE negotiation process.
     *
     * @param {Object} candidate
     *        The Candidate to send.
     * @param {string} streamName
     *        The associated unique stream name of the broadcast.
     *
     * @private
     */
  }, {
    key: "_sendCandidate",
    value: function _sendCandidate(candidate, streamName) {
      red5pro_whip_debug(JSON.stringify(candidate, null, 2));
    }

    /**
     * Request to initialize the WebRTC-based Publisher based on configuration.
     * The returned `Promise` will either resolve with a reference to this instance or reject with an error `String` in failure.
     *
     * @param {Object} options
     *        The initialization configuration map.
     * @return {Promise}
     */
  }, {
    key: "init",
    value: function () {
      var _init = red5pro_whip_asyncToGenerator( /*#__PURE__*/red5pro_whip_regeneratorRuntime().mark(function _callee5(options) {
        var _this$_options, protocol, host, port, app, streamName, enableChannelSignaling, proto;
        return red5pro_whip_regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              this._options = red5pro_whip_objectSpread(red5pro_whip_objectSpread({}, red5pro_whip_defaultOptions), options);
              _this$_options = this._options, protocol = _this$_options.protocol, host = _this$_options.host, port = _this$_options.port, app = _this$_options.app, streamName = _this$_options.streamName, enableChannelSignaling = _this$_options.enableChannelSignaling;
              proto = protocol === 'ws' ? 'http' : 'https';
              this._whipUrl = "".concat(proto, "://").concat(host, ":").concat(port, "/").concat(app, "/whip/endpoint/").concat(streamName);
              this._whipHelper = new whipwhep_signaling_helper(this._whipUrl, enableChannelSignaling);
              this._messageTransport = this._whipHelper;
              return _context5.abrupt("return", red5pro_whip_get(red5pro_whip_getPrototypeOf(WHIPClient.prototype), "init", this).call(this, options));
            case 7:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function init(_x5) {
        return _init.apply(this, arguments);
      }
      return init;
    }()
    /**
     * Request to initialize the WebRTC-based Publisher based on configuration and previously established MediaStream.
     * USE WITH CAUTION. It is assumed you know what you are doing in accessing a MediaStream outside of the API available from the SDK.
     * The returned `Promise` will either resolve with a reference to this instance or reject with an error `String` in failure.
     *
     * @param {Object} options
     *        The initialization configuration map.
     * @param {MediaStream} mediaStream
     *        A previously established MediaStream, most likely receieved through getUserMedia() outside of SDK use.
     *
     * @return {Promise}
     */
  }, {
    key: "initWithStream",
    value: function () {
      var _initWithStream = red5pro_whip_asyncToGenerator( /*#__PURE__*/red5pro_whip_regeneratorRuntime().mark(function _callee6(options, mediaStream) {
        var _this$_options2, protocol, host, port, app, streamName, enableChannelSignaling, proto;
        return red5pro_whip_regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              this._options = red5pro_whip_objectSpread(red5pro_whip_objectSpread({}, red5pro_whip_defaultOptions), options);
              _this$_options2 = this._options, protocol = _this$_options2.protocol, host = _this$_options2.host, port = _this$_options2.port, app = _this$_options2.app, streamName = _this$_options2.streamName, enableChannelSignaling = _this$_options2.enableChannelSignaling;
              proto = protocol === 'ws' ? 'http' : 'https';
              this._whipUrl = "".concat(proto, "://").concat(host, ":").concat(port, "/").concat(app, "/whip/endpoint/").concat(streamName);
              this._whipHelper = new whipwhep_signaling_helper(this._whipUrl, enableChannelSignaling);
              this._messageTransport = this._whipHelper;
              return _context6.abrupt("return", red5pro_whip_get(red5pro_whip_getPrototypeOf(WHIPClient.prototype), "initWithStream", this).call(this, options, mediaStream));
            case 7:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function initWithStream(_x6, _x7) {
        return _initWithStream.apply(this, arguments);
      }
      return initWithStream;
    }()
    /**
     * Request to begin a broadcast session after initialization has occured.
     *
     * @param {String} streamName
     *        Optional stream name to broadcast on, otherwise defaulting to the `streamName` provided in `init()` configuration.
     * @param {Promise} promise
     *        Optional `Promise` object to resolve/reject on based on sequence of events in establishing a broadcast, otherwise defaulting to `Promise` created internally and returned.
     * @return {Promise}
     *        The returned `Promise` will resolve or reject on successful start of a broadcast.<br>
     *        There are several processes that occur in order to establish a WebRTC broadcast that involve - but are not limited to - ICE communication and assigning of local and remote SDPs on peer connections.
     */
  }, {
    key: "publish",
    value: function () {
      var _publish = red5pro_whip_asyncToGenerator(function () {
        var _this3 = this;
        var streamName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var promise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        return /*#__PURE__*/red5pro_whip_regeneratorRuntime().mark(function _callee7() {
          var _this3$_options, bandwidth, forceVP8, rtcConfiguration, enableChannelSignaling, dataChannelConfiguration, trickleIce, mungeAnswer, connectionParams, dataChannelAllowed, params, transcode, _yield$_this3$_whipHe, links, dcConfig, connection, mediaStream, offer, _yield$_this3$_postOf, sdp, cleanedSDP, localDescription, _sdp;
          return red5pro_whip_regeneratorRuntime().wrap(function _callee7$(_context7) {
            while (1) switch (_context7.prev = _context7.next) {
              case 0:
                _this3$_options = _this3._options, bandwidth = _this3$_options.bandwidth, forceVP8 = _this3$_options.forceVP8, rtcConfiguration = _this3$_options.rtcConfiguration, enableChannelSignaling = _this3$_options.enableChannelSignaling, dataChannelConfiguration = _this3$_options.dataChannelConfiguration, trickleIce = _this3$_options.trickleIce, mungeAnswer = _this3$_options.mungeAnswer, connectionParams = _this3$_options.connectionParams; // Set default data channel configuration if not defined and severing socket on signal end.
                // TODO: Set this as more "private" with `red5pro-<streamname>`
                dataChannelAllowed = enableChannelSignaling && webrtc_supportsDataChannel();
                if (dataChannelAllowed && !dataChannelConfiguration) {
                  dataChannelConfiguration = {
                    name: "red5pro"
                  };
                  _this3._options.dataChannelConfiguration = dataChannelConfiguration;
                }
                _this3._options.enableChannelSignaling = dataChannelAllowed;

                // Note: In regular WebRTC Subscriber, the signalingSocketOnly property refers to using a WebSocket
                //       for signaling and connection setup only. After connection established, it switches to using
                //       a DataChannel for communication. Here was are saying that if there is DataChannel support in the browser,
                //       and we have set enableChannelSignaling to true, then we will offer and open the DataChannel.
                _this3._options.signalingSocketOnly = _this3._options.enableChannelSignaling;
                _context7.prev = 5;
                params = {};
                if (streamName) {
                  _this3._options.streamName = streamName;
                }
                if (connectionParams) {
                  transcode = connectionParams.transcode;
                  if (transcode) {
                    params.transcode = transcode;
                  }
                }
                _context7.next = 11;
                return _this3._whipHelper.getOptions(params);
              case 11:
                _yield$_this3$_whipHe = _context7.sent;
                links = _yield$_this3$_whipHe.links;
                if (links) {
                  _this3._options.iceServers = links;
                }
                dcConfig = _this3._options.enableChannelSignaling ? dataChannelConfiguration : undefined;
                _context7.next = 17;
                return _this3._createPeerConnection(rtcConfiguration, dcConfig, _this3._options.iceServers);
              case 17:
                connection = _context7.sent;
                _this3.trigger(new PublisherEvent(RTCPublisherEventTypes.PEER_CONNECTION_AVAILABLE, _this3, connection));
                _context7.next = 21;
                return _this3._getMediaStream();
              case 21:
                mediaStream = _context7.sent;
                // WHIP
                mediaStream.getTracks().forEach(function (track) {
                  var transceiver = connection.addTransceiver(track, {
                    direction: 'sendonly'
                  });
                  if (transceiver && track.kind === 'video' && forceVP8) {
                    try {
                      var _RTCRtpSender$getCapa = RTCRtpSender.getCapabilities('video'),
                        codecs = _RTCRtpSender$getCapa.codecs;
                      var selectedCodecIndex = codecs.findIndex(function (c) {
                        return c.mimeType === 'video/VP8';
                      });
                      if (selectedCodecIndex > -1) {
                        var selectedCodec = codecs[selectedCodecIndex];
                        codecs.splice(selectedCodecIndex, 1);
                        codecs.unshift(selectedCodec);
                        transceiver.setCodecPreferences(codecs);
                      }
                    } catch (e) {
                      red5pro_whip_debug("[forceVP8] Could not set codec preferences. ".concat(e.message || e));
                    }
                  }
                });
                // WAS
                // mediaStream.getTracks().forEach((track) => {
                //   connection.addTrack(track, this._mediaStream)
                // })
                _context7.next = 25;
                return _this3._peerHelper.createOfferWithoutSetLocal(bandwidth, forceVP8);
              case 25:
                offer = _context7.sent;
                _context7.next = 28;
                return _this3._peerHelper.setLocalDescription(offer);
              case 28:
                if (trickleIce) {
                  _context7.next = 32;
                  break;
                }
                _context7.next = 31;
                return _this3.waitToGatherIce(connection);
              case 31:
                offer = _context7.sent;
              case 32:
                _this3.trigger(new PublisherEvent(RTCPublisherEventTypes.OFFER_START, _this3, offer));
                _context7.next = 35;
                return _this3._postOffer(offer, trickleIce);
              case 35:
                _yield$_this3$_postOf = _context7.sent;
                sdp = _yield$_this3$_postOf.sdp;
                cleanedSDP = mungeAnswer ? mungeAnswer(sdp) : sdp;
                console.log('ANSWER SDP: ', sdp);
                console.log('ANSWER CLEANED', cleanedSDP);
                _context7.next = 42;
                return _this3._setRemoteDescription({
                  type: 'answer',
                  sdp: stripExtMaps(cleanedSDP)
                });
              case 42:
                _this3.trigger(new PublisherEvent(RTCPublisherEventTypes.OFFER_END, _this3, cleanedSDP));
                if (!trickleIce) {
                  _context7.next = 50;
                  break;
                }
                _context7.next = 46;
                return _this3.waitToGatherIce(connection);
              case 46:
                localDescription = _context7.sent;
                _sdp = localDescription.sdp;
                _context7.next = 50;
                return _this3._postCandidateFragments(_sdp);
              case 50:
                _this3.trigger(new PublisherEvent(RTCPublisherEventTypes.ICE_TRICKLE_COMPLETE, _this3));
                browser.addOrientationChangeHandler(_this3._onOrientationChange);
                // If we are not using channel signaling, then we are done here.
                if (!_this3._options.enableChannelSignaling) {
                  _this3.trigger(new PublisherEvent(PublisherEventTypes.PUBLISH_START, _this3));
                }
                if (promise) {
                  promise.resolve(_this3);
                }
                return _context7.abrupt("return", _this3);
              case 57:
                _context7.prev = 57;
                _context7.t0 = _context7["catch"](5);
                red5pro_whip_error(_context7.t0);
                browser.removeOrientationChangeHandler(_this3._onOrientationChange);
                _this3.trigger(new PublisherEvent(PublisherEventTypes.CONNECT_FAILURE, _this3, _context7.t0));
                if (promise) {
                  promise.reject(_context7.t0);
                }
                throw _context7.t0;
              case 64:
              case "end":
                return _context7.stop();
            }
          }, _callee7, null, [[5, 57]]);
        })();
      });
      function publish() {
        return _publish.apply(this, arguments);
      }
      return publish;
    }()
    /**
     * Request to stop a broadcast.
     * The returned `Promise` will either resolve or reject on successful stop of broadcast.
     *
     * @param {Boolean} andRemove
     *        Flag to additionally remove the preview.
     *
     * @return {Promise}
     */
  }, {
    key: "unpublish",
    value: function () {
      var _unpublish = red5pro_whip_asyncToGenerator(function () {
        var _this4 = this;
        var andRemove = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        return /*#__PURE__*/red5pro_whip_regeneratorRuntime().mark(function _callee8() {
          return red5pro_whip_regeneratorRuntime().wrap(function _callee8$(_context8) {
            while (1) switch (_context8.prev = _context8.next) {
              case 0:
                red5pro_whip_debug('[unpublish:teardown]');
                if (_this4._whipHelper) {
                  _this4._whipHelper.tearDown();
                }
                if (_this4._peerHelper) {
                  _this4._peerHelper.tearDown();
                }
                _this4._whipHelper = undefined;
                _this4._peerHelper = undefined;
                _this4._messageTransport = undefined;
                if (_this4._options.clearMediaOnUnpublish || andRemove) {
                  _this4.unpreview();
                }
                _this4.trigger(new PublisherEvent(PublisherEventTypes.UNPUBLISH_SUCCESS, _this4));
                browser.removeOrientationChangeHandler(_this4._onOrientationChange);
                return _context8.abrupt("return", _this4);
              case 10:
              case "end":
                return _context8.stop();
            }
          }, _callee8);
        })();
      });
      function unpublish() {
        return _unpublish.apply(this, arguments);
      }
      return unpublish;
    }()
    /**
     * Event handler for open notification on optional data channel.
     *
     * @param {RTCDataChannel} dataChannel
     *
     * @private
     */
  }, {
    key: "onDataChannelOpen",
    value: function onDataChannelOpen(dataChannel) {
      var dataChannelConfiguration = this._options.dataChannelConfiguration;
      red5pro_whip_get(red5pro_whip_getPrototypeOf(WHIPClient.prototype), "onDataChannelOpen", this).call(this, dataChannel);
      if (dataChannelConfiguration) {
        var name = dataChannelConfiguration.name;
        red5pro_whip_get(red5pro_whip_getPrototypeOf(WHIPClient.prototype), "onDataChannelAvailable", this).call(this, name);
      } else {
        red5pro_whip_get(red5pro_whip_getPrototypeOf(WHIPClient.prototype), "onDataChannelAvailable", this).call(this);
      }
      this.trigger(new PublisherEvent(PublisherEventTypes.PUBLISH_START, this));
    }

    /**
     * Returns the current WebSocket connection helper if established. Due to using WHIP, this does not exist.
     *
     * @return {PublisherSocketHelper}
     *
     * @private
     */
  }, {
    key: "getConnection",
    value: function getConnection() {
      return undefined;
    }
  }]);
  return WHIPClient;
}(publisher_red5pro_rtc);
/* harmony default export */ var red5pro_whip = (red5pro_whip_WHIPClient);
// CONCATENATED MODULE: ./src/js/publisher/index.js


function publisher_typeof(obj) { "@babel/helpers - typeof"; return publisher_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, publisher_typeof(obj); }
function publisher_toConsumableArray(arr) { return publisher_arrayWithoutHoles(arr) || publisher_iterableToArray(arr) || publisher_unsupportedIterableToArray(arr) || publisher_nonIterableSpread(); }
function publisher_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function publisher_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return publisher_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return publisher_arrayLikeToArray(o, minLen); }
function publisher_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function publisher_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return publisher_arrayLikeToArray(arr); }
function publisher_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function publisher_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function publisher_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, publisher_toPropertyKey(descriptor.key), descriptor); } }
function publisher_createClass(Constructor, protoProps, staticProps) { if (protoProps) publisher_defineProperties(Constructor.prototype, protoProps); if (staticProps) publisher_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function publisher_toPropertyKey(arg) { var key = publisher_toPrimitive(arg, "string"); return publisher_typeof(key) === "symbol" ? key : String(key); }
function publisher_toPrimitive(input, hint) { if (publisher_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (publisher_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function publisher_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) publisher_setPrototypeOf(subClass, superClass); }
function publisher_setPrototypeOf(o, p) { publisher_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return publisher_setPrototypeOf(o, p); }
function publisher_createSuper(Derived) { var hasNativeReflectConstruct = publisher_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = publisher_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = publisher_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return publisher_possibleConstructorReturn(this, result); }; }
function publisher_possibleConstructorReturn(self, call) { if (call && (publisher_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return publisher_assertThisInitialized(self); }
function publisher_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function publisher_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function publisher_getPrototypeOf(o) { publisher_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return publisher_getPrototypeOf(o); }








var publisher_NAME = 'Red5ProPublisher';
var publishFactory = new impl_factory_order();
var publisherImpl = function () {
  var map = new Map();
  map.set(PublishTypes.RTC, publisher_red5pro_rtc);
  map.set(PublishTypes.RTMP, publisher_red5pro_rtmp);
  return map;
}();

/**
 * Main entry for failover support of all publisher implementations.
 *
 * @extends EventEmitter
 */
var publisher_Red5ProPublisher = /*#__PURE__*/function (_EventEmitter) {
  publisher_inherits(Red5ProPublisher, _EventEmitter);
  var _super = publisher_createSuper(Red5ProPublisher);
  function Red5ProPublisher() {
    var _this;
    publisher_classCallCheck(this, Red5ProPublisher);
    _this = _super.call(this);
    _this._options = undefined;
    _this._order = [PublishTypes.RTC, PublishTypes.RTMP];
    return _this;
  }

  /**
   * Utilizes Failover Publisher Factory to attempt in determining browser support for Publisher from defined order.
   *
   * @return {Promise}
   *
   * @private
   */
  publisher_createClass(Red5ProPublisher, [{
    key: "_getPublisherFromOrder",
    value: function _getPublisherFromOrder(order, options) {
      return publishFactory.create(order, publisherImpl, options, 'init');
    }

    /**
     * Returns the specified order for auto-failover.
     *
     *  @return {Array}
     *          Default: `['rtc', 'rtmp']`.
     */
  }, {
    key: "getPublishOrder",
    value: function getPublishOrder() {
      return this._order;
    }

    /**
     * Defines the desired auto-failover order.
     *
     *  @param {Array} order
     *          The desired order. e.g, `['rtc', 'rtmp']`.
     *
     *  @return {Red5ProPublisher}
     *          This instance.
     */
  }, {
    key: "setPublishOrder",
    value: function setPublishOrder(order) {
      // Allow for string value to define single item in order.
      order = typeof order === 'string' ? [order] : order;

      // Filter out values not available in enumeration of playback types.
      var t = order.filter(function (entry) {
        var key;
        for (key in PublishTypes) {
          if (PublishTypes[key].toLowerCase() === entry.toLowerCase()) {
            return true;
          }
        }
        return false;
      }).map(function (entry) {
        return entry.toLowerCase();
      });

      // Define new order.
      this._order = publisher_toConsumableArray(new Set(t));
      log_debug(publisher_NAME, "[orderupdate]: ".concat(this._order));
      return this;
    }

    /**
     * Request to initialize and determine the proper Publisher implementation based on configuration.
     * The returned `Promise` will either resolve with the determined Publisher instance or reject with an error String in failure to determine Publisher type.
     *
     *  @param {Object} options
     *          The initialization configuration map for each desired failover tech.
     *  @return {Promise}
     */
  }, {
    key: "init",
    value: function init(options) {
      var deferred = new DeferredPromise();
      log_debug(publisher_NAME, '[publish]');
      this._options = options;
      this._getPublisherFromOrder(this._order, this._options).then(function (publisher) {
        deferred.resolve(publisher);
      })["catch"](function (err) {
        log_warn(publisher_NAME, "[publisherror]: Could not implement a publisher: ".concat(err));
        deferred.reject(err);
      });
      return deferred.promise;
    }

    /**
     * Return enumerated value Publisher types used in failover order.
     * @type {Object}
     */
  }, {
    key: "publishTypes",
    get: function get() {
      return PublishTypes;
    }
  }]);
  return Red5ProPublisher;
}(event_emitter);

// CONCATENATED MODULE: ./src/js/sharedobject/sharedobject.js
function sharedobject_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) sharedobject_setPrototypeOf(subClass, superClass); }
function sharedobject_setPrototypeOf(o, p) { sharedobject_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return sharedobject_setPrototypeOf(o, p); }
function sharedobject_createSuper(Derived) { var hasNativeReflectConstruct = sharedobject_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = sharedobject_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = sharedobject_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return sharedobject_possibleConstructorReturn(this, result); }; }
function sharedobject_possibleConstructorReturn(self, call) { if (call && (sharedobject_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return sharedobject_assertThisInitialized(self); }
function sharedobject_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function sharedobject_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function sharedobject_getPrototypeOf(o) { sharedobject_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return sharedobject_getPrototypeOf(o); }
function sharedobject_typeof(obj) { "@babel/helpers - typeof"; return sharedobject_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, sharedobject_typeof(obj); }
function sharedobject_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function sharedobject_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, sharedobject_toPropertyKey(descriptor.key), descriptor); } }
function sharedobject_createClass(Constructor, protoProps, staticProps) { if (protoProps) sharedobject_defineProperties(Constructor.prototype, protoProps); if (staticProps) sharedobject_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function sharedobject_toPropertyKey(arg) { var key = sharedobject_toPrimitive(arg, "string"); return sharedobject_typeof(key) === "symbol" ? key : String(key); }
function sharedobject_toPrimitive(input, hint) { if (sharedobject_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (sharedobject_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }






var sharedobject_NAME = 'Red5ProSharedObject';
var SO_SUBTYPE_PROPERTY = 4;
var SO_SUBTYPE_METHOD = 6;
var SO_SUBTYPE_REMOVE = 9;
var sharedobject_debug = function debug(soName, message) {
  log_debug([sharedobject_NAME, soName].join(':'), message);
};
var sharedobject_warn = function warn(soName, message) {
  log_warn([sharedobject_NAME, soName].join(':'), message);
};
var sharedobject_error = function error(soName, message) {
  log_error([sharedobject_NAME, soName].join(':'), message);
};
var decodeMessageIfJSONString = function decodeMessageIfJSONString(message) {
  return typeof message === 'string' ? JSON.parse(message) : message;
};

/**
 * Defines the structure of a Property Data notification object.
 *
 * @private
 */
var PropertyData = /*#__PURE__*/function () {
  function PropertyData(key, value) {
    sharedobject_classCallCheck(this, PropertyData);
    this.key = key;
    this.value = value;
  }
  sharedobject_createClass(PropertyData, [{
    key: "toObject",
    value: function toObject() {
      var obj = {};
      obj[this.key] = this.value;
      return obj;
    }
  }]);
  return PropertyData;
}();
/**
 * Defines the structure of a Method Data notification object.
 *
 * @private
 */
var MethodData = /*#__PURE__*/function () {
  function MethodData(methodName, message) {
    sharedobject_classCallCheck(this, MethodData);
    this.methodName = methodName;
    var messageList;
    if (Object.prototype.toString.call(message) === '[object Array]') {
      var i;
      var msg;
      var length = message.length;
      messageList = [];
      for (i = 0; i < length; i++) {
        msg = decodeMessageIfJSONString(message[i]);
        if (Object.prototype.toString.call(message) === '[object Array]') {
          messageList = messageList.concat(msg);
        } else {
          messageList.push(msg);
        }
      }
    } else {
      messageList = [decodeMessageIfJSONString(message)];
    }
    this.message = messageList.length === 1 ? messageList[0] : messageList;
  }
  sharedobject_createClass(MethodData, [{
    key: "toObject",
    value: function toObject() {
      return {
        methodName: this.methodName,
        message: this.message
      };
    }
  }]);
  return MethodData;
}();
/**
 * Main entry for Shared Object associated with Publishers and Subscribers.
 *
 * @extends EventEmitter
 */
var sharedobject_Red5ProSharedObject = /*#__PURE__*/function (_EventEmitter) {
  sharedobject_inherits(Red5ProSharedObject, _EventEmitter);
  var _super = sharedobject_createSuper(Red5ProSharedObject);
  /**
   * The API on this object is limited as it communicates along with message channel connection which you provide in the constuctor. This connection can either be a previously established Publisher, Subscriber or Red5ProSharedObjectSocket.
   *
   * Event handlers should be assigned to new `Red5ProSharedObject` instances in order to handle notifications over the communication channel.
   *
   * @param {String} name
   *        The name of the Shared Object to connect to.
   * @param {Object} connection
   *        The connection delegate to send and receive Shared Object notifications on.
   *        This will either be a previously established Publisher or Subscriber instance.
   */
  function Red5ProSharedObject(name, connection) {
    var _this;
    sharedobject_classCallCheck(this, Red5ProSharedObject);
    _this = _super.call(this);
    _this._name = name;
    _this._transport = undefined;
    _this._transportController = undefined;
    _this._onclose = _this.close.bind(sharedobject_assertThisInitialized(_this));
    _this._handleTransportStateEvents = _this._handleTransportStateEvents.bind(sharedobject_assertThisInitialized(_this));
    _this._handleMessageTransportChange = _this._handleMessageTransportChange.bind(sharedobject_assertThisInitialized(_this));
    _this.setMessageTransportController(connection);
    return _this;
  }

  /**
   * Established communication and connection to Shared Object through message transport layer.
   *
   * @param {Object} transport
   *        The Message Transport instance.
   *
   * @private
   */
  sharedobject_createClass(Red5ProSharedObject, [{
    key: "_establishTransport",
    value: function _establishTransport(transport) {
      transport.addSharedObjectResponseHandler(this);
      try {
        sharedobject_debug(this._name, '[sharedobject:connect:attempt]');
        // Immediately invoke request on shared object through the `getMessageTransport()`
        //  instance of a Publisher or Subscriber (whomever invoked this constructor).
        transport.on('*', this._handleSocketStateEvents);
        transport.getRemoteSharedObject(this._name);
        browser.addCloseHandler(this._onclose, 0);
      } catch (e) {
        sharedobject_error(this._name, '[sharedobject:connect:error]: ' + e.message);
        this._transport = undefined;
        this._transportController = undefined;
      }
    }

    /**
     * Event listener for transport change on target Message Transport Controller instance.
     *
     * @private
     */
  }, {
    key: "_handleMessageTransportChange",
    value: function _handleMessageTransportChange(event) {
      var _this2 = this;
      var controller = event.data.controller;
      var t = setTimeout(function () {
        clearTimeout(t);
        _this2.setMessageTransportController(controller);
      }, 1000);
    }

    /**
     * General state event handler from underlying socket connection.
     *
     * @private
     */
  }, {
    key: "_handleTransportStateEvents",
    value: function _handleTransportStateEvents(event) {
      sharedobject_debug(this._name, "".concat(event.name, ": ").concat(event.type));
      if (event.type === MessageTransportStateEventTypes.CLOSE) {
        this.trigger(new SharedObjectEvent(SharedObjectEventTypes.CONNECTION_CLOSED, this._name));
        this.close();
      }
    }

    /**
     * Attempt to parse message into a Object.
     *
     * @param {Object} message
     *        Either a JSON string or object.
     *
     * @private
     */
  }, {
    key: "_getJsonFromSocketMessage",
    value: function _getJsonFromSocketMessage(message) {
      try {
        return typeof message.data === 'string' ? JSON.parse(message.data) : message.data;
      } catch (e) {
        sharedobject_warn(this._name, 'Could not parse message as JSON. Message= ' + message.data + '. Error= ' + e.message);
      }
      return null;
    }

    /**
     * Dispatch of PROPERTY_UPDATE with information.
     *
     * @param {Object} valueObject
     *        Optional value object to send in notification.
     *
     * @private
     */
  }, {
    key: "_notifyOfPropertyValues",
    value: function _notifyOfPropertyValues(valueObject) {
      if (Object.keys(valueObject).length === 0) {
        this.trigger(new SharedObjectEvent(SharedObjectEventTypes.PROPERTY_UPDATE, this._name, {}));
      } else {
        var key;
        for (key in valueObject) {
          this.trigger(new SharedObjectEvent(SharedObjectEventTypes.PROPERTY_UPDATE, this._name, new PropertyData(key, valueObject[key]).toObject()));
        }
      }
    }

    /**
     * Dispatch of PROPERTY_UPDATE or METHOD_UPDATE based on event(s).
     *
     * @param {Array} events
     *        A list of events to iterate through and dispatch notifications from.
     *
     * @private
     */
  }, {
    key: "_notifyOfEvents",
    value: function _notifyOfEvents(events) {
      var i, event;
      var handled = false;
      var length = events.length;
      for (i = 0; i < length; i++) {
        event = events[i];
        switch (event.subtype) {
          case SO_SUBTYPE_REMOVE:
            this.trigger(new SharedObjectEvent(SharedObjectEventTypes.PROPERTY_REMOVE, this._name, {
              attribute: event.attribute
            }));
            handled = true;
            break;
          case SO_SUBTYPE_PROPERTY:
            if (event.attributes) {
              // We have an initial payload of attribute values.
              this._notifyOfPropertyValues(event.attributes);
            } else {
              this.trigger(new SharedObjectEvent(SharedObjectEventTypes.PROPERTY_UPDATE, this._name, new PropertyData(event.attribute, event.value).toObject()));
            }
            handled = true;
            break;
          case SO_SUBTYPE_METHOD:
            this.trigger(new SharedObjectEvent(SharedObjectEventTypes.METHOD_UPDATE, this._name, new MethodData(event.method, event.value).toObject()));
            handled = true;
            break;
        }
      }
      return handled;
    }

    /**
     * Invoked by connection channel to handle message and dispatch appropriate notifications.
     *
     * @private
     */
  }, {
    key: "respond",
    value: function respond(message) {
      if (message.data) {
        var json = this._getJsonFromSocketMessage(message);
        if (json === null) {
          sharedobject_warn(this._name, 'Determined message response not in correct format. Aborting message handle.');
          return true;
        }
        if (json.data !== undefined) {
          if (json.data.name === this._name) {
            sharedobject_debug(this._name, '[sharedobject-response]: ' + JSON.stringify(json, null, 2));
            if (json.data.status === 'SharedObject.Status.GetRemote' && json.data.message === 'Success') {
              this._transport.connectToSharedObject(this._name);
              return true;
            } else if (json.data.status === 'SharedObject.Status.GetRemote' && json.data.message === 'Fail') {
              this.trigger(new SharedObjectEvent(SharedObjectEventTypes.CONNECT_FAILURE, this._name));
              return true;
            } else if (json.data.status === 'SharedObject.Status.Connect' && json.data.message === 'Success') {
              this.trigger(new SharedObjectEvent(SharedObjectEventTypes.CONNECT_SUCCESS, this._name));
              return true;
            } else if (json.data.status === 'SharedObject.Status.Connect' && json.data.message === 'Fail') {
              this.trigger(new SharedObjectEvent(SharedObjectEventTypes.CONNECT_FAILURE, this._name));
              return true;
            } else if (json.data.status === 'SharedObject.Status.Disconnect') {
              this.trigger(new SharedObjectEvent(SharedObjectEventTypes.CONNECTION_CLOSED, this._name));
              return true;
            } else if (json.data.type === 'sharedobject') {
              if (json.data.hasOwnProperty('events')) {
                return this._notifyOfEvents(json.data.events);
              } else if (json.data.hasOwnProperty('value')) {
                return this._notifyOfPropertyValues(json.data.value);
              }
            }
          } else {
            sharedobject_debug(this._name, 'Unhandled Message exchange: ' + JSON.stringify(json, null, 2));
          }
        }
      }
      return false;
    }

    /**
     * Request to send notification to other connected clients using a target method name and object data.
     *
     * @param {String} methodName
     *        The name of the method to attempt to invoke on receiving clients.
     * @param {Object} data
     *        A data object to send along as the parameter of the target method.
     */
  }, {
    key: "send",
    value: function send(methodName, data) {
      var transport = this._transport;
      if (transport) {
        transport.sendToSharedObject(this._name, methodName, data);
      } else {
        sharedobject_warn(this._name, 'No WebSocket connection available!');
      }
    }

    /**
     * Request to update a specific property on the connected Shared Object.
     *
     * @param {String} key
     *        The property name to update.
     * @param {Object} value
     *        The value object to update the property to.
     */
  }, {
    key: "setProperty",
    value: function setProperty(key, value) {
      this._transport.sendPropertyToSharedObject(this._name, key, value);
    }

    /**
     * Request to close the established Shared Object connection. This does not close the underlying WebSocket connection.
     */
  }, {
    key: "close",
    value: function close() {
      var transport = this._transport;
      if (transport) {
        try {
          transport.closeSharedObject(this._name);
        } catch (e) {
          // nada.
        }
        transport.removeSharedObjectResponseHandler(this);
        transport.off('*', this._handleTransportStateEvents);
      }
      this._transport = undefined;
      this._transportController = undefined;
      browser.removeCloseHandler(this._onclose);
    }

    /**
     * Returns the Message Transport Controller instance
     *
     * @see #setMessageTransportController
     */
  }, {
    key: "getMessageTransportController",
    value: function getMessageTransportController() {
      return this._transportController;
    }

    /**
     * Assigns the Message Transport Controller which exposes the message transport layer on which all communication to and from the Shared Object is handled.
     *
     * @param {Object} controller
     *        The Controller for the Message Transport Layer. Exposes the method `getMessageTransport` which returns the current message transport layer.
     *
     */
  }, {
    key: "setMessageTransportController",
    value: function setMessageTransportController(controller) {
      if (this._transport) {
        this._transport.removeSharedObjectResponseHandler(this);
        this._transport.off('*', this._handleTransportStateEvents);
        browser.removeCloseHandler(this._onclose);
        this._transport = undefined;
        this._transportController = undefined;
      }
      this._transportController = controller;
      this._transport = this._transportController.getMessageTransport();
      if (this._transportController && this._transport) {
        this._transportController.on(MessageTransportStateEventTypes.CHANGE, this._handleMessageTransportChange);
        this._establishTransport(this._transport);
      }
    }

    /**
     * Return the name of the Shared Object connected to.
     *
     * @return {String}
     */
  }, {
    key: "getName",
    value: function getName() {
      return this._name;
    }
  }]);
  return Red5ProSharedObject;
}(event_emitter);
/* harmony default export */ var sharedobject = (sharedobject_Red5ProSharedObject);
// CONCATENATED MODULE: ./src/js/sharedobject/socket.js
function socket_typeof(obj) { "@babel/helpers - typeof"; return socket_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, socket_typeof(obj); }
function socket_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function socket_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, socket_toPropertyKey(descriptor.key), descriptor); } }
function socket_createClass(Constructor, protoProps, staticProps) { if (protoProps) socket_defineProperties(Constructor.prototype, protoProps); if (staticProps) socket_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function socket_toPropertyKey(arg) { var key = socket_toPrimitive(arg, "string"); return socket_typeof(key) === "symbol" ? key : String(key); }
function socket_toPrimitive(input, hint) { if (socket_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (socket_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function socket_get() { if (typeof Reflect !== "undefined" && Reflect.get) { socket_get = Reflect.get.bind(); } else { socket_get = function _get(target, property, receiver) { var base = socket_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return socket_get.apply(this, arguments); }
function socket_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = socket_getPrototypeOf(object); if (object === null) break; } return object; }
function socket_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) socket_setPrototypeOf(subClass, superClass); }
function socket_setPrototypeOf(o, p) { socket_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return socket_setPrototypeOf(o, p); }
function socket_createSuper(Derived) { var hasNativeReflectConstruct = socket_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = socket_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = socket_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return socket_possibleConstructorReturn(this, result); }; }
function socket_possibleConstructorReturn(self, call) { if (call && (socket_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return socket_assertThisInitialized(self); }
function socket_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function socket_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function socket_getPrototypeOf(o) { socket_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return socket_getPrototypeOf(o); }



// import { info, debug, warn } from '../log'

/**
 * A bare-bones Proxy for WebSocket connection to be used by Red5ProSharedObjects.
 */
var socket_Red5ProSharedObjectSocket = /*#__PURE__*/function (_SocketHelper) {
  socket_inherits(Red5ProSharedObjectSocket, _SocketHelper);
  var _super = socket_createSuper(Red5ProSharedObjectSocket);
  function Red5ProSharedObjectSocket() {
    var _this;
    var responder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
    socket_classCallCheck(this, Red5ProSharedObjectSocket);
    var uuid = Math.floor(Math.random() * 0x10000).toString(16);
    var name = "sharedobject-".concat(uuid);
    _this = _super.call(this, responder, name);
    _this.id = name;
    _this._sharedObjectName = undefined;
    return _this;
  }

  /**
   * Hijacking this to track SharedObject name for event notification.
   *
   * @private
   */
  socket_createClass(Red5ProSharedObjectSocket, [{
    key: "getRemoteSharedObject",
    value: function getRemoteSharedObject(name) {
      socket_get(socket_getPrototypeOf(Red5ProSharedObjectSocket.prototype), "getRemoteSharedObject", this).call(this, name);
      this._sharedObjectName = name;
    }

    /**
     * Initialize the WebSocket connection based on configuration properties.
     *
     * @param {Object} configuration
     *                  Configuration object used in construction WebSocket endpoint URL based on properties.
     * @param {String} id
     *                  Optional identifier for the shared object connection instance. Needs to be unique. Autogenerated if left undefined.
     * @param {Integer} capability
     *                  Optional capability enum for connection. 2 = Shared Object + WebSocket. 4 = Shared Object + RTC.
     * @return {Promise}
     */
  }, {
    key: "init",
    value: function init(configuration) {
      var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var capability = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;
      var socketPromise = new DeferredPromise();
      this.id = id || this.id;
      this._name = this.id;
      // capabilities is the int to notify that there is no associated rtc connection.
      var url = rtcSocketEndpointFromOptions(configuration, {
        id: this.id,
        capabilities: capability
      });
      this.setUp(url, socketPromise);
      return socketPromise.promise;
    }

    /**
     * Responds to messages coming over the WebSocket connection.
     *
     * @param {Object} message
     *
     * @private
     */
  }, {
    key: "respond",
    value: function respond(message) {
      // eslint-disable-line no-unused-vars
      if (!socket_get(socket_getPrototypeOf(Red5ProSharedObjectSocket.prototype), "respond", this).call(this, message)) {
        if (message.data) {
          var json = this.getJsonFromSocketMessage(message);
          if (json && json.data) {
            var data = json.data;
            if (data.type === 'status') {
              if (data.code === 'NetConnection.Connect.Closed') {
                // Trick into responding to disconnect through SharedObject responder.
                this.respond({
                  data: {
                    data: {
                      status: 'SharedObject.Status.Disconnect',
                      message: data.code,
                      name: this._sharedObjectName
                    }
                  }
                });
                this._sharedObjectName = undefined;
              } else if (data.code === 'NetConnection.ICE.TrickleCompleted' && this._responder) {
                this._responder.onIceTrickleComplete();
              } else if (data.code === 'NetConnection.DataChannel.Available' && this._responder) {
                this._responder.onDataChannelAvailable(data.description);
              } else if (this._responder) {
                this._responder.onSocketStatus(data);
              }
            } else if (data.sdp) {
              var sdp = data.sdp;
              if (sdp.type === 'answer' && this._responder) {
                this._responder.onSDPAnswer(sdp);
              }
            } else if (data.candidate && this._responder) {
              var candidate = data.candidate;
              this._responder.onAddIceCandidate(candidate);
            }
          }
        }
      }
    }

    /**
     * Request to close down the WebSocket connection.
     */
  }, {
    key: "close",
    value: function close() {
      this._sharedObjectName = undefined;
      this.tearDown();
    }

    /**
     * Returns reference to this instance. This is used internally to access the underlying communication channel by the SharedObject implementation.
     *
     * @private
     */
  }, {
    key: "getMessageTransport",
    value: function getMessageTransport() {
      return this;
    }

    /**
     * Returns reference to this instance. This is used internally to access the underlying communication channel by the SharedObject implementation.
     *
     * @private
     */
  }, {
    key: "getConnection",
    value: function getConnection() {
      return this;
    }
  }]);
  return Red5ProSharedObjectSocket;
}(socket_helper);
/* harmony default export */ var sharedobject_socket = (socket_Red5ProSharedObjectSocket);
// CONCATENATED MODULE: ./src/js/sharedobject/peer.js
function peer_typeof(obj) { "@babel/helpers - typeof"; return peer_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, peer_typeof(obj); }
function peer_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function peer_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, peer_toPropertyKey(descriptor.key), descriptor); } }
function peer_createClass(Constructor, protoProps, staticProps) { if (protoProps) peer_defineProperties(Constructor.prototype, protoProps); if (staticProps) peer_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function peer_toPropertyKey(arg) { var key = peer_toPrimitive(arg, "string"); return peer_typeof(key) === "symbol" ? key : String(key); }
function peer_toPrimitive(input, hint) { if (peer_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (peer_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function peer_get() { if (typeof Reflect !== "undefined" && Reflect.get) { peer_get = Reflect.get.bind(); } else { peer_get = function _get(target, property, receiver) { var base = peer_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return peer_get.apply(this, arguments); }
function peer_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = peer_getPrototypeOf(object); if (object === null) break; } return object; }
function peer_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) peer_setPrototypeOf(subClass, superClass); }
function peer_setPrototypeOf(o, p) { peer_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return peer_setPrototypeOf(o, p); }
function peer_createSuper(Derived) { var hasNativeReflectConstruct = peer_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = peer_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = peer_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return peer_possibleConstructorReturn(this, result); }; }
function peer_possibleConstructorReturn(self, call) { if (call && (peer_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return peer_assertThisInitialized(self); }
function peer_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function peer_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function peer_getPrototypeOf(o) { peer_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return peer_getPrototypeOf(o); }








var soStartRegex = /(.*) starting/i;

/**
 * A bare-bones Proxy for RTCPeerConnection to be used by Red5ProSharedObjects.
 */
var peer_Red5ProSharedObjectPeerConnection = /*#__PURE__*/function (_WebRTCPeerHelper) {
  peer_inherits(Red5ProSharedObjectPeerConnection, _WebRTCPeerHelper);
  var _super = peer_createSuper(Red5ProSharedObjectPeerConnection);
  function Red5ProSharedObjectPeerConnection() {
    var _this;
    var responder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
    peer_classCallCheck(this, Red5ProSharedObjectPeerConnection);
    var uuid = Math.floor(Math.random() * 0x10000).toString(16);
    var name = "sharedobject-".concat(uuid);
    _this = _super.call(this, responder, name);
    _this.id = name;
    _this._options = undefined;
    _this._socket = undefined;
    _this._sharedObjectName = undefined;
    _this._connectionPromise = undefined;
    return _this;
  }

  /**
   * Removes handlers assigned to the peer connection instance.
   *
   * @param {RTCPeerConnection} connection
   */
  // eslint-disable-next-line no-unused-vars
  peer_createClass(Red5ProSharedObjectPeerConnection, [{
    key: "_removeConnectionHandlers",
    value: function _removeConnectionHandlers(connection) {
      connection.onconnectionstatechange = undefined;
      connection.oniceconnectionstatechange = undefined;
      connection.onicecandidate = undefined;
      connection.ontrack = undefined;
      connection.ondatachannel = undefined;
    }

    /**
     * Assigns handlers to events on the peer connection instance.
     *
     * @param {RTCPeerConnection} connection
     * @param {Promise} promise
     *        The `Promise` to resolve or reject on success of connection.
     */
    // eslint-disable-next-line no-unused-vars
  }, {
    key: "_addConnectionHandlers",
    value: function _addConnectionHandlers(connection, promise) {
      var _this2 = this;
      var reconnectTimeout;
      var timeoutLimit = 5000;
      promise = promise || this._connectionPromise;
      connection.onconnectionstatechange = function () {
        log_debug(_this2._name, "[peer.onconnectionstatechange] - State: ".concat(connection.connectionState));
        if (connection.connectionState === 'connected') {
          log_debug(_this2._name, '[peerconnection:open]');
          // TODO: This may need to move.
          _this2.trigger(new MessageTransportStateEvent(MessageTransportStateEventTypes.OPEN, _this2._name, {
            peerConnection: _this2
          }));
        } else if (connection.connectionState === 'failed' || connection.connectionState === 'disconnected') {
          log_warn(_this2._name, '[peerconnection:error]');
          if (connection.connectionState === 'failed') {
            _this2.trigger(new MessageTransportStateEvent(MessageTransportStateEventTypes.ERROR, _this2._name, {
              peerConnection: _this2,
              error: 'Connection Failed.'
            }));
          }
          if (promise) {
            promise.reject('Connection Failed.');
          }
        }
      };
      connection.onicecandidate = function (event) {
        log_debug(_this2._name, "[peer.onicecandidate] - Peer Candidate: ".concat(event.candidate));
        if (event.candidate) {
          _this2._socket.post({
            handleCandidate: _this2._name,
            data: {
              candidate: event.candidate
            }
          });
        } else if (event.candidate === null) {
          log_debug(_this2._name, '[icecandidatetrickle:end]');
          if (promise) {
            // promise.resolve(this)
          }
        }
      };
      connection.oniceconnectionstatechange = function (event) {
        var state = connection.iceConnectionState;
        log_debug(_this2._name, "[peer.oniceconnectionstatechange] - State: ".concat(state));
        if (state === 'connected' && browser.getIsEdge()) {
          // Support for ORTC order of candidates.
          // Typically this will be invoked from a `onicegatheringstatechange` event on the Connection.
          // Edge doesn't notify on that event.
          log_debug(_this2._name, '[edge/ortc:notify complete]');
          log_debug(_this2._name, '[icecandidategathering:end]');
          _this2._socket.postEndOfCandidates(_this2._name);
        } else if (state === 'failed') {
          if (reconnectTimeout) {
            clearTimeout(reconnectTimeout);
          }
          _this2.trigger(new MessageTransportStateEvent(MessageTransportStateEventTypes.ERROR, _this2._name, {
            peerConnection: _this2,
            error: 'Connection Failed.'
          }));
          _this2.trigger(new MessageTransportStateEvent(MessageTransportStateEventTypes.CLOSE, _this2._name, {
            peerConnection: _this2,
            event: event
          }));
          if (promise) {
            promise.reject('Connection Failed.');
          }
        } else if (state === 'disconnected') {
          // may receive a disconnect temporarily that will then return to a connection.
          reconnectTimeout = setTimeout(function () {
            log_debug(_this2._name, "[peer.oniceconnectionstatechange] - Reconnect timeout reached. Closing PeerConnection.");
            clearTimeout(reconnectTimeout);
            _this2.trigger(new MessageTransportStateEvent(MessageTransportStateEventTypes.CLOSE, _this2._name, {
              peerConnection: _this2,
              event: event
            }));
          }, timeoutLimit);
        } else {
          if (reconnectTimeout) {
            log_debug(_this2._name, "[peer.oniceconnectionstatechange] - Clearing timeout for reconnect.");
            clearTimeout(reconnectTimeout);
          }
        }
      };
      connection.onicegatheringstatechange = function () {
        var state = connection.iceGatheringState;
        log_debug(_this2._name, "[peer.onicegatheringstatechange] - State: ".concat(state));
        if (state === 'complete') {
          log_debug(_this2._name, '[icecandidategathering:end]');
          _this2._socket.postEndOfCandidates(_this2._name);
        }
      };
    }
  }, {
    key: "_createOffer",
    value: function _createOffer() {
      var _this3 = this;
      var promise = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      log_debug(this._name, "[peer.createoffer]");
      this._peerConnection.createOffer().then(function (sdp) {
        log_debug(_this3._name, "[peer:offer] ".concat(sdp.sdp));
        _this3._peerConnection.setLocalDescription(sdp).then(function () {
          _this3._socket.post({
            handleOffer: _this3._name,
            transport: 'udp',
            data: {
              sdp: sdp
            }
          });
        })["catch"](function (error) {
          if (promise) {
            promise.reject(error);
          }
        });
      });
    }

    /**
     * Hijacking this to track SharedObject name for event notification.
     *
     * @private
     */
  }, {
    key: "getRemoteSharedObject",
    value: function getRemoteSharedObject(name) {
      peer_get(peer_getPrototypeOf(Red5ProSharedObjectPeerConnection.prototype), "getRemoteSharedObject", this).call(this, name);
      this._sharedObjectName = name;
    }

    /**
     * Initialize the WebSocket connection based on configuration properties.
     *
     * @param {Object} configuration
     *                  Configuration object used in construction of RTCPeerConnection.
     * @param {String} id
     *                  Optional identifier for the shared object connection instance. Needs to be unique. Autogenerated if left undefined.
     * @return {Promise}
     */
  }, {
    key: "init",
    value: function init(configuration) {
      var _this4 = this;
      var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var peerPromise = new DeferredPromise();
      this.id = id || this.id;
      this._name = this.id;
      this._options = configuration;
      this._socket = new sharedobject_socket(this);
      this._socket.on('MessageTransport.Open', function (event) {
        log_debug(_this4._name, "[socket:event] - ".concat(event.type));
        _this4._connectionPromise = peerPromise;
        _this4.setUpWithPeerConfiguration(configuration.rtcConfiguration, _this4.getDataChannelConfiguration(configuration)).then(function () {
          _this4._createOffer(peerPromise);
        })["catch"](function (error) {
          _this4.trigger(new MessageTransportStateEvent(MessageTransportStateEventTypes.ERROR, _this4._name, {
            peerConnection: _this4,
            error: error
          }));
          peerPromise.reject(error);
        });
      });
      // Capability = 4 for RTC Connection only.
      this._socket.init(configuration, this.id, 4)["catch"](function (error) {
        _this4.trigger(new MessageTransportStateEvent(MessageTransportStateEventTypes.ERROR, _this4._name, {
          peerConnection: _this4,
          error: error
        }));
        peerPromise.reject(error);
      });
      return peerPromise.promise;
    }

    /**
     * Returns reference to this instance. This is used internally to access the underlying communication channel by the SharedObject implementation.
     *
     * @private
     */
  }, {
    key: "getMessageTransport",
    value: function getMessageTransport() {
      return this._socket || this;
    }

    /**
     * Returns provided or default configuration for the RTCDataChannel.
     *
     *  @param {Object} configuration
     *          The base configuration provided in `init` to check for DataChannel configuration property on.
     *
     * @private
     */
  }, {
    key: "getDataChannelConfiguration",
    value: function getDataChannelConfiguration(configuration) {
      return configuration.dataChannelConfiguration || {
        name: 'red5pro'
      };
    }

    /**
     * Returns the provided or default channel name for the RTCDataChannel.
     *
     * @param {Object} configuration
     *        The base configuration provided in `init` to check for data channel name.
     *
     * @private
     */
  }, {
    key: "getDataChannelName",
    value: function getDataChannelName(configuration) {
      var dataChannelConfiguration = configuration.dataChannelConfiguration;
      if (dataChannelConfiguration && dataChannelConfiguration.name) {
        return dataChannelConfiguration.name;
      }
      return 'red5pro';
    }

    // >> Responder Delegate Handlers.
  }, {
    key: "onIceTrickleComplete",
    value: function onIceTrickleComplete() {
      log_debug(this._name, "[peer:icetricklecomplete]");
      this._socket.post({
        startChannel: this.getDataChannelName(this._options)
      });
    }
  }, {
    key: "onAddIceCandidate",
    value: function onAddIceCandidate(candidate) {
      log_debug(this._name, "[peer:addicecandidate]");
      if (!isObjectEmpty(candidate.candidate)) {
        this._peerConnection.addIceCandidate(candidate);
      } else {
        log_debug(this._name, "[peer:onemptycandidate]");
      }
    }
  }, {
    key: "onSDPAnswer",
    value: function onSDPAnswer(sdp) {
      var _this5 = this;
      log_debug(this._name, "[peer:handleanswer]");
      this._peerConnection.setRemoteDescription(new RTCSessionDescription(sdp)).then(function () {
        //
      })["catch"](function (error) {
        _this5.trigger(new MessageTransportStateEvent(MessageTransportStateEventTypes.ERROR, _this5._name, {
          peerConnection: _this5,
          error: error
        }));
        _this5._connectionPromise.reject(error);
      });
    }
  }, {
    key: "onDataChannelAvailable",
    value: function onDataChannelAvailable(channelName) {
      this._socket.sever({
        switchChannel: channelName || 'red5pro'
      });
      this._socket = undefined;
      this._connectionPromise.resolve(this);
    }
  }, {
    key: "onSocketStatus",
    value: function onSocketStatus(statusData) {
      if (statusData.message) {
        var startResult = soStartRegex.exec(statusData.message);
        log_debug(this._name, "[peer:status] ".concat(statusData.message));
        if (startResult && startResult.length > 1) {
          //        const name = startResult[1] 
          //        const isPeerName = name === this._name
          //        const isDCName = name === this.getDataChannelName(this._options)
          //        this._connectionPromise.resolve(this)
        }
      }
    }
    // << Responder Delegate Handlers.
  }]);
  return Red5ProSharedObjectPeerConnection;
}(webrtc_helper);
/* harmony default export */ var sharedobject_peer = (peer_Red5ProSharedObjectPeerConnection);
// CONCATENATED MODULE: ./src/js/sharedobject/index.js




// CONCATENATED MODULE: ./src/js/conference/participant.js
function participant_typeof(obj) { "@babel/helpers - typeof"; return participant_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, participant_typeof(obj); }
function participant_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function participant_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, participant_toPropertyKey(descriptor.key), descriptor); } }
function participant_createClass(Constructor, protoProps, staticProps) { if (protoProps) participant_defineProperties(Constructor.prototype, protoProps); if (staticProps) participant_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function participant_toPropertyKey(arg) { var key = participant_toPrimitive(arg, "string"); return participant_typeof(key) === "symbol" ? key : String(key); }
function participant_toPrimitive(input, hint) { if (participant_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (participant_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function participant_get() { if (typeof Reflect !== "undefined" && Reflect.get) { participant_get = Reflect.get.bind(); } else { participant_get = function _get(target, property, receiver) { var base = participant_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return participant_get.apply(this, arguments); }
function participant_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = participant_getPrototypeOf(object); if (object === null) break; } return object; }
function participant_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) participant_setPrototypeOf(subClass, superClass); }
function participant_setPrototypeOf(o, p) { participant_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return participant_setPrototypeOf(o, p); }
function participant_createSuper(Derived) { var hasNativeReflectConstruct = participant_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = participant_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = participant_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return participant_possibleConstructorReturn(this, result); }; }
function participant_possibleConstructorReturn(self, call) { if (call && (participant_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return participant_assertThisInitialized(self); }
function participant_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function participant_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function participant_getPrototypeOf(o) { participant_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return participant_getPrototypeOf(o); }




var participant_pubStartRegex = /participant (.*) starting (.*)/i;
// const pubStopRegex = /participant (.*) stopping (.*)/i
var participant_pubStopRegex = /Leaving group (.*)/i;
var participant_NAME = 'RTCConferenceParticipant';
var DEFAULT_GROUP_NAME = 'group01';
var GROUP_TRACK_COUNT = 3;

// Builds off the default configuration for RTCPublisher
var defaultConfiguration = {
  groupName: DEFAULT_GROUP_NAME,
  autoGenerateMediaStream: true,
  mixAudioDown: false
};
var participant_RTCConferenceParticipant = /*#__PURE__*/function (_RTCPublisher) {
  participant_inherits(RTCConferenceParticipant, _RTCPublisher);
  var _super = participant_createSuper(RTCConferenceParticipant);
  function RTCConferenceParticipant() {
    var _this;
    participant_classCallCheck(this, RTCConferenceParticipant);
    _this = _super.call(this);
    _this._name = participant_NAME;
    _this._audioTracks = [];
    _this._videoTracks = [];
    _this._conferenceStream = undefined;
    //    this._audioStream = undefined
    //    this._audioElement = undefined
    return _this;
  }

  /**
   * Creates an `audio`DOM  element.
   *
   * @private
   */
  participant_createClass(RTCConferenceParticipant, [{
    key: "_createAudioElement",
    value: function _createAudioElement() {
      var audioElement = document.createElement('audio');
      //        audioElement.style.display = 'none'
      audioElement.id = 'red5pro-audio';
      audioElement.controls = 'controls';
      audioElement.autoplay = 'autoplay';
      audioElement.playsinline = 'playsinline';
      return audioElement;
    }

    /**
     * Stuff the media stream with additional audio tracks for SDP negotiation.
     *
     * @param {MediaStream} stream
     * @param {Number} amount
     *
     * @private
     */
  }, {
    key: "_packStreamWithAudio",
    value: function _packStreamWithAudio(stream, amount) {
      var v = stream.getVideoTracks()[0].clone();
      stream.addTrack(v);
      while (--amount > -1) {
        var context = new AudioContext();
        var dest = context.createMediaStreamDestination();
        context.createMediaStreamSource(stream).connect(dest);
        stream.addTrack(dest.stream.getAudioTracks()[0]);
      }
    }

    /**
     * Request to generate offer on Peer Connection instance.
     * Override to support SDP stripping.
     *
     * @param {Object} bandwidth
     *        Optional bandwidth configuration object to munge SDP.
     * @return {Promise}
     *        The promise will resolve/reject a success in creation of the offer through the Peer Connection.
     *
     * @private
     */
  }, {
    key: "_createOffer",
    value: function _createOffer() {
      var bandwidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var forceVP8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      log_debug('[createoffer]');
      this._offerFuture = undefined;
      this._offerFuture = Future.createIfNotExist(this._offerFuture);
      this._peerHelper.createOffer(bandwidth, forceVP8, true, this._offerFuture);
      return this._offerFuture.promise;
    }

    /**
     * Request to send offer on WebSocket instance.
     * Override to request join.
     *
     * @param {Object} sdp
     *        Object describing the Session Description.
     * @param {string} streamName
     *        The unique stream name of the broadcast.
     * @param {String} transport
     *        The transport type.
     * @return {Promise}
     *        The promise will resolve/reject on the success of delivering an offer over the WebSocket.
     *
     * @private
     */
  }, {
    key: "_sendOffer",
    value: function _sendOffer(sdp, streamName, transport) {
      var groupName = this._options.groupName;
      this._sendOfferFuture = undefined;
      this._sendOfferFuture = Future.createIfNotExist(this._sendOffFuture);
      this._socketHelper.post({
        joinGroup: groupName,
        streamName: streamName,
        transport: transport,
        data: {
          sdp: sdp
        }
      });
      return this._sendOfferFuture.promise;
    }

    /**
     * Request on WebSocket to begin publishing.
     * Override to bypass publish POST.
     *
     * @param {string} streamName
     *        The unique stream name of the broadcast.
     * @param {string} mode
     *        The broadcast mode: `live`, `record` or `append`.
     * @param {int} framerate
     *        The key framerate to broadcast at.
     * @return {Promise}
     *        The promise will resolve/reject in the request to being a broadcast.
     *
     * @private
     */
    // eslint-disable-next-line no-unused-vars
  }, {
    key: "_requestPublish",
    value: function _requestPublish(streamName, streamMode, keyFramerate) {
      var autoGenerateMediaStream = this._options.autoGenerateMediaStream;
      // A Conference Participant does not request to start a broadcast stream.
      this._publishFuture = undefined;
      this._publishFuture = Future.createIfNotExist(this._publishFuture);
      this._publishFuture.resolve();
      if (autoGenerateMediaStream) {
        this._conferenceStream = this._startReceivers();
        this.trigger(new RTCConferenceParticipantEvent(RTCConferenceParticipantEventTypes.MEDIA_STREAM, this, {
          stream: this._conferenceStream
        }));
      }
      return this._publishFuture.promise;
    }

    /**
     * Request to stop a broadcast.
     * The returned `Promise` will either resolve or reject on successful stop of broadcast.
     * Override to stop conference stream
     *
     * @return {Promise}
     */
  }, {
    key: "unpublish",
    value: function unpublish() {
      if (this._conferenceStream) {
        this._conferenceStream.getTracks().forEach(function (t) {
          return t.stop();
        });
      }
      return participant_get(participant_getPrototypeOf(RTCConferenceParticipant.prototype), "unpublish", this).call(this);
    }

    /**
     * Request to stop a current broadcast.
     * Override to request unjoin.
     *
     * @param {String} streamName
     *        The unique stream name being broadcast on.
     * @return {Promise}
     *        The promise will resolve/reject on success of properly stopping a broadcast.
     *
     * @private
     */
    // eslint-disable-next-line no-unused-vars
  }, {
    key: "_requestUnpublish",
    value: function _requestUnpublish(streamName) {
      var groupName = this._options.groupName;
      this._unpublishFuture = undefined;
      this._unpublishFuture = Future.createIfNotExist(this._unpublishFuture);
      // If we get a false response from trying to send a close POST,
      //  it means that the socket has already been closed by another impetus -
      //  most likley loss of network or server failure.
      if (!this.getMessageTransport().postUnjoin(groupName, streamName)) {
        this._unpublishFuture.resolve();
      }
      return this._unpublishFuture.promise;
    }

    /**
     * Starts moving stored tracks to single MediaStream out.
     *
     * @return {MediaStream}
     * @private
     */
  }, {
    key: "_startReceivers",
    value: function _startReceivers() {
      var receiverTracks = this.getPeerConnection().getTransceivers().map(function (t) {
        if (t.currentDirection === 'recvonly') {
          return t.receiver.track;
        }
        return undefined;
      }).filter(function (t) {
        return t;
      });
      var mixAudioDown = this._options.mixAudioDown;
      var stream;
      var mediaStream = this._conferenceStream || new MediaStream();
      if (!mixAudioDown) {
        // OPTION a - Add each track as singular track to one MediaStream
        receiverTracks.forEach(function (t) {
          return mediaStream.addTrack(t);
        });
      } else {
        // OPTION A - Mix all tracks into a single MediaStream + single AudioTrack
        var ac = new AudioContext();
        // WebAudio MediaStream sources only use the first track.
        var sources = receiverTracks.map(function (t) {
          if (t.kind === 'audio') {
            return ac.createMediaStreamSource(new MediaStream([t]));
          }
          return undefined;
        }).filter(function (t) {
          return t;
        });
        // The destination will output one track of mixed audio.
        var dest = ac.createMediaStreamDestination();
        // Mixing
        sources.forEach(function (s) {
          return s.connect(dest);
        });
        stream = dest.stream;
        stream.getTracks().forEach(function (t) {
          return mediaStream.addTrack(t);
        });
      }
      receiverTracks.forEach(function (t) {
        if (t.kind === 'video') {
          mediaStream.addTrack(t);
        }
      });
      return mediaStream;
    }

    /**
     * Request to initialize the WebRTC-based Publisher based on configuration.
     * The returned `Promise` will either resolve with a reference to this instance or reject with an error `String` in failure.
     * Override to assign groupName if not set.
     *
     * @param {Object} options
     *        The initialization configuration map.
     * @return {Promise}
     */
  }, {
    key: "init",
    value: function init(options) {
      return participant_get(participant_getPrototypeOf(RTCConferenceParticipant.prototype), "init", this).call(this, Object.assign(defaultConfiguration, options));
    }

    /**
     * Request to initialize the WebRTC-based Publisher based on configuration and MediaStream.
     * The returned `Promise` will either resolve with a reference to this instance or reject with an error `String` in failure.
     * Override to assign groupName if not set.
     *
     * @param {Object} options
     *        The initialization configuration map.
     * @param {MediaStream} stream
     *        The already established MediaStream.
     * @return {Promise}
     */
  }, {
    key: "initWithStream",
    value: function initWithStream(options, stream) {
      return participant_get(participant_getPrototypeOf(RTCConferenceParticipant.prototype), "initWithStream", this).call(this, Object.assign(defaultConfiguration, options), stream);
    }

    /**
     * Event handler for track add on PeerConnection.
     *
     * @private
     */
  }, {
    key: "onPeerConnectionTrackAdd",
    value: function onPeerConnectionTrackAdd(track) {
      var autoGenerateMediaStream = this._options.autoGenerateMediaStream;
      if (autoGenerateMediaStream && track.kind === 'audio') {
        this._audioTracks.push(track);
      } else if (autoGenerateMediaStream && track.kind === 'video') {
        this._videoTracks.push(track);
      }
      participant_get(participant_getPrototypeOf(RTCConferenceParticipant.prototype), "onPeerConnectionTrackAdd", this).call(this, track);
    }

    /**
     * Receipt of MediaStream from gUM.
     * Override to pack with conference audio tracks on SDP.
     *
     * @private
     */
  }, {
    key: "_onMediaStreamReceived",
    value: function _onMediaStreamReceived(mediaStream) {
      this._packStreamWithAudio(mediaStream, GROUP_TRACK_COUNT);
      participant_get(participant_getPrototypeOf(RTCConferenceParticipant.prototype), "_onMediaStreamReceived", this).call(this, mediaStream);
    }

    /**
     * Event handler for success in SDP answer over WebSocket.
     * Override to re-assign participant.
     *
     * @private
     */
  }, {
    key: "onSDPAnswer",
    value: function onSDPAnswer(sdp) {
      var streamName = this._options.streamName;
      // Flip streamName to participant id for further ICE negotiation.
      this.overlayOptions({
        streamName: sdp.participantId,
        participantId: sdp.participantId,
        publisherName: streamName
      });
      this._sendOfferFuture = Future.createIfNotExist(this._sendOfferFuture);
      this._sendOfferFuture.resolve(sdp);
    }

    /**
     * Publisher status event handler for start and stop of this Publisher instance.
     * Override for regex on messaging.
     *
     * @private
     */
  }, {
    key: "onPublisherStatus",
    value: function onPublisherStatus(status) {
      log_debug(this._name, '[publisherstatus] - ' + JSON.stringify(status, null, 2));
      var stopResult = participant_pubStopRegex.exec(status.message);
      var startResult = participant_pubStartRegex.exec(status.message);
      if (stopResult && stopResult[1] === this._options.groupName) {
        this._unpublishFuture.resolve();
      } else if (startResult && startResult[1] === this._options.streamName) {
        this._publishFuture.resolve();
      } else {
        log_warn(this._name, 'Publisher status received, but could not handle.');
      }
    }
  }]);
  return RTCConferenceParticipant;
}(publisher_red5pro_rtc);
/* harmony default export */ var participant = (participant_RTCConferenceParticipant);
// CONCATENATED MODULE: ./src/js/index.js
/**
 * Main entry of SDK, accessible on the `window` global at `red5prosdk`.
 *
 * @file red5pro.min.js
 * @module red5prosdk
 *
 *
 */

// SDK_VERSION, LOG_LEVEL injected from webpack build.
















/**
 * A Conference Participant is an RTCPublisher that can consume multiple audio tracks.
 */


/* ----------------------------  */
/* Subscription related references. */
/* ----------------------------  */

/**
 * The fail-over enabled Subscriber Factory.
 * @see Red5ProSubscriber
 */
var js_Red5ProSubscriber = subscriber_Red5ProSubscriber;
/**
 * The WebRTC based Subscriber.
 *
 * An instance of `RTCSubscriber` can be created explicitly using this class, or by the `Red5ProSubscriber` fail-over factory.
 * @see RTCSubscriber
 */
var js_RTCSubscriber = red5pro_rtc;
/**
 * The WebRTC based Subscriber supporting WHEP signaling.
 * @see WHEPClient
 */
var js_WHEPClient = red5pro_whep;
/**
 * The Flash (utilizing RTMP protocol) based Subscriber.
 *
 * An instance of `RTMPSubscriber` can be created explicitly using this class, or by the `Red5ProSubscriber` fail-over factory.
 * @see RTMPSubscriber
 */
var js_RTMPSubscriber = red5pro_rtmp;
/**
 * The HLS (HTTP Live Stream) based Subscriber.
 *
 * An instance of `HLSSubscriber` can be created explicitly using this class, or by the `Red5ProSubscriber` fail-over factory.
 * @see HLSSubscriber
 */
var js_HLSSubscriber = red5pro_hls;
/**
 * Still used, but API-deprecated View instance for playback. Has default setup in version 4.0.0.
 * @private
 */


/* ----------------------------  */
/* Broadcast related references. */
/* ----------------------------  */

/**
 * The fail-over enabled Publisher Factory.
 * @see Red5ProPublisher
 */
var js_Red5ProPublisher = publisher_Red5ProPublisher;
/**
 * The WebRTC based Publisher.<br>An instance of `RTCPublisher` can be created explicitly using this class, or by the `Red5ProPublisher` fail-over factory.
 * @see RTCPublisher
 */
var js_RTCPublisher = publisher_red5pro_rtc;
/**
 * The WebRTC based Publisher supporting WHIP signaling.
 * @see WHIPClient
 */
var js_WHIPClient = red5pro_whip;
/**
 * The Flash (utilizing RTMP protocol) based Publisher.
 *
 * An instance of `RTMPPublisher` can be created explicitly using this class, or by the `Red5ProPublisher` fail-over factory.
 * @see RTMPPublisher
 */
var js_RTMPPublisher = publisher_red5pro_rtmp;
/**
 * Still used, but API-deprecated View instance for broadcast/preview. Has default setup in version 4.0.0.
 * @private
 */


/* Playback controls interface. */


/* Shared Object references. */
/**
 * The ShardObject class.
 * @see Red5ProSharedObject
 */
var js_Red5ProSharedObject = sharedobject;

/**
 * The SharedObject Socket Proxy class.
 * @see Red5ProSharedObjectSocket
 */
var js_Red5ProSharedObjectSocket = sharedobject_socket;

/**
 * The SharedObject PeerConnection Proxy class.
 * @see Red5ProSharedObjectPeerConnection
 */
var js_Red5ProSharedObjectPeerConnection = sharedobject_peer;

/* Events */
/**
 * Enumeration of common Publisher Events.
 */
var js_PublisherEventTypes = PublisherEventTypes;
/**
 * Enueration of events specific to WebRTC-based Publishers.
 */
var js_RTCPublisherEventTypes = RTCPublisherEventTypes;
/**
 * Enumeration of events specific to fail-over Publisher factory.
 */
var js_FailoverPublisherEventTypes = FailoverPublisherEventTypes;
/**
 * Enumeraiton of common Subscriber Events.
 */
var js_SubscriberEventTypes = SubscriberEventTypes;
/**
 * Enumeration of events specific to WebRTC-based Subscribers.
 */
var js_RTCSubscriberEventTypes = RTCSubscriberEventTypes;
/**
 * Enumeration of events specific to RTMP-based Subscribers.
 */
var js_RTMPSubscriberEventTypes = RTMPSubscriberEventTypes;
/**
 * Enumeration of events specific to fail-over Subscriber factory.
 */
var js_FailoverSubscriberEventTypes = FailoverSubscriberEventTypes;
/**
 * Enumeration of events for Shared Objects.
 */
var js_SharedObjectEventTypes = SharedObjectEventTypes;
/**
 * Enumeration of events for WebSocket state.
*/
var js_MessageTransportStateEventTypes = MessageTransportStateEventTypes;
/**
 * Enumeration of events for RTCConferenceParticipant.
 */
var RTCConferenceParticipantEventType = RTCConferenceParticipantEventTypes;

/* Enums */
/**
 * Enumerate Audio Encoder options for Subscribers.
 *  * `OPUS`
 *  * `PCMU`
 *  * `PCMA`
 *  * `SPEEX`
 *  * `NONE`
 */
var js_PlaybackAudioEncoder = PlaybackAudioEncoder;
/**
 * Enumerated Video Encoder options for Subscribers.
 *  * `VP8`
 *  * `H264`
 *  * `NONE`
 */
var js_PlaybackVideoEncoder = PlaybackVideoEncoder;

/**
 * Enumerate ICE Transport options for Publishers and Subscribers.
 * * `UDP`
 * * `TCP`
 */
var js_IceTransportTypes = IceTransportTypes;

/**
 * Enumeration of Transform Frame types used during utilization of Insertable Streams.
 * 
 * * `BUFFER`: Will pass an ArrayBuffer of data to the transform function specified.
 * * `PACKET`: Will pass either a VideoFrame or AudioData to the transform function specified (if supported by browser).
 */
var js_TransformFrameTypes = TransformFrameTypes;
log_establishLogger("".concat("debug") || false); // eslint-disable-line no-undef

/**
 * Sets the log level for logs from the SDK
 * @param {string} level
 *    The specified log level.
 * @param {Boolean} record
 *    Flag to store all for access.
 * @see LOG_LEVELS
 */
var js_setLogLevel = function setLogLevel(level) {
  var record = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  if (LEVELS.hasOwnProperty(level.toUpperCase())) {
    log_establishLogger(level, record);
    if (console) {
      console.log("Red5 Pro SDK Version ".concat("11.0.0-beta.2")); // eslint-disable-line no-undef,no-console
    }
  }
};

/**
 * Access of stored logs if specified `record` parameter of `setLogLevel`
 *
 * @return {Array}
 * @see setLogLevel
 */


/**
 * The enumerated log level Strings.
 *    * `TRACE`
 *    * `INFO`
 *    * `DEBUG`
 *    * `WARN`
 *    * `ERROR`
 *    * `FATAL`
 */
var LOG_LEVELS = LEVELS;
/**
 * Retrieves the Logger instance used by the SDK.
 *
 * @returns {Logger}
 *          The logger.
 */
var js_getLogger = getLogger;

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,